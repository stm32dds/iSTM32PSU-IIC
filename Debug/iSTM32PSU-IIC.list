
iSTM32PSU-IIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008964  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08008a70  08008a70  00009a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ad4  08008ad4  0000a17c  2**0
                  CONTENTS
  4 .ARM          00000000  08008ad4  08008ad4  0000a17c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ad4  08008ad4  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ad4  08008ad4  00009ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ad8  08008ad8  00009ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08008adc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001280  2000017c  08008c58  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013fc  08008c58  0000a3fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f54a  00000000  00000000  0000a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f19  00000000  00000000  000196ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  0001c608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a31  00000000  00000000  0001d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b03  00000000  00000000  0001ddd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130c0  00000000  00000000  000378d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087239  00000000  00000000  0004a994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000d1bcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000364c  00000000  00000000  000d1c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d52a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008a58 	.word	0x08008a58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008a58 	.word	0x08008a58

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fac7 	bl	80006e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8db 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f975 	bl	8000448 <MX_GPIO_Init>
  MX_CRC_Init();
 800015e:	f000 f931 	bl	80003c4 <MX_CRC_Init>
  MX_I2C1_Init();
 8000162:	f000 f943 	bl	80003ec <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000166:	f007 ff9b 	bl	80080a0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  while(!usb_IS_Connected)
 800016a:	e012      	b.n	8000192 <main+0x46>
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800016c:	2200      	movs	r2, #0
 800016e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000172:	4856      	ldr	r0, [pc, #344]	@ (80002cc <main+0x180>)
 8000174:	f000 fe1c 	bl	8000db0 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8000178:	2032      	movs	r0, #50	@ 0x32
 800017a:	f000 fb15 	bl	80007a8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800017e:	2201      	movs	r2, #1
 8000180:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000184:	4851      	ldr	r0, [pc, #324]	@ (80002cc <main+0x180>)
 8000186:	f000 fe13 	bl	8000db0 <HAL_GPIO_WritePin>
	  HAL_Delay(950);
 800018a:	f240 30b6 	movw	r0, #950	@ 0x3b6
 800018e:	f000 fb0b 	bl	80007a8 <HAL_Delay>
  while(!usb_IS_Connected)
 8000192:	4b4f      	ldr	r3, [pc, #316]	@ (80002d0 <main+0x184>)
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	f083 0301 	eor.w	r3, r3, #1
 800019a:	b2db      	uxtb	r3, r3
 800019c:	2b00      	cmp	r3, #0
 800019e:	d1e5      	bne.n	800016c <main+0x20>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 while(!usb_IS_Connected)
 80001a0:	e005      	b.n	80001ae <main+0x62>
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001a8:	4848      	ldr	r0, [pc, #288]	@ (80002cc <main+0x180>)
 80001aa:	f000 fe01 	bl	8000db0 <HAL_GPIO_WritePin>
	 while(!usb_IS_Connected)
 80001ae:	4b48      	ldr	r3, [pc, #288]	@ (80002d0 <main+0x184>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	f083 0301 	eor.w	r3, r3, #1
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d1f2      	bne.n	80001a2 <main+0x56>
	 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c0:	4842      	ldr	r0, [pc, #264]	@ (80002cc <main+0x180>)
 80001c2:	f000 fe0d 	bl	8000de0 <HAL_GPIO_TogglePin>
	 //Data transfer from USB to memory
	 while(usb_ON_Receiving){;} // Wait if USB RX Buffer to be updated
 80001c6:	bf00      	nop
 80001c8:	4b42      	ldr	r3, [pc, #264]	@ (80002d4 <main+0x188>)
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d1fb      	bne.n	80001c8 <main+0x7c>
	 memcpy(&on_off,&UserRxBufferFS[0],sizeof(on_off));
 80001d0:	4b41      	ldr	r3, [pc, #260]	@ (80002d8 <main+0x18c>)
 80001d2:	781a      	ldrb	r2, [r3, #0]
 80001d4:	4b41      	ldr	r3, [pc, #260]	@ (80002dc <main+0x190>)
 80001d6:	701a      	strb	r2, [r3, #0]
	 memcpy(&uSP,&UserRxBufferFS[1],sizeof(uSP));
 80001d8:	4b3f      	ldr	r3, [pc, #252]	@ (80002d8 <main+0x18c>)
 80001da:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80001de:	461a      	mov	r2, r3
 80001e0:	4b3f      	ldr	r3, [pc, #252]	@ (80002e0 <main+0x194>)
 80001e2:	601a      	str	r2, [r3, #0]
	 memcpy(&iSP,&UserRxBufferFS[5],sizeof(iSP));
 80001e4:	4b3c      	ldr	r3, [pc, #240]	@ (80002d8 <main+0x18c>)
 80001e6:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80001ea:	461a      	mov	r2, r3
 80001ec:	4b3d      	ldr	r3, [pc, #244]	@ (80002e4 <main+0x198>)
 80001ee:	601a      	str	r2, [r3, #0]
	 //Data Transfer from memory to i2c
	 masterTxBuf[0]= on_off;
 80001f0:	4b3a      	ldr	r3, [pc, #232]	@ (80002dc <main+0x190>)
 80001f2:	781a      	ldrb	r2, [r3, #0]
 80001f4:	4b3c      	ldr	r3, [pc, #240]	@ (80002e8 <main+0x19c>)
 80001f6:	701a      	strb	r2, [r3, #0]
	 memcpy(&masterTxBuf[1], &uSP, sizeof(uSP));
 80001f8:	4b39      	ldr	r3, [pc, #228]	@ (80002e0 <main+0x194>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a3a      	ldr	r2, [pc, #232]	@ (80002e8 <main+0x19c>)
 80001fe:	f8c2 3001 	str.w	r3, [r2, #1]
	 memcpy(&masterTxBuf[5], &iSP, sizeof(iSP));
 8000202:	4b38      	ldr	r3, [pc, #224]	@ (80002e4 <main+0x198>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a38      	ldr	r2, [pc, #224]	@ (80002e8 <main+0x19c>)
 8000208:	f8c2 3005 	str.w	r3, [r2, #5]
	 tempCRC = HAL_CRC_Calculate(&hcrc,(uint32_t *)masterTxBuf, (I2C_BUFF_LEN/4)-1);
 800020c:	2203      	movs	r2, #3
 800020e:	4936      	ldr	r1, [pc, #216]	@ (80002e8 <main+0x19c>)
 8000210:	4836      	ldr	r0, [pc, #216]	@ (80002ec <main+0x1a0>)
 8000212:	f000 fc16 	bl	8000a42 <HAL_CRC_Calculate>
 8000216:	4603      	mov	r3, r0
 8000218:	4a35      	ldr	r2, [pc, #212]	@ (80002f0 <main+0x1a4>)
 800021a:	6013      	str	r3, [r2, #0]
	 memcpy(&masterTxBuf[I2C_BUFF_LEN-4],&tempCRC,sizeof(tempCRC));
 800021c:	4b34      	ldr	r3, [pc, #208]	@ (80002f0 <main+0x1a4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a31      	ldr	r2, [pc, #196]	@ (80002e8 <main+0x19c>)
 8000222:	60d3      	str	r3, [r2, #12]
	 HAL_I2C_Master_Transmit(&hi2c1, (I2C_SLAVE_ADDRESS << 1),
 8000224:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	2310      	movs	r3, #16
 800022c:	4a2e      	ldr	r2, [pc, #184]	@ (80002e8 <main+0x19c>)
 800022e:	215a      	movs	r1, #90	@ 0x5a
 8000230:	4830      	ldr	r0, [pc, #192]	@ (80002f4 <main+0x1a8>)
 8000232:	f000 ff33 	bl	800109c <HAL_I2C_Master_Transmit>
				  	  	  	  	  	  	  (uint8_t*) &masterTxBuf, I2C_BUFF_LEN, 500);
	 //Wait slave to complete i2c receiving
	 HAL_Delay(5);
 8000236:	2005      	movs	r0, #5
 8000238:	f000 fab6 	bl	80007a8 <HAL_Delay>
	 //Data receiving from slave trough i2c
	 HAL_I2C_Master_Receive(&hi2c1, (I2C_SLAVE_ADDRESS << 1),
 800023c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	2310      	movs	r3, #16
 8000244:	4a2c      	ldr	r2, [pc, #176]	@ (80002f8 <main+0x1ac>)
 8000246:	215a      	movs	r1, #90	@ 0x5a
 8000248:	482a      	ldr	r0, [pc, #168]	@ (80002f4 <main+0x1a8>)
 800024a:	f001 f825 	bl	8001298 <HAL_I2C_Master_Receive>
			 	 	 	 	 	 	 	  (uint8_t*) &masterRxBuf, I2C_BUFF_LEN, 500);
	 memcpy(&on_off_slave_state, &masterRxBuf[0], sizeof(on_off_slave_state));
 800024e:	4b2a      	ldr	r3, [pc, #168]	@ (80002f8 <main+0x1ac>)
 8000250:	781a      	ldrb	r2, [r3, #0]
 8000252:	4b2a      	ldr	r3, [pc, #168]	@ (80002fc <main+0x1b0>)
 8000254:	701a      	strb	r2, [r3, #0]
	 memcpy(&outU, &masterRxBuf[1], sizeof(outU));
 8000256:	4b28      	ldr	r3, [pc, #160]	@ (80002f8 <main+0x1ac>)
 8000258:	f8d3 3001 	ldr.w	r3, [r3, #1]
 800025c:	461a      	mov	r2, r3
 800025e:	4b28      	ldr	r3, [pc, #160]	@ (8000300 <main+0x1b4>)
 8000260:	601a      	str	r2, [r3, #0]
	 memcpy(&outI, &masterRxBuf[5], sizeof(outI));
 8000262:	4b25      	ldr	r3, [pc, #148]	@ (80002f8 <main+0x1ac>)
 8000264:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8000268:	461a      	mov	r2, r3
 800026a:	4b26      	ldr	r3, [pc, #152]	@ (8000304 <main+0x1b8>)
 800026c:	601a      	str	r2, [r3, #0]
	 memcpy(&tempCRC, &masterRxBuf[I2C_BUFF_LEN-4], sizeof(tempCRC));
 800026e:	4b22      	ldr	r3, [pc, #136]	@ (80002f8 <main+0x1ac>)
 8000270:	68db      	ldr	r3, [r3, #12]
 8000272:	4a1f      	ldr	r2, [pc, #124]	@ (80002f0 <main+0x1a4>)
 8000274:	6013      	str	r3, [r2, #0]
	 if(tempCRC == HAL_CRC_Calculate(&hcrc,(uint32_t *)masterRxBuf, (I2C_BUFF_LEN/4)-1))
 8000276:	2203      	movs	r2, #3
 8000278:	491f      	ldr	r1, [pc, #124]	@ (80002f8 <main+0x1ac>)
 800027a:	481c      	ldr	r0, [pc, #112]	@ (80002ec <main+0x1a0>)
 800027c:	f000 fbe1 	bl	8000a42 <HAL_CRC_Calculate>
 8000280:	4602      	mov	r2, r0
 8000282:	4b1b      	ldr	r3, [pc, #108]	@ (80002f0 <main+0x1a4>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	429a      	cmp	r2, r3
 8000288:	d103      	bne.n	8000292 <main+0x146>
		 	i2cError = false;
 800028a:	4b1f      	ldr	r3, [pc, #124]	@ (8000308 <main+0x1bc>)
 800028c:	2200      	movs	r2, #0
 800028e:	701a      	strb	r2, [r3, #0]
 8000290:	e002      	b.n	8000298 <main+0x14c>
	 else 	i2cError = true;
 8000292:	4b1d      	ldr	r3, [pc, #116]	@ (8000308 <main+0x1bc>)
 8000294:	2201      	movs	r2, #1
 8000296:	701a      	strb	r2, [r3, #0]
	 // Data sent to PC via USB if valid packet received
	 if(!i2cError)
 8000298:	4b1b      	ldr	r3, [pc, #108]	@ (8000308 <main+0x1bc>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	f083 0301 	eor.w	r3, r3, #1
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d083      	beq.n	80001ae <main+0x62>
	 {
		 UserTxBufferFS[0] = on_off_slave_state;
 80002a6:	4b15      	ldr	r3, [pc, #84]	@ (80002fc <main+0x1b0>)
 80002a8:	781a      	ldrb	r2, [r3, #0]
 80002aa:	4b18      	ldr	r3, [pc, #96]	@ (800030c <main+0x1c0>)
 80002ac:	701a      	strb	r2, [r3, #0]
		 memcpy(&UserTxBufferFS[1],&outU, sizeof(outU));
 80002ae:	4b14      	ldr	r3, [pc, #80]	@ (8000300 <main+0x1b4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a16      	ldr	r2, [pc, #88]	@ (800030c <main+0x1c0>)
 80002b4:	f8c2 3001 	str.w	r3, [r2, #1]
		 memcpy(&UserTxBufferFS[5],&outI, sizeof(outI));
 80002b8:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <main+0x1b8>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a13      	ldr	r2, [pc, #76]	@ (800030c <main+0x1c0>)
 80002be:	f8c2 3005 	str.w	r3, [r2, #5]
		 CDC_Transmit_FS(UserTxBufferFS, 9);
 80002c2:	2109      	movs	r1, #9
 80002c4:	4811      	ldr	r0, [pc, #68]	@ (800030c <main+0x1c0>)
 80002c6:	f007 ffb1 	bl	800822c <CDC_Transmit_FS>
	 while(!usb_IS_Connected)
 80002ca:	e770      	b.n	80001ae <main+0x62>
 80002cc:	40011000 	.word	0x40011000
 80002d0:	20000f00 	.word	0x20000f00
 80002d4:	20000cfc 	.word	0x20000cfc
 80002d8:	200004fc 	.word	0x200004fc
 80002dc:	20000224 	.word	0x20000224
 80002e0:	20000214 	.word	0x20000214
 80002e4:	20000218 	.word	0x20000218
 80002e8:	200001f4 	.word	0x200001f4
 80002ec:	20000198 	.word	0x20000198
 80002f0:	20000228 	.word	0x20000228
 80002f4:	200001a0 	.word	0x200001a0
 80002f8:	20000204 	.word	0x20000204
 80002fc:	20000225 	.word	0x20000225
 8000300:	2000021c 	.word	0x2000021c
 8000304:	20000220 	.word	0x20000220
 8000308:	2000022c 	.word	0x2000022c
 800030c:	200008fc 	.word	0x200008fc

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b094      	sub	sp, #80	@ 0x50
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800031a:	2228      	movs	r2, #40	@ 0x28
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f008 fb6e 	bl	8008a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	f107 0314 	add.w	r3, r7, #20
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
 8000330:	60da      	str	r2, [r3, #12]
 8000332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000340:	2301      	movs	r3, #1
 8000342:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000344:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034e:	2301      	movs	r3, #1
 8000350:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000352:	2302      	movs	r3, #2
 8000354:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000356:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800035a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800035c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000360:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000366:	4618      	mov	r0, r3
 8000368:	f003 fae8 	bl	800393c <HAL_RCC_OscConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000372:	f000 f8c1 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	230f      	movs	r3, #15
 8000378:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037a:	2302      	movs	r3, #2
 800037c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000382:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000386:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038c:	f107 0314 	add.w	r3, r7, #20
 8000390:	2102      	movs	r1, #2
 8000392:	4618      	mov	r0, r3
 8000394:	f003 fd54 	bl	8003e40 <HAL_RCC_ClockConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800039e:	f000 f8ab 	bl	80004f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003a2:	2310      	movs	r3, #16
 80003a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003a6:	2300      	movs	r3, #0
 80003a8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4618      	mov	r0, r3
 80003ae:	f003 fec1 	bl	8004134 <HAL_RCCEx_PeriphCLKConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003b8:	f000 f89e 	bl	80004f8 <Error_Handler>
  }
}
 80003bc:	bf00      	nop
 80003be:	3750      	adds	r7, #80	@ 0x50
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <MX_CRC_Init+0x20>)
 80003ca:	4a07      	ldr	r2, [pc, #28]	@ (80003e8 <MX_CRC_Init+0x24>)
 80003cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	@ (80003e4 <MX_CRC_Init+0x20>)
 80003d0:	f000 fb1b 	bl	8000a0a <HAL_CRC_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80003da:	f000 f88d 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000198 	.word	0x20000198
 80003e8:	40023000 	.word	0x40023000

080003ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003f0:	4b12      	ldr	r3, [pc, #72]	@ (800043c <MX_I2C1_Init+0x50>)
 80003f2:	4a13      	ldr	r2, [pc, #76]	@ (8000440 <MX_I2C1_Init+0x54>)
 80003f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003f6:	4b11      	ldr	r3, [pc, #68]	@ (800043c <MX_I2C1_Init+0x50>)
 80003f8:	4a12      	ldr	r2, [pc, #72]	@ (8000444 <MX_I2C1_Init+0x58>)
 80003fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <MX_I2C1_Init+0x50>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000402:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <MX_I2C1_Init+0x50>)
 8000404:	2200      	movs	r2, #0
 8000406:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000408:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <MX_I2C1_Init+0x50>)
 800040a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800040e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000410:	4b0a      	ldr	r3, [pc, #40]	@ (800043c <MX_I2C1_Init+0x50>)
 8000412:	2200      	movs	r2, #0
 8000414:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000416:	4b09      	ldr	r3, [pc, #36]	@ (800043c <MX_I2C1_Init+0x50>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800041c:	4b07      	ldr	r3, [pc, #28]	@ (800043c <MX_I2C1_Init+0x50>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000422:	4b06      	ldr	r3, [pc, #24]	@ (800043c <MX_I2C1_Init+0x50>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000428:	4804      	ldr	r0, [pc, #16]	@ (800043c <MX_I2C1_Init+0x50>)
 800042a:	f000 fcf3 	bl	8000e14 <HAL_I2C_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000434:	f000 f860 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	200001a0 	.word	0x200001a0
 8000440:	40005400 	.word	0x40005400
 8000444:	000186a0 	.word	0x000186a0

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045c:	4b24      	ldr	r3, [pc, #144]	@ (80004f0 <MX_GPIO_Init+0xa8>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a23      	ldr	r2, [pc, #140]	@ (80004f0 <MX_GPIO_Init+0xa8>)
 8000462:	f043 0310 	orr.w	r3, r3, #16
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b21      	ldr	r3, [pc, #132]	@ (80004f0 <MX_GPIO_Init+0xa8>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0310 	and.w	r3, r3, #16
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000474:	4b1e      	ldr	r3, [pc, #120]	@ (80004f0 <MX_GPIO_Init+0xa8>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a1d      	ldr	r2, [pc, #116]	@ (80004f0 <MX_GPIO_Init+0xa8>)
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b1b      	ldr	r3, [pc, #108]	@ (80004f0 <MX_GPIO_Init+0xa8>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0320 	and.w	r3, r3, #32
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <MX_GPIO_Init+0xa8>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a17      	ldr	r2, [pc, #92]	@ (80004f0 <MX_GPIO_Init+0xa8>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <MX_GPIO_Init+0xa8>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	607b      	str	r3, [r7, #4]
 80004a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a4:	4b12      	ldr	r3, [pc, #72]	@ (80004f0 <MX_GPIO_Init+0xa8>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a11      	ldr	r2, [pc, #68]	@ (80004f0 <MX_GPIO_Init+0xa8>)
 80004aa:	f043 0308 	orr.w	r3, r3, #8
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <MX_GPIO_Init+0xa8>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0308 	and.w	r3, r3, #8
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004c2:	480c      	ldr	r0, [pc, #48]	@ (80004f4 <MX_GPIO_Init+0xac>)
 80004c4:	f000 fc74 	bl	8000db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80004ce:	2311      	movs	r3, #17
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d6:	2302      	movs	r3, #2
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004da:	f107 0310 	add.w	r3, r7, #16
 80004de:	4619      	mov	r1, r3
 80004e0:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <MX_GPIO_Init+0xac>)
 80004e2:	f000 fae1 	bl	8000aa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e6:	bf00      	nop
 80004e8:	3720      	adds	r7, #32
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40011000 	.word	0x40011000

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <Error_Handler+0x8>

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800050a:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <HAL_MspInit+0x5c>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4a14      	ldr	r2, [pc, #80]	@ (8000560 <HAL_MspInit+0x5c>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6193      	str	r3, [r2, #24]
 8000516:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <HAL_MspInit+0x5c>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <HAL_MspInit+0x5c>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a0e      	ldr	r2, [pc, #56]	@ (8000560 <HAL_MspInit+0x5c>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <HAL_MspInit+0x5c>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800053a:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <HAL_MspInit+0x60>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <HAL_MspInit+0x60>)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000
 8000564:	40010000 	.word	0x40010000

08000568 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a09      	ldr	r2, [pc, #36]	@ (800059c <HAL_CRC_MspInit+0x34>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d10b      	bne.n	8000592 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <HAL_CRC_MspInit+0x38>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a08      	ldr	r2, [pc, #32]	@ (80005a0 <HAL_CRC_MspInit+0x38>)
 8000580:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <HAL_CRC_MspInit+0x38>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	40023000 	.word	0x40023000
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a15      	ldr	r2, [pc, #84]	@ (8000614 <HAL_I2C_MspInit+0x70>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d123      	bne.n	800060c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c4:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <HAL_I2C_MspInit+0x74>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a13      	ldr	r2, [pc, #76]	@ (8000618 <HAL_I2C_MspInit+0x74>)
 80005ca:	f043 0308 	orr.w	r3, r3, #8
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <HAL_I2C_MspInit+0x74>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0308 	and.w	r3, r3, #8
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005dc:	23c0      	movs	r3, #192	@ 0xc0
 80005de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005e0:	2312      	movs	r3, #18
 80005e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e4:	2303      	movs	r3, #3
 80005e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4619      	mov	r1, r3
 80005ee:	480b      	ldr	r0, [pc, #44]	@ (800061c <HAL_I2C_MspInit+0x78>)
 80005f0:	f000 fa5a 	bl	8000aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <HAL_I2C_MspInit+0x74>)
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <HAL_I2C_MspInit+0x74>)
 80005fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005fe:	61d3      	str	r3, [r2, #28]
 8000600:	4b05      	ldr	r3, [pc, #20]	@ (8000618 <HAL_I2C_MspInit+0x74>)
 8000602:	69db      	ldr	r3, [r3, #28]
 8000604:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40005400 	.word	0x40005400
 8000618:	40021000 	.word	0x40021000
 800061c:	40010c00 	.word	0x40010c00

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <NMI_Handler+0x4>

08000628 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <HardFault_Handler+0x4>

08000630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <MemManage_Handler+0x4>

08000638 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <BusFault_Handler+0x4>

08000640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <UsageFault_Handler+0x4>

08000648 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000670:	f000 f87e 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}

08000678 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800067c:	4802      	ldr	r0, [pc, #8]	@ (8000688 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800067e:	f001 fd18 	bl	80020b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000f04 	.word	0x20000f04

0800068c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000698:	f7ff fff8 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800069c:	480b      	ldr	r0, [pc, #44]	@ (80006cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800069e:	490c      	ldr	r1, [pc, #48]	@ (80006d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006a0:	4a0c      	ldr	r2, [pc, #48]	@ (80006d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a4:	e002      	b.n	80006ac <LoopCopyDataInit>

080006a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006aa:	3304      	adds	r3, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b0:	d3f9      	bcc.n	80006a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b2:	4a09      	ldr	r2, [pc, #36]	@ (80006d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006b4:	4c09      	ldr	r4, [pc, #36]	@ (80006dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b8:	e001      	b.n	80006be <LoopFillZerobss>

080006ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006bc:	3204      	adds	r2, #4

080006be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c0:	d3fb      	bcc.n	80006ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006c2:	f008 f9a5 	bl	8008a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c6:	f7ff fd41 	bl	800014c <main>
  bx lr
 80006ca:	4770      	bx	lr
  ldr r0, =_sdata
 80006cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d0:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80006d4:	08008adc 	.word	0x08008adc
  ldr r2, =_sbss
 80006d8:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80006dc:	200013fc 	.word	0x200013fc

080006e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e0:	e7fe      	b.n	80006e0 <ADC1_2_IRQHandler>
	...

080006e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <HAL_Init+0x28>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a07      	ldr	r2, [pc, #28]	@ (800070c <HAL_Init+0x28>)
 80006ee:	f043 0310 	orr.w	r3, r3, #16
 80006f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f4:	2003      	movs	r0, #3
 80006f6:	f000 f947 	bl	8000988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fa:	200f      	movs	r0, #15
 80006fc:	f000 f808 	bl	8000710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000700:	f7ff ff00 	bl	8000504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40022000 	.word	0x40022000

08000710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <HAL_InitTick+0x54>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <HAL_InitTick+0x58>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f95f 	bl	80009f2 <HAL_SYSTICK_Config>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e00e      	b.n	800075c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	d80a      	bhi.n	800075a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000744:	2200      	movs	r2, #0
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f000 f927 	bl	800099e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000750:	4a06      	ldr	r2, [pc, #24]	@ (800076c <HAL_InitTick+0x5c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	e000      	b.n	800075c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000000 	.word	0x20000000
 8000768:	20000008 	.word	0x20000008
 800076c:	20000004 	.word	0x20000004

08000770 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000774:	4b05      	ldr	r3, [pc, #20]	@ (800078c <HAL_IncTick+0x1c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <HAL_IncTick+0x20>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	4a03      	ldr	r2, [pc, #12]	@ (8000790 <HAL_IncTick+0x20>)
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	20000008 	.word	0x20000008
 8000790:	20000230 	.word	0x20000230

08000794 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b02      	ldr	r3, [pc, #8]	@ (80007a4 <HAL_GetTick+0x10>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	20000230 	.word	0x20000230

080007a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b0:	f7ff fff0 	bl	8000794 <HAL_GetTick>
 80007b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c0:	d005      	beq.n	80007ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c2:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <HAL_Delay+0x44>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ce:	bf00      	nop
 80007d0:	f7ff ffe0 	bl	8000794 <HAL_GetTick>
 80007d4:	4602      	mov	r2, r0
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d8f7      	bhi.n	80007d0 <HAL_Delay+0x28>
  {
  }
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000008 	.word	0x20000008

080007f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800080c:	4013      	ands	r3, r2
 800080e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000818:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800081c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000822:	4a04      	ldr	r2, [pc, #16]	@ (8000834 <__NVIC_SetPriorityGrouping+0x44>)
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	60d3      	str	r3, [r2, #12]
}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000ed00 	.word	0xe000ed00

08000838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800083c:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <__NVIC_GetPriorityGrouping+0x18>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	f003 0307 	and.w	r3, r3, #7
}
 8000846:	4618      	mov	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	2b00      	cmp	r3, #0
 8000864:	db0b      	blt.n	800087e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	f003 021f 	and.w	r2, r3, #31
 800086c:	4906      	ldr	r1, [pc, #24]	@ (8000888 <__NVIC_EnableIRQ+0x34>)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	095b      	lsrs	r3, r3, #5
 8000874:	2001      	movs	r0, #1
 8000876:	fa00 f202 	lsl.w	r2, r0, r2
 800087a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	e000e100 	.word	0xe000e100

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	490c      	ldr	r1, [pc, #48]	@ (80008d8 <__NVIC_SetPriority+0x4c>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	0112      	lsls	r2, r2, #4
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	440b      	add	r3, r1
 80008b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b4:	e00a      	b.n	80008cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4908      	ldr	r1, [pc, #32]	@ (80008dc <__NVIC_SetPriority+0x50>)
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	f003 030f 	and.w	r3, r3, #15
 80008c2:	3b04      	subs	r3, #4
 80008c4:	0112      	lsls	r2, r2, #4
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	440b      	add	r3, r1
 80008ca:	761a      	strb	r2, [r3, #24]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e100 	.word	0xe000e100
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	@ 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	f1c3 0307 	rsb	r3, r3, #7
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	bf28      	it	cs
 80008fe:	2304      	movcs	r3, #4
 8000900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3304      	adds	r3, #4
 8000906:	2b06      	cmp	r3, #6
 8000908:	d902      	bls.n	8000910 <NVIC_EncodePriority+0x30>
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b03      	subs	r3, #3
 800090e:	e000      	b.n	8000912 <NVIC_EncodePriority+0x32>
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	f04f 32ff 	mov.w	r2, #4294967295
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	401a      	ands	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000928:	f04f 31ff 	mov.w	r1, #4294967295
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43d9      	mvns	r1, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	4313      	orrs	r3, r2
         );
}
 800093a:	4618      	mov	r0, r3
 800093c:	3724      	adds	r7, #36	@ 0x24
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000954:	d301      	bcc.n	800095a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000956:	2301      	movs	r3, #1
 8000958:	e00f      	b.n	800097a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095a:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <SysTick_Config+0x40>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000962:	210f      	movs	r1, #15
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f7ff ff90 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <SysTick_Config+0x40>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000972:	4b04      	ldr	r3, [pc, #16]	@ (8000984 <SysTick_Config+0x40>)
 8000974:	2207      	movs	r2, #7
 8000976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	e000e010 	.word	0xe000e010

08000988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ff2d 	bl	80007f0 <__NVIC_SetPriorityGrouping>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800099e:	b580      	push	{r7, lr}
 80009a0:	b086      	sub	sp, #24
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	60b9      	str	r1, [r7, #8]
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b0:	f7ff ff42 	bl	8000838 <__NVIC_GetPriorityGrouping>
 80009b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	68b9      	ldr	r1, [r7, #8]
 80009ba:	6978      	ldr	r0, [r7, #20]
 80009bc:	f7ff ff90 	bl	80008e0 <NVIC_EncodePriority>
 80009c0:	4602      	mov	r2, r0
 80009c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff5f 	bl	800088c <__NVIC_SetPriority>
}
 80009ce:	bf00      	nop
 80009d0:	3718      	adds	r7, #24
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff35 	bl	8000854 <__NVIC_EnableIRQ>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ffa2 	bl	8000944 <SysTick_Config>
 8000a00:	4603      	mov	r3, r0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d101      	bne.n	8000a1c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e00e      	b.n	8000a3a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	795b      	ldrb	r3, [r3, #5]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d105      	bne.n	8000a32 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff fd9b 	bl	8000568 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2201      	movs	r2, #1
 8000a36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b087      	sub	sp, #28
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2202      	movs	r2, #2
 8000a56:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f042 0201 	orr.w	r2, r2, #1
 8000a66:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e00a      	b.n	8000a84 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	441a      	add	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	6812      	ldr	r2, [r2, #0]
 8000a7c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d3f0      	bcc.n	8000a6e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2201      	movs	r2, #1
 8000a98:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8000a9a:	693b      	ldr	r3, [r7, #16]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	371c      	adds	r7, #28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
	...

08000aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b08b      	sub	sp, #44	@ 0x2c
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aba:	e169      	b.n	8000d90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000abc:	2201      	movs	r2, #1
 8000abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	69fa      	ldr	r2, [r7, #28]
 8000acc:	4013      	ands	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f040 8158 	bne.w	8000d8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	4a9a      	ldr	r2, [pc, #616]	@ (8000d48 <HAL_GPIO_Init+0x2a0>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d05e      	beq.n	8000ba2 <HAL_GPIO_Init+0xfa>
 8000ae4:	4a98      	ldr	r2, [pc, #608]	@ (8000d48 <HAL_GPIO_Init+0x2a0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d875      	bhi.n	8000bd6 <HAL_GPIO_Init+0x12e>
 8000aea:	4a98      	ldr	r2, [pc, #608]	@ (8000d4c <HAL_GPIO_Init+0x2a4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d058      	beq.n	8000ba2 <HAL_GPIO_Init+0xfa>
 8000af0:	4a96      	ldr	r2, [pc, #600]	@ (8000d4c <HAL_GPIO_Init+0x2a4>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d86f      	bhi.n	8000bd6 <HAL_GPIO_Init+0x12e>
 8000af6:	4a96      	ldr	r2, [pc, #600]	@ (8000d50 <HAL_GPIO_Init+0x2a8>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d052      	beq.n	8000ba2 <HAL_GPIO_Init+0xfa>
 8000afc:	4a94      	ldr	r2, [pc, #592]	@ (8000d50 <HAL_GPIO_Init+0x2a8>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d869      	bhi.n	8000bd6 <HAL_GPIO_Init+0x12e>
 8000b02:	4a94      	ldr	r2, [pc, #592]	@ (8000d54 <HAL_GPIO_Init+0x2ac>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d04c      	beq.n	8000ba2 <HAL_GPIO_Init+0xfa>
 8000b08:	4a92      	ldr	r2, [pc, #584]	@ (8000d54 <HAL_GPIO_Init+0x2ac>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d863      	bhi.n	8000bd6 <HAL_GPIO_Init+0x12e>
 8000b0e:	4a92      	ldr	r2, [pc, #584]	@ (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d046      	beq.n	8000ba2 <HAL_GPIO_Init+0xfa>
 8000b14:	4a90      	ldr	r2, [pc, #576]	@ (8000d58 <HAL_GPIO_Init+0x2b0>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d85d      	bhi.n	8000bd6 <HAL_GPIO_Init+0x12e>
 8000b1a:	2b12      	cmp	r3, #18
 8000b1c:	d82a      	bhi.n	8000b74 <HAL_GPIO_Init+0xcc>
 8000b1e:	2b12      	cmp	r3, #18
 8000b20:	d859      	bhi.n	8000bd6 <HAL_GPIO_Init+0x12e>
 8000b22:	a201      	add	r2, pc, #4	@ (adr r2, 8000b28 <HAL_GPIO_Init+0x80>)
 8000b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b28:	08000ba3 	.word	0x08000ba3
 8000b2c:	08000b7d 	.word	0x08000b7d
 8000b30:	08000b8f 	.word	0x08000b8f
 8000b34:	08000bd1 	.word	0x08000bd1
 8000b38:	08000bd7 	.word	0x08000bd7
 8000b3c:	08000bd7 	.word	0x08000bd7
 8000b40:	08000bd7 	.word	0x08000bd7
 8000b44:	08000bd7 	.word	0x08000bd7
 8000b48:	08000bd7 	.word	0x08000bd7
 8000b4c:	08000bd7 	.word	0x08000bd7
 8000b50:	08000bd7 	.word	0x08000bd7
 8000b54:	08000bd7 	.word	0x08000bd7
 8000b58:	08000bd7 	.word	0x08000bd7
 8000b5c:	08000bd7 	.word	0x08000bd7
 8000b60:	08000bd7 	.word	0x08000bd7
 8000b64:	08000bd7 	.word	0x08000bd7
 8000b68:	08000bd7 	.word	0x08000bd7
 8000b6c:	08000b85 	.word	0x08000b85
 8000b70:	08000b99 	.word	0x08000b99
 8000b74:	4a79      	ldr	r2, [pc, #484]	@ (8000d5c <HAL_GPIO_Init+0x2b4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d013      	beq.n	8000ba2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b7a:	e02c      	b.n	8000bd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	623b      	str	r3, [r7, #32]
          break;
 8000b82:	e029      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	623b      	str	r3, [r7, #32]
          break;
 8000b8c:	e024      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	3308      	adds	r3, #8
 8000b94:	623b      	str	r3, [r7, #32]
          break;
 8000b96:	e01f      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	330c      	adds	r3, #12
 8000b9e:	623b      	str	r3, [r7, #32]
          break;
 8000ba0:	e01a      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d102      	bne.n	8000bb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000baa:	2304      	movs	r3, #4
 8000bac:	623b      	str	r3, [r7, #32]
          break;
 8000bae:	e013      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d105      	bne.n	8000bc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb8:	2308      	movs	r3, #8
 8000bba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	69fa      	ldr	r2, [r7, #28]
 8000bc0:	611a      	str	r2, [r3, #16]
          break;
 8000bc2:	e009      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69fa      	ldr	r2, [r7, #28]
 8000bcc:	615a      	str	r2, [r3, #20]
          break;
 8000bce:	e003      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
          break;
 8000bd4:	e000      	b.n	8000bd8 <HAL_GPIO_Init+0x130>
          break;
 8000bd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	2bff      	cmp	r3, #255	@ 0xff
 8000bdc:	d801      	bhi.n	8000be2 <HAL_GPIO_Init+0x13a>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	e001      	b.n	8000be6 <HAL_GPIO_Init+0x13e>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3304      	adds	r3, #4
 8000be6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	2bff      	cmp	r3, #255	@ 0xff
 8000bec:	d802      	bhi.n	8000bf4 <HAL_GPIO_Init+0x14c>
 8000bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	e002      	b.n	8000bfa <HAL_GPIO_Init+0x152>
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf6:	3b08      	subs	r3, #8
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	210f      	movs	r1, #15
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	fa01 f303 	lsl.w	r3, r1, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	6a39      	ldr	r1, [r7, #32]
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	431a      	orrs	r2, r3
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 80b1 	beq.w	8000d8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c28:	4b4d      	ldr	r3, [pc, #308]	@ (8000d60 <HAL_GPIO_Init+0x2b8>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d60 <HAL_GPIO_Init+0x2b8>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b4a      	ldr	r3, [pc, #296]	@ (8000d60 <HAL_GPIO_Init+0x2b8>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c40:	4a48      	ldr	r2, [pc, #288]	@ (8000d64 <HAL_GPIO_Init+0x2bc>)
 8000c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c44:	089b      	lsrs	r3, r3, #2
 8000c46:	3302      	adds	r3, #2
 8000c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c50:	f003 0303 	and.w	r3, r3, #3
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	220f      	movs	r2, #15
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	4013      	ands	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a40      	ldr	r2, [pc, #256]	@ (8000d68 <HAL_GPIO_Init+0x2c0>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d013      	beq.n	8000c94 <HAL_GPIO_Init+0x1ec>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d6c <HAL_GPIO_Init+0x2c4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d00d      	beq.n	8000c90 <HAL_GPIO_Init+0x1e8>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a3e      	ldr	r2, [pc, #248]	@ (8000d70 <HAL_GPIO_Init+0x2c8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d007      	beq.n	8000c8c <HAL_GPIO_Init+0x1e4>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d74 <HAL_GPIO_Init+0x2cc>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d101      	bne.n	8000c88 <HAL_GPIO_Init+0x1e0>
 8000c84:	2303      	movs	r3, #3
 8000c86:	e006      	b.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c88:	2304      	movs	r3, #4
 8000c8a:	e004      	b.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	e002      	b.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c90:	2301      	movs	r3, #1
 8000c92:	e000      	b.n	8000c96 <HAL_GPIO_Init+0x1ee>
 8000c94:	2300      	movs	r3, #0
 8000c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c98:	f002 0203 	and.w	r2, r2, #3
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	4093      	lsls	r3, r2
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ca6:	492f      	ldr	r1, [pc, #188]	@ (8000d64 <HAL_GPIO_Init+0x2bc>)
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d006      	beq.n	8000cce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	492c      	ldr	r1, [pc, #176]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	608b      	str	r3, [r1, #8]
 8000ccc:	e006      	b.n	8000cdc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cce:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	4928      	ldr	r1, [pc, #160]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cd8:	4013      	ands	r3, r2
 8000cda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d006      	beq.n	8000cf6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ce8:	4b23      	ldr	r3, [pc, #140]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	4922      	ldr	r1, [pc, #136]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	60cb      	str	r3, [r1, #12]
 8000cf4:	e006      	b.n	8000d04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cf6:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	68da      	ldr	r2, [r3, #12]
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	491e      	ldr	r1, [pc, #120]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d00:	4013      	ands	r3, r2
 8000d02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d006      	beq.n	8000d1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	4918      	ldr	r1, [pc, #96]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	604b      	str	r3, [r1, #4]
 8000d1c:	e006      	b.n	8000d2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d1e:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	43db      	mvns	r3, r3
 8000d26:	4914      	ldr	r1, [pc, #80]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d28:	4013      	ands	r3, r2
 8000d2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d021      	beq.n	8000d7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	490e      	ldr	r1, [pc, #56]	@ (8000d78 <HAL_GPIO_Init+0x2d0>)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	600b      	str	r3, [r1, #0]
 8000d44:	e021      	b.n	8000d8a <HAL_GPIO_Init+0x2e2>
 8000d46:	bf00      	nop
 8000d48:	10320000 	.word	0x10320000
 8000d4c:	10310000 	.word	0x10310000
 8000d50:	10220000 	.word	0x10220000
 8000d54:	10210000 	.word	0x10210000
 8000d58:	10120000 	.word	0x10120000
 8000d5c:	10110000 	.word	0x10110000
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010000 	.word	0x40010000
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	40010c00 	.word	0x40010c00
 8000d70:	40011000 	.word	0x40011000
 8000d74:	40011400 	.word	0x40011400
 8000d78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <HAL_GPIO_Init+0x304>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	4909      	ldr	r1, [pc, #36]	@ (8000dac <HAL_GPIO_Init+0x304>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d96:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f47f ae8e 	bne.w	8000abc <HAL_GPIO_Init+0x14>
  }
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	372c      	adds	r7, #44	@ 0x2c
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	40010400 	.word	0x40010400

08000db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	807b      	strh	r3, [r7, #2]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dc0:	787b      	ldrb	r3, [r7, #1]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dc6:	887a      	ldrh	r2, [r7, #2]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dcc:	e003      	b.n	8000dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dce:	887b      	ldrh	r3, [r7, #2]
 8000dd0:	041a      	lsls	r2, r3, #16
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	611a      	str	r2, [r3, #16]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000df2:	887a      	ldrh	r2, [r7, #2]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4013      	ands	r3, r2
 8000df8:	041a      	lsls	r2, r3, #16
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43d9      	mvns	r1, r3
 8000dfe:	887b      	ldrh	r3, [r7, #2]
 8000e00:	400b      	ands	r3, r1
 8000e02:	431a      	orrs	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	611a      	str	r2, [r3, #16]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
	...

08000e14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d101      	bne.n	8000e26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e12b      	b.n	800107e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d106      	bne.n	8000e40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fbb2 	bl	80005a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2224      	movs	r2, #36	@ 0x24
 8000e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f022 0201 	bic.w	r2, r2, #1
 8000e56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e78:	f003 f92a 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 8000e7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	4a81      	ldr	r2, [pc, #516]	@ (8001088 <HAL_I2C_Init+0x274>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d807      	bhi.n	8000e98 <HAL_I2C_Init+0x84>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4a80      	ldr	r2, [pc, #512]	@ (800108c <HAL_I2C_Init+0x278>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	bf94      	ite	ls
 8000e90:	2301      	movls	r3, #1
 8000e92:	2300      	movhi	r3, #0
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	e006      	b.n	8000ea6 <HAL_I2C_Init+0x92>
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4a7d      	ldr	r2, [pc, #500]	@ (8001090 <HAL_I2C_Init+0x27c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	bf94      	ite	ls
 8000ea0:	2301      	movls	r3, #1
 8000ea2:	2300      	movhi	r3, #0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e0e7      	b.n	800107e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4a78      	ldr	r2, [pc, #480]	@ (8001094 <HAL_I2C_Init+0x280>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	0c9b      	lsrs	r3, r3, #18
 8000eb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	4a6a      	ldr	r2, [pc, #424]	@ (8001088 <HAL_I2C_Init+0x274>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d802      	bhi.n	8000ee8 <HAL_I2C_Init+0xd4>
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	e009      	b.n	8000efc <HAL_I2C_Init+0xe8>
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000eee:	fb02 f303 	mul.w	r3, r2, r3
 8000ef2:	4a69      	ldr	r2, [pc, #420]	@ (8001098 <HAL_I2C_Init+0x284>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	099b      	lsrs	r3, r3, #6
 8000efa:	3301      	adds	r3, #1
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6812      	ldr	r2, [r2, #0]
 8000f00:	430b      	orrs	r3, r1
 8000f02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000f0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	495c      	ldr	r1, [pc, #368]	@ (8001088 <HAL_I2C_Init+0x274>)
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	d819      	bhi.n	8000f50 <HAL_I2C_Init+0x13c>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	1e59      	subs	r1, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f2a:	1c59      	adds	r1, r3, #1
 8000f2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000f30:	400b      	ands	r3, r1
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00a      	beq.n	8000f4c <HAL_I2C_Init+0x138>
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1e59      	subs	r1, r3, #1
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f44:	3301      	adds	r3, #1
 8000f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f4a:	e051      	b.n	8000ff0 <HAL_I2C_Init+0x1dc>
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	e04f      	b.n	8000ff0 <HAL_I2C_Init+0x1dc>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d111      	bne.n	8000f7c <HAL_I2C_Init+0x168>
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	1e58      	subs	r0, r3, #1
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6859      	ldr	r1, [r3, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	440b      	add	r3, r1
 8000f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	bf0c      	ite	eq
 8000f74:	2301      	moveq	r3, #1
 8000f76:	2300      	movne	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	e012      	b.n	8000fa2 <HAL_I2C_Init+0x18e>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	1e58      	subs	r0, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6859      	ldr	r1, [r3, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	440b      	add	r3, r1
 8000f8a:	0099      	lsls	r1, r3, #2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f92:	3301      	adds	r3, #1
 8000f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	bf0c      	ite	eq
 8000f9c:	2301      	moveq	r3, #1
 8000f9e:	2300      	movne	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_I2C_Init+0x196>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e022      	b.n	8000ff0 <HAL_I2C_Init+0x1dc>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10e      	bne.n	8000fd0 <HAL_I2C_Init+0x1bc>
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	1e58      	subs	r0, r3, #1
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6859      	ldr	r1, [r3, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	440b      	add	r3, r1
 8000fc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fce:	e00f      	b.n	8000ff0 <HAL_I2C_Init+0x1dc>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	1e58      	subs	r0, r3, #1
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6859      	ldr	r1, [r3, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	0099      	lsls	r1, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	6809      	ldr	r1, [r1, #0]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	430a      	orrs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800101e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6911      	ldr	r1, [r2, #16]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68d2      	ldr	r2, [r2, #12]
 800102a:	4311      	orrs	r1, r2
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	430b      	orrs	r3, r1
 8001032:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	695a      	ldr	r2, [r3, #20]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	430a      	orrs	r2, r1
 800104e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0201 	orr.w	r2, r2, #1
 800105e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2220      	movs	r2, #32
 800106a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	000186a0 	.word	0x000186a0
 800108c:	001e847f 	.word	0x001e847f
 8001090:	003d08ff 	.word	0x003d08ff
 8001094:	431bde83 	.word	0x431bde83
 8001098:	10624dd3 	.word	0x10624dd3

0800109c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	461a      	mov	r2, r3
 80010a8:	460b      	mov	r3, r1
 80010aa:	817b      	strh	r3, [r7, #10]
 80010ac:	4613      	mov	r3, r2
 80010ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff fb70 	bl	8000794 <HAL_GetTick>
 80010b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b20      	cmp	r3, #32
 80010c0:	f040 80e0 	bne.w	8001284 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2319      	movs	r3, #25
 80010ca:	2201      	movs	r2, #1
 80010cc:	4970      	ldr	r1, [pc, #448]	@ (8001290 <HAL_I2C_Master_Transmit+0x1f4>)
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f000 fc9e 	bl	8001a10 <I2C_WaitOnFlagUntilTimeout>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80010da:	2302      	movs	r3, #2
 80010dc:	e0d3      	b.n	8001286 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <HAL_I2C_Master_Transmit+0x50>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e0cc      	b.n	8001286 <HAL_I2C_Master_Transmit+0x1ea>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d007      	beq.n	8001112 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0201 	orr.w	r2, r2, #1
 8001110:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001120:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2221      	movs	r2, #33	@ 0x21
 8001126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2210      	movs	r2, #16
 800112e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	893a      	ldrh	r2, [r7, #8]
 8001142:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001148:	b29a      	uxth	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4a50      	ldr	r2, [pc, #320]	@ (8001294 <HAL_I2C_Master_Transmit+0x1f8>)
 8001152:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001154:	8979      	ldrh	r1, [r7, #10]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	6a3a      	ldr	r2, [r7, #32]
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f000 fb08 	bl	8001770 <I2C_MasterRequestWrite>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e08d      	b.n	8001286 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001180:	e066      	b.n	8001250 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	6a39      	ldr	r1, [r7, #32]
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 fd5c 	bl	8001c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00d      	beq.n	80011ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	2b04      	cmp	r3, #4
 8001198:	d107      	bne.n	80011aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e06b      	b.n	8001286 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b2:	781a      	ldrb	r2, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011be:	1c5a      	adds	r2, r3, #1
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	3b01      	subs	r3, #1
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011d6:	3b01      	subs	r3, #1
 80011d8:	b29a      	uxth	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f003 0304 	and.w	r3, r3, #4
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d11b      	bne.n	8001224 <HAL_I2C_Master_Transmit+0x188>
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d017      	beq.n	8001224 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001204:	1c5a      	adds	r2, r3, #1
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800120e:	b29b      	uxth	r3, r3
 8001210:	3b01      	subs	r3, #1
 8001212:	b29a      	uxth	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800121c:	3b01      	subs	r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	6a39      	ldr	r1, [r7, #32]
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 fd53 	bl	8001cd4 <I2C_WaitOnBTFFlagUntilTimeout>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00d      	beq.n	8001250 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	2b04      	cmp	r3, #4
 800123a:	d107      	bne.n	800124c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800124a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e01a      	b.n	8001286 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001254:	2b00      	cmp	r3, #0
 8001256:	d194      	bne.n	8001182 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2220      	movs	r2, #32
 800126c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	e000      	b.n	8001286 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001284:	2302      	movs	r3, #2
  }
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	00100002 	.word	0x00100002
 8001294:	ffff0000 	.word	0xffff0000

08001298 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	@ 0x30
 800129c:	af02      	add	r7, sp, #8
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	461a      	mov	r2, r3
 80012a4:	460b      	mov	r3, r1
 80012a6:	817b      	strh	r3, [r7, #10]
 80012a8:	4613      	mov	r3, r2
 80012aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff fa70 	bl	8000794 <HAL_GetTick>
 80012b4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b20      	cmp	r3, #32
 80012c0:	f040 824b 	bne.w	800175a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2319      	movs	r3, #25
 80012ca:	2201      	movs	r2, #1
 80012cc:	497f      	ldr	r1, [pc, #508]	@ (80014cc <HAL_I2C_Master_Receive+0x234>)
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f000 fb9e 	bl	8001a10 <I2C_WaitOnFlagUntilTimeout>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80012da:	2302      	movs	r3, #2
 80012dc:	e23e      	b.n	800175c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_I2C_Master_Receive+0x54>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e237      	b.n	800175c <HAL_I2C_Master_Receive+0x4c4>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2201      	movs	r2, #1
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d007      	beq.n	8001312 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0201 	orr.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001320:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2222      	movs	r2, #34	@ 0x22
 8001326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2210      	movs	r2, #16
 800132e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	893a      	ldrh	r2, [r7, #8]
 8001342:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001348:	b29a      	uxth	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4a5f      	ldr	r2, [pc, #380]	@ (80014d0 <HAL_I2C_Master_Receive+0x238>)
 8001352:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001354:	8979      	ldrh	r1, [r7, #10]
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f000 fa8a 	bl	8001874 <I2C_MasterRequestRead>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e1f8      	b.n	800175c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800136e:	2b00      	cmp	r3, #0
 8001370:	d113      	bne.n	800139a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	61fb      	str	r3, [r7, #28]
 8001386:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e1cc      	b.n	8001734 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d11e      	bne.n	80013e0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013b2:	b672      	cpsid	i
}
 80013b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013dc:	b662      	cpsie	i
}
 80013de:	e035      	b.n	800144c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d11e      	bne.n	8001426 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001420:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001422:	b662      	cpsie	i
}
 8001424:	e012      	b.n	800144c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001434:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800144c:	e172      	b.n	8001734 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001452:	2b03      	cmp	r3, #3
 8001454:	f200 811f 	bhi.w	8001696 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800145c:	2b01      	cmp	r3, #1
 800145e:	d123      	bne.n	80014a8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001462:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 fc7d 	bl	8001d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e173      	b.n	800175c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001490:	3b01      	subs	r3, #1
 8001492:	b29a      	uxth	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800149c:	b29b      	uxth	r3, r3
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80014a6:	e145      	b.n	8001734 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d152      	bne.n	8001556 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014b6:	2200      	movs	r2, #0
 80014b8:	4906      	ldr	r1, [pc, #24]	@ (80014d4 <HAL_I2C_Master_Receive+0x23c>)
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 faa8 	bl	8001a10 <I2C_WaitOnFlagUntilTimeout>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d008      	beq.n	80014d8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e148      	b.n	800175c <HAL_I2C_Master_Receive+0x4c4>
 80014ca:	bf00      	nop
 80014cc:	00100002 	.word	0x00100002
 80014d0:	ffff0000 	.word	0xffff0000
 80014d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001508:	3b01      	subs	r3, #1
 800150a:	b29a      	uxth	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001514:	b29b      	uxth	r3, r3
 8001516:	3b01      	subs	r3, #1
 8001518:	b29a      	uxth	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800151e:	b662      	cpsie	i
}
 8001520:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800153e:	3b01      	subs	r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800154a:	b29b      	uxth	r3, r3
 800154c:	3b01      	subs	r3, #1
 800154e:	b29a      	uxth	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001554:	e0ee      	b.n	8001734 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800155c:	2200      	movs	r2, #0
 800155e:	4981      	ldr	r1, [pc, #516]	@ (8001764 <HAL_I2C_Master_Receive+0x4cc>)
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f000 fa55 	bl	8001a10 <I2C_WaitOnFlagUntilTimeout>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0f5      	b.n	800175c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800157e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001596:	1c5a      	adds	r2, r3, #1
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015a0:	3b01      	subs	r3, #1
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	3b01      	subs	r3, #1
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80015b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001768 <HAL_I2C_Master_Receive+0x4d0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	08db      	lsrs	r3, r3, #3
 80015bc:	4a6b      	ldr	r2, [pc, #428]	@ (800176c <HAL_I2C_Master_Receive+0x4d4>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	0a1a      	lsrs	r2, r3, #8
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	00da      	lsls	r2, r3, #3
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d118      	bne.n	800160e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2220      	movs	r2, #32
 80015e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f043 0220 	orr.w	r2, r3, #32
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80015fe:	b662      	cpsie	i
}
 8001600:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0a6      	b.n	800175c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b04      	cmp	r3, #4
 800161a:	d1d9      	bne.n	80015d0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800162a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001648:	3b01      	subs	r3, #1
 800164a:	b29a      	uxth	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001654:	b29b      	uxth	r3, r3
 8001656:	3b01      	subs	r3, #1
 8001658:	b29a      	uxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800165e:	b662      	cpsie	i
}
 8001660:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800167e:	3b01      	subs	r3, #1
 8001680:	b29a      	uxth	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800168a:	b29b      	uxth	r3, r3
 800168c:	3b01      	subs	r3, #1
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001694:	e04e      	b.n	8001734 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001698:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f000 fb62 	bl	8001d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e058      	b.n	800175c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c6:	3b01      	subs	r3, #1
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	3b01      	subs	r3, #1
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d124      	bne.n	8001734 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d107      	bne.n	8001702 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001700:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691a      	ldr	r2, [r3, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170c:	b2d2      	uxtb	r2, r2
 800170e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800171e:	3b01      	subs	r3, #1
 8001720:	b29a      	uxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800172a:	b29b      	uxth	r3, r3
 800172c:	3b01      	subs	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001738:	2b00      	cmp	r3, #0
 800173a:	f47f ae88 	bne.w	800144e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2220      	movs	r2, #32
 8001742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e000      	b.n	800175c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800175a:	2302      	movs	r3, #2
  }
}
 800175c:	4618      	mov	r0, r3
 800175e:	3728      	adds	r7, #40	@ 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	00010004 	.word	0x00010004
 8001768:	20000000 	.word	0x20000000
 800176c:	14f8b589 	.word	0x14f8b589

08001770 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af02      	add	r7, sp, #8
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	460b      	mov	r3, r1
 800177e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001784:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2b08      	cmp	r3, #8
 800178a:	d006      	beq.n	800179a <I2C_MasterRequestWrite+0x2a>
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d003      	beq.n	800179a <I2C_MasterRequestWrite+0x2a>
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001798:	d108      	bne.n	80017ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e00b      	b.n	80017c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b0:	2b12      	cmp	r3, #18
 80017b2:	d107      	bne.n	80017c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 f91d 	bl	8001a10 <I2C_WaitOnFlagUntilTimeout>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00d      	beq.n	80017f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017ea:	d103      	bne.n	80017f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e035      	b.n	8001864 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001800:	d108      	bne.n	8001814 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001802:	897b      	ldrh	r3, [r7, #10]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001810:	611a      	str	r2, [r3, #16]
 8001812:	e01b      	b.n	800184c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001814:	897b      	ldrh	r3, [r7, #10]
 8001816:	11db      	asrs	r3, r3, #7
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f003 0306 	and.w	r3, r3, #6
 800181e:	b2db      	uxtb	r3, r3
 8001820:	f063 030f 	orn	r3, r3, #15
 8001824:	b2da      	uxtb	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	490e      	ldr	r1, [pc, #56]	@ (800186c <I2C_MasterRequestWrite+0xfc>)
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 f966 	bl	8001b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e010      	b.n	8001864 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001842:	897b      	ldrh	r3, [r7, #10]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	4907      	ldr	r1, [pc, #28]	@ (8001870 <I2C_MasterRequestWrite+0x100>)
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 f956 	bl	8001b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	00010008 	.word	0x00010008
 8001870:	00010002 	.word	0x00010002

08001874 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af02      	add	r7, sp, #8
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	460b      	mov	r3, r1
 8001882:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001888:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001898:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2b08      	cmp	r3, #8
 800189e:	d006      	beq.n	80018ae <I2C_MasterRequestRead+0x3a>
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d003      	beq.n	80018ae <I2C_MasterRequestRead+0x3a>
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80018ac:	d108      	bne.n	80018c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	e00b      	b.n	80018d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c4:	2b11      	cmp	r3, #17
 80018c6:	d107      	bne.n	80018d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f893 	bl	8001a10 <I2C_WaitOnFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00d      	beq.n	800190c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018fe:	d103      	bne.n	8001908 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001906:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e079      	b.n	8001a00 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001914:	d108      	bne.n	8001928 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001916:	897b      	ldrh	r3, [r7, #10]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	b2da      	uxtb	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	611a      	str	r2, [r3, #16]
 8001926:	e05f      	b.n	80019e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001928:	897b      	ldrh	r3, [r7, #10]
 800192a:	11db      	asrs	r3, r3, #7
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f003 0306 	and.w	r3, r3, #6
 8001932:	b2db      	uxtb	r3, r3
 8001934:	f063 030f 	orn	r3, r3, #15
 8001938:	b2da      	uxtb	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4930      	ldr	r1, [pc, #192]	@ (8001a08 <I2C_MasterRequestRead+0x194>)
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f8dc 	bl	8001b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e054      	b.n	8001a00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001956:	897b      	ldrh	r3, [r7, #10]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4929      	ldr	r1, [pc, #164]	@ (8001a0c <I2C_MasterRequestRead+0x198>)
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 f8cc 	bl	8001b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e044      	b.n	8001a00 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800199a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f000 f831 	bl	8001a10 <I2C_WaitOnFlagUntilTimeout>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00d      	beq.n	80019d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019c2:	d103      	bne.n	80019cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ca:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e017      	b.n	8001a00 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80019d0:	897b      	ldrh	r3, [r7, #10]
 80019d2:	11db      	asrs	r3, r3, #7
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f003 0306 	and.w	r3, r3, #6
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f063 030e 	orn	r3, r3, #14
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4907      	ldr	r1, [pc, #28]	@ (8001a0c <I2C_MasterRequestRead+0x198>)
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f888 	bl	8001b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	00010008 	.word	0x00010008
 8001a0c:	00010002 	.word	0x00010002

08001a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a20:	e048      	b.n	8001ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a28:	d044      	beq.n	8001ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a2a:	f7fe feb3 	bl	8000794 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d302      	bcc.n	8001a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d139      	bne.n	8001ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	0c1b      	lsrs	r3, r3, #16
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d10d      	bne.n	8001a66 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	43da      	mvns	r2, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	4013      	ands	r3, r2
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	e00c      	b.n	8001a80 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	4013      	ands	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d116      	bne.n	8001ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	f043 0220 	orr.w	r2, r3, #32
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e023      	b.n	8001afc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	0c1b      	lsrs	r3, r3, #16
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d10d      	bne.n	8001ada <I2C_WaitOnFlagUntilTimeout+0xca>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	43da      	mvns	r2, r3
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	e00c      	b.n	8001af4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d093      	beq.n	8001a22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b12:	e071      	b.n	8001bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b22:	d123      	bne.n	8001b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2220      	movs	r2, #32
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	f043 0204 	orr.w	r2, r3, #4
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e067      	b.n	8001c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b72:	d041      	beq.n	8001bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b74:	f7fe fe0e 	bl	8000794 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d302      	bcc.n	8001b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d136      	bne.n	8001bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d10c      	bne.n	8001bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bf14      	ite	ne
 8001ba6:	2301      	movne	r3, #1
 8001ba8:	2300      	moveq	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	e00b      	b.n	8001bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d016      	beq.n	8001bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	f043 0220 	orr.w	r2, r3, #32
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e021      	b.n	8001c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	0c1b      	lsrs	r3, r3, #16
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10c      	bne.n	8001c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	e00b      	b.n	8001c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4013      	ands	r3, r2
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf14      	ite	ne
 8001c2e:	2301      	movne	r3, #1
 8001c30:	2300      	moveq	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f47f af6d 	bne.w	8001b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c50:	e034      	b.n	8001cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f8e3 	bl	8001e1e <I2C_IsAcknowledgeFailed>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e034      	b.n	8001ccc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d028      	beq.n	8001cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6a:	f7fe fd93 	bl	8000794 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d302      	bcc.n	8001c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d11d      	bne.n	8001cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8a:	2b80      	cmp	r3, #128	@ 0x80
 8001c8c:	d016      	beq.n	8001cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2220      	movs	r2, #32
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	f043 0220 	orr.w	r2, r3, #32
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e007      	b.n	8001ccc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc6:	2b80      	cmp	r3, #128	@ 0x80
 8001cc8:	d1c3      	bne.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ce0:	e034      	b.n	8001d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f89b 	bl	8001e1e <I2C_IsAcknowledgeFailed>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e034      	b.n	8001d5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d028      	beq.n	8001d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cfa:	f7fe fd4b 	bl	8000794 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d302      	bcc.n	8001d10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11d      	bne.n	8001d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d016      	beq.n	8001d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	f043 0220 	orr.w	r2, r3, #32
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e007      	b.n	8001d5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d1c3      	bne.n	8001ce2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d70:	e049      	b.n	8001e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b10      	cmp	r3, #16
 8001d7e:	d119      	bne.n	8001db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0210 	mvn.w	r2, #16
 8001d88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2220      	movs	r2, #32
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e030      	b.n	8001e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db4:	f7fe fcee 	bl	8000794 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d302      	bcc.n	8001dca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d11d      	bne.n	8001e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd4:	2b40      	cmp	r3, #64	@ 0x40
 8001dd6:	d016      	beq.n	8001e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2220      	movs	r2, #32
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f043 0220 	orr.w	r2, r3, #32
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e007      	b.n	8001e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e10:	2b40      	cmp	r3, #64	@ 0x40
 8001e12:	d1ae      	bne.n	8001d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e34:	d11b      	bne.n	8001e6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	f043 0204 	orr.w	r2, r3, #4
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0e8      	b.n	800205e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d106      	bne.n	8001ea6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f006 faf7 	bl	8008494 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 fa14 	bl	80042e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec8:	f002 f9ea 	bl	80042a0 <USB_CoreInit>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0bf      	b.n	800205e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fa18 	bl	800431a <USB_SetCurrentMode>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0b0      	b.n	800205e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e03e      	b.n	8001f80 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	3311      	adds	r3, #17
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	3310      	adds	r3, #16
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	3313      	adds	r3, #19
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3320      	adds	r3, #32
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	3324      	adds	r3, #36	@ 0x24
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	440b      	add	r3, r1
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	791b      	ldrb	r3, [r3, #4]
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d3bb      	bcc.n	8001f02 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	e044      	b.n	800201a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	3301      	adds	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	791b      	ldrb	r3, [r3, #4]
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	429a      	cmp	r2, r3
 8002022:	d3b5      	bcc.n	8001f90 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3304      	adds	r3, #4
 800202c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800202e:	f002 f980 	bl	8004332 <USB_DevInit>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e00c      	b.n	800205e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f004 fbff 	bl	800685a <USB_DevDisconnect>

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_PCD_Start+0x16>
 8002078:	2302      	movs	r3, #2
 800207a:	e016      	b.n	80020aa <HAL_PCD_Start+0x44>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f002 f916 	bl	80042ba <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800208e:	2101      	movs	r1, #1
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f006 fc7e 	bl	8008992 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f004 fbd3 	bl	8006846 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b088      	sub	sp, #32
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f004 fbd5 	bl	800686e <USB_ReadInterrupts>
 80020c4:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fb1a 	bl	800270a <PCD_EP_ISR_Handler>

    return;
 80020d6:	e119      	b.n	800230c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d013      	beq.n	800210a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020f4:	b292      	uxth	r2, r2
 80020f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f006 fa45 	bl	800858a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002100:	2100      	movs	r1, #0
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f905 	bl	8002312 <HAL_PCD_SetAddress>

    return;
 8002108:	e100      	b.n	800230c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00c      	beq.n	800212e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800211c:	b29a      	uxth	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002126:	b292      	uxth	r2, r2
 8002128:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800212c:	e0ee      	b.n	800230c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00c      	beq.n	8002152 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002140:	b29a      	uxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800214a:	b292      	uxth	r2, r2
 800214c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002150:	e0dc      	b.n	800230c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d027      	beq.n	80021ac <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002164:	b29a      	uxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0204 	bic.w	r2, r2, #4
 800216e:	b292      	uxth	r2, r2
 8002170:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0208 	bic.w	r2, r2, #8
 8002186:	b292      	uxth	r2, r2
 8002188:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f006 fa3b 	bl	8008608 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800219a:	b29a      	uxth	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021a4:	b292      	uxth	r2, r2
 80021a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80021aa:	e0af      	b.n	800230c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8083 	beq.w	80022be <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	77fb      	strb	r3, [r7, #31]
 80021bc:	e010      	b.n	80021e0 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	7ffb      	ldrb	r3, [r7, #31]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	441a      	add	r2, r3
 80021ca:	7ffb      	ldrb	r3, [r7, #31]
 80021cc:	8812      	ldrh	r2, [r2, #0]
 80021ce:	b292      	uxth	r2, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	3320      	adds	r3, #32
 80021d4:	443b      	add	r3, r7
 80021d6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80021da:	7ffb      	ldrb	r3, [r7, #31]
 80021dc:	3301      	adds	r3, #1
 80021de:	77fb      	strb	r3, [r7, #31]
 80021e0:	7ffb      	ldrb	r3, [r7, #31]
 80021e2:	2b07      	cmp	r3, #7
 80021e4:	d9eb      	bls.n	80021be <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f042 0201 	orr.w	r2, r2, #1
 80021f8:	b292      	uxth	r2, r2
 80021fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002206:	b29a      	uxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	b292      	uxth	r2, r2
 8002212:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002216:	bf00      	nop
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002220:	b29b      	uxth	r3, r3
 8002222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f6      	beq.n	8002218 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002232:	b29a      	uxth	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800223c:	b292      	uxth	r2, r2
 800223e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002242:	2300      	movs	r3, #0
 8002244:	77fb      	strb	r3, [r7, #31]
 8002246:	e00f      	b.n	8002268 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002248:	7ffb      	ldrb	r3, [r7, #31]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	4611      	mov	r1, r2
 8002250:	7ffa      	ldrb	r2, [r7, #31]
 8002252:	0092      	lsls	r2, r2, #2
 8002254:	440a      	add	r2, r1
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	3320      	adds	r3, #32
 800225a:	443b      	add	r3, r7
 800225c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002260:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002262:	7ffb      	ldrb	r3, [r7, #31]
 8002264:	3301      	adds	r3, #1
 8002266:	77fb      	strb	r3, [r7, #31]
 8002268:	7ffb      	ldrb	r3, [r7, #31]
 800226a:	2b07      	cmp	r3, #7
 800226c:	d9ec      	bls.n	8002248 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002276:	b29a      	uxth	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0208 	orr.w	r2, r2, #8
 8002280:	b292      	uxth	r2, r2
 8002282:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800228e:	b29a      	uxth	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002298:	b292      	uxth	r2, r2
 800229a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0204 	orr.w	r2, r2, #4
 80022b0:	b292      	uxth	r2, r2
 80022b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f006 f986 	bl	80085c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80022bc:	e026      	b.n	800230c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00f      	beq.n	80022e8 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022da:	b292      	uxth	r2, r2
 80022dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f006 f944 	bl	800856e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80022e6:	e011      	b.n	800230c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00c      	beq.n	800230c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002304:	b292      	uxth	r2, r2
 8002306:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800230a:	bf00      	nop
  }
}
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_PCD_SetAddress+0x1a>
 8002328:	2302      	movs	r3, #2
 800232a:	e012      	b.n	8002352 <HAL_PCD_SetAddress+0x40>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f004 fa6c 	bl	8006820 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	4608      	mov	r0, r1
 8002364:	4611      	mov	r1, r2
 8002366:	461a      	mov	r2, r3
 8002368:	4603      	mov	r3, r0
 800236a:	70fb      	strb	r3, [r7, #3]
 800236c:	460b      	mov	r3, r1
 800236e:	803b      	strh	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800237c:	2b00      	cmp	r3, #0
 800237e:	da0e      	bge.n	800239e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	f003 0207 	and.w	r2, r3, #7
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	3310      	adds	r3, #16
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	705a      	strb	r2, [r3, #1]
 800239c:	e00e      	b.n	80023bc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	f003 0207 	and.w	r2, r3, #7
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023c8:	883a      	ldrh	r2, [r7, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	78ba      	ldrb	r2, [r7, #2]
 80023d2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023d4:	78bb      	ldrb	r3, [r7, #2]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d102      	bne.n	80023e0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_PCD_EP_Open+0x94>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e00e      	b.n	800240c <HAL_PCD_EP_Open+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68f9      	ldr	r1, [r7, #12]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f001 ffb5 	bl	800436c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800240a:	7afb      	ldrb	r3, [r7, #11]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002424:	2b00      	cmp	r3, #0
 8002426:	da0e      	bge.n	8002446 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	f003 0207 	and.w	r2, r3, #7
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	3310      	adds	r3, #16
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4413      	add	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	705a      	strb	r2, [r3, #1]
 8002444:	e00e      	b.n	8002464 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 0207 	and.w	r2, r3, #7
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	b2da      	uxtb	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_PCD_EP_Close+0x6a>
 800247a:	2302      	movs	r3, #2
 800247c:	e00e      	b.n	800249c <HAL_PCD_EP_Close+0x88>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	4618      	mov	r0, r3
 800248e:	f002 fb2d 	bl	8004aec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	460b      	mov	r3, r1
 80024b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024b4:	7afb      	ldrb	r3, [r7, #11]
 80024b6:	f003 0207 	and.w	r2, r3, #7
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4413      	add	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2200      	movs	r2, #0
 80024e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024e4:	7afb      	ldrb	r3, [r7, #11]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6979      	ldr	r1, [r7, #20]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 fce4 	bl	8004ec4 <USB_EPStartXfer>

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002512:	78fb      	ldrb	r3, [r7, #3]
 8002514:	f003 0207 	and.w	r2, r3, #7
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002528:	681b      	ldr	r3, [r3, #0]
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	460b      	mov	r3, r1
 8002542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002544:	7afb      	ldrb	r3, [r7, #11]
 8002546:	f003 0207 	and.w	r2, r3, #7
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	3310      	adds	r3, #16
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2201      	movs	r2, #1
 800257e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002580:	7afb      	ldrb	r3, [r7, #11]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	b2da      	uxtb	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6979      	ldr	r1, [r7, #20]
 8002592:	4618      	mov	r0, r3
 8002594:	f002 fc96 	bl	8004ec4 <USB_EPStartXfer>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	7912      	ldrb	r2, [r2, #4]
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e04c      	b.n	800265a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	da0e      	bge.n	80025e6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	f003 0207 	and.w	r2, r3, #7
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	3310      	adds	r3, #16
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	705a      	strb	r2, [r3, #1]
 80025e4:	e00c      	b.n	8002600 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	4413      	add	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	b2da      	uxtb	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_PCD_EP_SetStall+0x7e>
 800261c:	2302      	movs	r3, #2
 800261e:	e01c      	b.n	800265a <HAL_PCD_EP_SetStall+0xb8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68f9      	ldr	r1, [r7, #12]
 800262e:	4618      	mov	r0, r3
 8002630:	f003 fff9 	bl	8006626 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	2b00      	cmp	r3, #0
 800263c:	d108      	bne.n	8002650 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002648:	4619      	mov	r1, r3
 800264a:	4610      	mov	r0, r2
 800264c:	f004 f91e 	bl	800688c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b084      	sub	sp, #16
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	7912      	ldrb	r2, [r2, #4]
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e040      	b.n	8002702 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002684:	2b00      	cmp	r3, #0
 8002686:	da0e      	bge.n	80026a6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	f003 0207 	and.w	r2, r3, #7
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	3310      	adds	r3, #16
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	4413      	add	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	705a      	strb	r2, [r3, #1]
 80026a4:	e00e      	b.n	80026c4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	f003 0207 	and.w	r2, r3, #7
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_PCD_EP_ClrStall+0x82>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e00e      	b.n	8002702 <HAL_PCD_EP_ClrStall+0xa0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f003 ffe7 	bl	80066c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b096      	sub	sp, #88	@ 0x58
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002712:	e3bb      	b.n	8002e8c <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800271c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002720:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800272e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 8175 	bne.w	8002a22 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002738:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b00      	cmp	r3, #0
 8002742:	d14e      	bne.n	80027e2 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002754:	81fb      	strh	r3, [r7, #14]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	89fb      	ldrh	r3, [r7, #14]
 800275c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002764:	b29b      	uxth	r3, r3
 8002766:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3310      	adds	r3, #16
 800276c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	3302      	adds	r3, #2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4413      	add	r3, r2
 800278c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002798:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800279a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	441a      	add	r2, r3
 80027a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027a8:	2100      	movs	r1, #0
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f005 fec5 	bl	800853a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7b5b      	ldrb	r3, [r3, #13]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8368 	beq.w	8002e8c <PCD_EP_ISR_Handler+0x782>
 80027bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 8363 	bne.w	8002e8c <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7b5b      	ldrb	r3, [r3, #13]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	735a      	strb	r2, [r3, #13]
 80027e0:	e354      	b.n	8002e8c <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027e8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80027f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d034      	beq.n	800286a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002808:	b29b      	uxth	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	3306      	adds	r3, #6
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	4413      	add	r3, r2
 800281e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800282a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002838:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800283a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800283c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800283e:	b29b      	uxth	r3, r3
 8002840:	f004 f874 	bl	800692c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29a      	uxth	r2, r3
 800284c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002850:	4013      	ands	r3, r2
 8002852:	823b      	strh	r3, [r7, #16]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	8a3a      	ldrh	r2, [r7, #16]
 800285a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800285e:	b292      	uxth	r2, r2
 8002860:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f005 fe3c 	bl	80084e0 <HAL_PCD_SetupStageCallback>
 8002868:	e310      	b.n	8002e8c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800286a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800286e:	2b00      	cmp	r3, #0
 8002870:	f280 830c 	bge.w	8002e8c <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b29a      	uxth	r2, r3
 800287c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002880:	4013      	ands	r3, r2
 8002882:	83fb      	strh	r3, [r7, #30]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	8bfa      	ldrh	r2, [r7, #30]
 800288a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800288e:	b292      	uxth	r2, r2
 8002890:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800289a:	b29b      	uxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	3306      	adds	r3, #6
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028bc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d019      	beq.n	80028fa <PCD_EP_ISR_Handler+0x1f0>
 80028c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d015      	beq.n	80028fa <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d4:	6959      	ldr	r1, [r3, #20]
 80028d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80028da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028dc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f004 f824 	bl	800692c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80028e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	441a      	add	r2, r3
 80028ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80028f2:	2100      	movs	r1, #0
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f005 fe05 	bl	8008504 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002904:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800290c:	2b00      	cmp	r3, #0
 800290e:	f040 82bd 	bne.w	8002e8c <PCD_EP_ISR_Handler+0x782>
 8002912:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002916:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800291a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800291e:	f000 82b5 	beq.w	8002e8c <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	61bb      	str	r3, [r7, #24]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002930:	b29b      	uxth	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	4413      	add	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294c:	b29a      	uxth	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	801a      	strh	r2, [r3, #0]
 8002952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b3e      	cmp	r3, #62	@ 0x3e
 8002958:	d91d      	bls.n	8002996 <PCD_EP_ISR_Handler+0x28c>
 800295a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	647b      	str	r3, [r7, #68]	@ 0x44
 8002962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <PCD_EP_ISR_Handler+0x26a>
 800296e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002970:	3b01      	subs	r3, #1
 8002972:	647b      	str	r3, [r7, #68]	@ 0x44
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	b29a      	uxth	r2, r3
 800297a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800297c:	b29b      	uxth	r3, r3
 800297e:	029b      	lsls	r3, r3, #10
 8002980:	b29b      	uxth	r3, r3
 8002982:	4313      	orrs	r3, r2
 8002984:	b29b      	uxth	r3, r3
 8002986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800298a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800298e:	b29a      	uxth	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	801a      	strh	r2, [r3, #0]
 8002994:	e026      	b.n	80029e4 <PCD_EP_ISR_Handler+0x2da>
 8002996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <PCD_EP_ISR_Handler+0x2aa>
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	801a      	strh	r2, [r3, #0]
 80029b2:	e017      	b.n	80029e4 <PCD_EP_ISR_Handler+0x2da>
 80029b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80029bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <PCD_EP_ISR_Handler+0x2c4>
 80029c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029ca:	3301      	adds	r3, #1
 80029cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	029b      	lsls	r3, r3, #10
 80029da:	b29b      	uxth	r3, r3
 80029dc:	4313      	orrs	r3, r2
 80029de:	b29a      	uxth	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f4:	827b      	strh	r3, [r7, #18]
 80029f6:	8a7b      	ldrh	r3, [r7, #18]
 80029f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80029fc:	827b      	strh	r3, [r7, #18]
 80029fe:	8a7b      	ldrh	r3, [r7, #18]
 8002a00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002a04:	827b      	strh	r3, [r7, #18]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	8a7b      	ldrh	r3, [r7, #18]
 8002a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	8013      	strh	r3, [r2, #0]
 8002a20:	e234      	b.n	8002e8c <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a36:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f280 80fc 	bge.w	8002c38 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002a56:	4013      	ands	r3, r2
 8002a58:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002a6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a72:	b292      	uxth	r2, r2
 8002a74:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a76:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a8e:	7b1b      	ldrb	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d125      	bne.n	8002ae0 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3306      	adds	r3, #6
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002abc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002ac0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 8092 	beq.w	8002bee <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6818      	ldr	r0, [r3, #0]
 8002ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad0:	6959      	ldr	r1, [r3, #20]
 8002ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad4:	88da      	ldrh	r2, [r3, #6]
 8002ad6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ada:	f003 ff27 	bl	800692c <USB_ReadPMA>
 8002ade:	e086      	b.n	8002bee <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae2:	78db      	ldrb	r3, [r3, #3]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d10a      	bne.n	8002afe <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ae8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002aec:	461a      	mov	r2, r3
 8002aee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f9d9 	bl	8002ea8 <HAL_PCD_EP_DB_Receive>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002afc:	e077      	b.n	8002bee <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b18:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	441a      	add	r2, r3
 8002b2a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d024      	beq.n	8002ba6 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3302      	adds	r3, #2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b84:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002b88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d02e      	beq.n	8002bee <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b96:	6959      	ldr	r1, [r3, #20]
 8002b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b9a:	891a      	ldrh	r2, [r3, #8]
 8002b9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ba0:	f003 fec4 	bl	800692c <USB_ReadPMA>
 8002ba4:	e023      	b.n	8002bee <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	3306      	adds	r3, #6
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bce:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002bd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be0:	6959      	ldr	r1, [r3, #20]
 8002be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be4:	895a      	ldrh	r2, [r3, #10]
 8002be6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002bea:	f003 fe9f 	bl	800692c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002bf6:	441a      	add	r2, r3
 8002bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bfa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c04:	441a      	add	r2, r3
 8002c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c08:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <PCD_EP_ISR_Handler+0x514>
 8002c12:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d206      	bcs.n	8002c2c <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f005 fc6d 	bl	8008504 <HAL_PCD_DataOutStageCallback>
 8002c2a:	e005      	b.n	8002c38 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c32:	4618      	mov	r0, r3
 8002c34:	f002 f946 	bl	8004ec4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8123 	beq.w	8002e8c <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c46:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	3310      	adds	r3, #16
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002c70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c74:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	441a      	add	r2, r3
 8002c86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002c8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c98:	78db      	ldrb	r3, [r3, #3]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	f040 80a2 	bne.w	8002de4 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca8:	7b1b      	ldrb	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8093 	beq.w	8002dd6 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d046      	beq.n	8002d4a <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cbe:	785b      	ldrb	r3, [r3, #1]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d126      	bne.n	8002d12 <PCD_EP_ISR_Handler+0x608>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	4413      	add	r3, r2
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	011a      	lsls	r2, r3, #4
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	801a      	strh	r2, [r3, #0]
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	801a      	strh	r2, [r3, #0]
 8002d10:	e061      	b.n	8002dd6 <PCD_EP_ISR_Handler+0x6cc>
 8002d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d14:	785b      	ldrb	r3, [r3, #1]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d15d      	bne.n	8002dd6 <PCD_EP_ISR_Handler+0x6cc>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2e:	4413      	add	r3, r2
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	011a      	lsls	r2, r3, #4
 8002d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d44:	2200      	movs	r2, #0
 8002d46:	801a      	strh	r2, [r3, #0]
 8002d48:	e045      	b.n	8002dd6 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d52:	785b      	ldrb	r3, [r3, #1]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d126      	bne.n	8002da6 <PCD_EP_ISR_Handler+0x69c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6c:	4413      	add	r3, r2
 8002d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	011a      	lsls	r2, r3, #4
 8002d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d78:	4413      	add	r3, r2
 8002d7a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8e:	801a      	strh	r2, [r3, #0]
 8002d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da2:	801a      	strh	r2, [r3, #0]
 8002da4:	e017      	b.n	8002dd6 <PCD_EP_ISR_Handler+0x6cc>
 8002da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da8:	785b      	ldrb	r3, [r3, #1]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d113      	bne.n	8002dd6 <PCD_EP_ISR_Handler+0x6cc>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dbc:	4413      	add	r3, r2
 8002dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	011a      	lsls	r2, r3, #4
 8002dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc8:	4413      	add	r3, r2
 8002dca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f005 fbac 	bl	800853a <HAL_PCD_DataInStageCallback>
 8002de2:	e053      	b.n	8002e8c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002de4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d146      	bne.n	8002e7e <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4413      	add	r3, r2
 8002e04:	3302      	adds	r3, #2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e18:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d907      	bls.n	8002e38 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e30:	1ad2      	subs	r2, r2, r3
 8002e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e34:	619a      	str	r2, [r3, #24]
 8002e36:	e002      	b.n	8002e3e <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f005 fb74 	bl	800853a <HAL_PCD_DataInStageCallback>
 8002e52:	e01b      	b.n	8002e8c <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e5c:	441a      	add	r2, r3
 8002e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e60:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e64:	69da      	ldr	r2, [r3, #28]
 8002e66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e6a:	441a      	add	r2, r3
 8002e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e6e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 f824 	bl	8004ec4 <USB_EPStartXfer>
 8002e7c:	e006      	b.n	8002e8c <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e82:	461a      	mov	r2, r3
 8002e84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f91b 	bl	80030c2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b21b      	sxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f6ff ac3b 	blt.w	8002714 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3758      	adds	r7, #88	@ 0x58
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d07e      	beq.n	8002fbe <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3302      	adds	r3, #2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ee8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	8b7b      	ldrh	r3, [r7, #26]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d306      	bcc.n	8002f02 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	699a      	ldr	r2, [r3, #24]
 8002ef8:	8b7b      	ldrh	r3, [r7, #26]
 8002efa:	1ad2      	subs	r2, r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	619a      	str	r2, [r3, #24]
 8002f00:	e002      	b.n	8002f08 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d123      	bne.n	8002f58 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f2a:	833b      	strh	r3, [r7, #24]
 8002f2c:	8b3b      	ldrh	r3, [r7, #24]
 8002f2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f32:	833b      	strh	r3, [r7, #24]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	441a      	add	r2, r3
 8002f42:	8b3b      	ldrh	r3, [r7, #24]
 8002f44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f58:	88fb      	ldrh	r3, [r7, #6]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01f      	beq.n	8002fa2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f7c:	82fb      	strh	r3, [r7, #22]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	441a      	add	r2, r3
 8002f8c:	8afb      	ldrh	r3, [r7, #22]
 8002f8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fa2:	8b7b      	ldrh	r3, [r7, #26]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 8087 	beq.w	80030b8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	6959      	ldr	r1, [r3, #20]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	891a      	ldrh	r2, [r3, #8]
 8002fb6:	8b7b      	ldrh	r3, [r7, #26]
 8002fb8:	f003 fcb8 	bl	800692c <USB_ReadPMA>
 8002fbc:	e07c      	b.n	80030b8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3306      	adds	r3, #6
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	699a      	ldr	r2, [r3, #24]
 8002fec:	8b7b      	ldrh	r3, [r7, #26]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d306      	bcc.n	8003000 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	699a      	ldr	r2, [r3, #24]
 8002ff6:	8b7b      	ldrh	r3, [r7, #26]
 8002ff8:	1ad2      	subs	r2, r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	619a      	str	r2, [r3, #24]
 8002ffe:	e002      	b.n	8003006 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2200      	movs	r2, #0
 8003004:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d123      	bne.n	8003056 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003028:	83fb      	strh	r3, [r7, #30]
 800302a:	8bfb      	ldrh	r3, [r7, #30]
 800302c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003030:	83fb      	strh	r3, [r7, #30]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	441a      	add	r2, r3
 8003040:	8bfb      	ldrh	r3, [r7, #30]
 8003042:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003046:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800304a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800304e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003052:	b29b      	uxth	r3, r3
 8003054:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d11f      	bne.n	80030a0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800307a:	83bb      	strh	r3, [r7, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	8bbb      	ldrh	r3, [r7, #28]
 800308c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003090:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003094:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003098:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800309c:	b29b      	uxth	r3, r3
 800309e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030a0:	8b7b      	ldrh	r3, [r7, #26]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	6959      	ldr	r1, [r3, #20]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	895a      	ldrh	r2, [r3, #10]
 80030b2:	8b7b      	ldrh	r3, [r7, #26]
 80030b4:	f003 fc3a 	bl	800692c <USB_ReadPMA>
    }
  }

  return count;
 80030b8:	8b7b      	ldrh	r3, [r7, #26]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b0a4      	sub	sp, #144	@ 0x90
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	4613      	mov	r3, r2
 80030ce:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 81dd 	beq.w	8003496 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	3302      	adds	r3, #2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003104:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003110:	429a      	cmp	r2, r3
 8003112:	d907      	bls.n	8003124 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	699a      	ldr	r2, [r3, #24]
 8003118:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800311c:	1ad2      	subs	r2, r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	619a      	str	r2, [r3, #24]
 8003122:	e002      	b.n	800312a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 80b9 	bne.w	80032a6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	785b      	ldrb	r3, [r3, #1]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d126      	bne.n	800318a <HAL_PCD_EP_DB_Transmit+0xc8>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800314a:	b29b      	uxth	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003150:	4413      	add	r3, r2
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	011a      	lsls	r2, r3, #4
 800315a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315c:	4413      	add	r3, r2
 800315e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800316e:	b29a      	uxth	r2, r3
 8003170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003172:	801a      	strh	r2, [r3, #0]
 8003174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	b29b      	uxth	r3, r3
 800317a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800317e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003182:	b29a      	uxth	r2, r3
 8003184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003186:	801a      	strh	r2, [r3, #0]
 8003188:	e01a      	b.n	80031c0 <HAL_PCD_EP_DB_Transmit+0xfe>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	785b      	ldrb	r3, [r3, #1]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d116      	bne.n	80031c0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	637b      	str	r3, [r7, #52]	@ 0x34
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a6:	4413      	add	r3, r2
 80031a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	011a      	lsls	r2, r3, #4
 80031b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031b2:	4413      	add	r3, r2
 80031b4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80031b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031bc:	2200      	movs	r2, #0
 80031be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	785b      	ldrb	r3, [r3, #1]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d126      	bne.n	800321c <HAL_PCD_EP_DB_Transmit+0x15a>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031dc:	b29b      	uxth	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	4413      	add	r3, r2
 80031e4:	61fb      	str	r3, [r7, #28]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	011a      	lsls	r2, r3, #4
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	4413      	add	r3, r2
 80031f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003200:	b29a      	uxth	r2, r3
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	801a      	strh	r2, [r3, #0]
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003214:	b29a      	uxth	r2, r3
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	801a      	strh	r2, [r3, #0]
 800321a:	e017      	b.n	800324c <HAL_PCD_EP_DB_Transmit+0x18a>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	785b      	ldrb	r3, [r3, #1]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d113      	bne.n	800324c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800322c:	b29b      	uxth	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	4413      	add	r3, r2
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	011a      	lsls	r2, r3, #4
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	4413      	add	r3, r2
 8003240:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003244:	623b      	str	r3, [r7, #32]
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2200      	movs	r2, #0
 800324a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	4619      	mov	r1, r3
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f005 f971 	bl	800853a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 82fc 	beq.w	800385c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800327a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327e:	82fb      	strh	r3, [r7, #22]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	8afb      	ldrh	r3, [r7, #22]
 8003290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003298:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800329c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	8013      	strh	r3, [r2, #0]
 80032a4:	e2da      	b.n	800385c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d021      	beq.n	80032f4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ca:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	441a      	add	r2, r3
 80032dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80032e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80032e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80032e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	f040 82ae 	bne.w	800385c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003308:	441a      	add	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	69da      	ldr	r2, [r3, #28]
 8003312:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003316:	441a      	add	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	6a1a      	ldr	r2, [r3, #32]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	429a      	cmp	r2, r3
 8003326:	d30b      	bcc.n	8003340 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003338:	1ad2      	subs	r2, r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	621a      	str	r2, [r3, #32]
 800333e:	e017      	b.n	8003370 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d108      	bne.n	800335a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003348:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800334c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003358:	e00a      	b.n	8003370 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2200      	movs	r2, #0
 800336e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d165      	bne.n	8003444 <HAL_PCD_EP_DB_Transmit+0x382>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003386:	b29b      	uxth	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800338c:	4413      	add	r3, r2
 800338e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	011a      	lsls	r2, r3, #4
 8003396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003398:	4413      	add	r3, r2
 800339a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800339e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ae:	801a      	strh	r2, [r3, #0]
 80033b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80033b6:	d91d      	bls.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x332>
 80033b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <HAL_PCD_EP_DB_Transmit+0x310>
 80033cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033ce:	3b01      	subs	r3, #1
 80033d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033da:	b29b      	uxth	r3, r3
 80033dc:	029b      	lsls	r3, r3, #10
 80033de:	b29b      	uxth	r3, r3
 80033e0:	4313      	orrs	r3, r2
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f0:	801a      	strh	r2, [r3, #0]
 80033f2:	e044      	b.n	800347e <HAL_PCD_EP_DB_Transmit+0x3bc>
 80033f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <HAL_PCD_EP_DB_Transmit+0x350>
 80033fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800340a:	b29a      	uxth	r2, r3
 800340c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340e:	801a      	strh	r2, [r3, #0]
 8003410:	e035      	b.n	800347e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	64bb      	str	r3, [r7, #72]	@ 0x48
 800341a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_PCD_EP_DB_Transmit+0x36a>
 8003426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003428:	3301      	adds	r3, #1
 800342a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800342c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29a      	uxth	r2, r3
 8003432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003434:	b29b      	uxth	r3, r3
 8003436:	029b      	lsls	r3, r3, #10
 8003438:	b29b      	uxth	r3, r3
 800343a:	4313      	orrs	r3, r2
 800343c:	b29a      	uxth	r2, r3
 800343e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003440:	801a      	strh	r2, [r3, #0]
 8003442:	e01c      	b.n	800347e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	785b      	ldrb	r3, [r3, #1]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d118      	bne.n	800347e <HAL_PCD_EP_DB_Transmit+0x3bc>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	647b      	str	r3, [r7, #68]	@ 0x44
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800345a:	b29b      	uxth	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003460:	4413      	add	r3, r2
 8003462:	647b      	str	r3, [r7, #68]	@ 0x44
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	011a      	lsls	r2, r3, #4
 800346a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800346c:	4413      	add	r3, r2
 800346e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003472:	643b      	str	r3, [r7, #64]	@ 0x40
 8003474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003478:	b29a      	uxth	r2, r3
 800347a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800347c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6959      	ldr	r1, [r3, #20]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	891a      	ldrh	r2, [r3, #8]
 800348a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800348e:	b29b      	uxth	r3, r3
 8003490:	f003 fa07 	bl	80068a2 <USB_WritePMA>
 8003494:	e1e2      	b.n	800385c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800349e:	b29b      	uxth	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	3306      	adds	r3, #6
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034be:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d307      	bcc.n	80034de <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034d6:	1ad2      	subs	r2, r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	619a      	str	r2, [r3, #24]
 80034dc:	e002      	b.n	80034e4 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2200      	movs	r2, #0
 80034e2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f040 80c0 	bne.w	800366e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	785b      	ldrb	r3, [r3, #1]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d126      	bne.n	8003544 <HAL_PCD_EP_DB_Transmit+0x482>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003504:	b29b      	uxth	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800350a:	4413      	add	r3, r2
 800350c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	011a      	lsls	r2, r3, #4
 8003514:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003516:	4413      	add	r3, r2
 8003518:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800351c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800351e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003528:	b29a      	uxth	r2, r3
 800352a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800352c:	801a      	strh	r2, [r3, #0]
 800352e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800353c:	b29a      	uxth	r2, r3
 800353e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003540:	801a      	strh	r2, [r3, #0]
 8003542:	e01a      	b.n	800357a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	785b      	ldrb	r3, [r3, #1]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d116      	bne.n	800357a <HAL_PCD_EP_DB_Transmit+0x4b8>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	667b      	str	r3, [r7, #100]	@ 0x64
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800355a:	b29b      	uxth	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003560:	4413      	add	r3, r2
 8003562:	667b      	str	r3, [r7, #100]	@ 0x64
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	011a      	lsls	r2, r3, #4
 800356a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800356c:	4413      	add	r3, r2
 800356e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003572:	663b      	str	r3, [r7, #96]	@ 0x60
 8003574:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003576:	2200      	movs	r2, #0
 8003578:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	785b      	ldrb	r3, [r3, #1]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d12b      	bne.n	80035e0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003596:	b29b      	uxth	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800359c:	4413      	add	r3, r2
 800359e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	011a      	lsls	r2, r3, #4
 80035a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035a8:	4413      	add	r3, r2
 80035aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035be:	b29a      	uxth	r2, r3
 80035c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035c4:	801a      	strh	r2, [r3, #0]
 80035c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035dc:	801a      	strh	r2, [r3, #0]
 80035de:	e017      	b.n	8003610 <HAL_PCD_EP_DB_Transmit+0x54e>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d113      	bne.n	8003610 <HAL_PCD_EP_DB_Transmit+0x54e>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035f6:	4413      	add	r3, r2
 80035f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	011a      	lsls	r2, r3, #4
 8003600:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003602:	4413      	add	r3, r2
 8003604:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003608:	673b      	str	r3, [r7, #112]	@ 0x70
 800360a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800360c:	2200      	movs	r2, #0
 800360e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	4619      	mov	r1, r3
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f004 ff8f 	bl	800853a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 811a 	bne.w	800385c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b29b      	uxth	r3, r3
 800363a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800363e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003642:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	441a      	add	r2, r3
 8003654:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800365c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003660:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003668:	b29b      	uxth	r3, r3
 800366a:	8013      	strh	r3, [r2, #0]
 800366c:	e0f6      	b.n	800385c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d121      	bne.n	80036bc <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800368e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003692:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	441a      	add	r2, r3
 80036a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80036a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80036ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80036b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	f040 80ca 	bne.w	800385c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036d0:	441a      	add	r2, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036de:	441a      	add	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d30b      	bcc.n	8003708 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	6a1a      	ldr	r2, [r3, #32]
 80036fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003700:	1ad2      	subs	r2, r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	621a      	str	r2, [r3, #32]
 8003706:	e017      	b.n	8003738 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d108      	bne.n	8003722 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003710:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003714:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003720:	e00a      	b.n	8003738 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2200      	movs	r2, #0
 800372e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	657b      	str	r3, [r7, #84]	@ 0x54
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d165      	bne.n	8003812 <HAL_PCD_EP_DB_Transmit+0x750>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003754:	b29b      	uxth	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800375a:	4413      	add	r3, r2
 800375c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	011a      	lsls	r2, r3, #4
 8003764:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003766:	4413      	add	r3, r2
 8003768:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800376c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800376e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003778:	b29a      	uxth	r2, r3
 800377a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800377c:	801a      	strh	r2, [r3, #0]
 800377e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003782:	2b3e      	cmp	r3, #62	@ 0x3e
 8003784:	d91d      	bls.n	80037c2 <HAL_PCD_EP_DB_Transmit+0x700>
 8003786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800378e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <HAL_PCD_EP_DB_Transmit+0x6de>
 800379a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800379c:	3b01      	subs	r3, #1
 800379e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	029b      	lsls	r3, r3, #10
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4313      	orrs	r3, r2
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037be:	801a      	strh	r2, [r3, #0]
 80037c0:	e041      	b.n	8003846 <HAL_PCD_EP_DB_Transmit+0x784>
 80037c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <HAL_PCD_EP_DB_Transmit+0x71e>
 80037ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037d8:	b29a      	uxth	r2, r3
 80037da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037dc:	801a      	strh	r2, [r3, #0]
 80037de:	e032      	b.n	8003846 <HAL_PCD_EP_DB_Transmit+0x784>
 80037e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_PCD_EP_DB_Transmit+0x738>
 80037f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80037f6:	3301      	adds	r3, #1
 80037f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003802:	b29b      	uxth	r3, r3
 8003804:	029b      	lsls	r3, r3, #10
 8003806:	b29b      	uxth	r3, r3
 8003808:	4313      	orrs	r3, r2
 800380a:	b29a      	uxth	r2, r3
 800380c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800380e:	801a      	strh	r2, [r3, #0]
 8003810:	e019      	b.n	8003846 <HAL_PCD_EP_DB_Transmit+0x784>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	785b      	ldrb	r3, [r3, #1]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d115      	bne.n	8003846 <HAL_PCD_EP_DB_Transmit+0x784>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003822:	b29b      	uxth	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003828:	4413      	add	r3, r2
 800382a:	657b      	str	r3, [r7, #84]	@ 0x54
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	011a      	lsls	r2, r3, #4
 8003832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003834:	4413      	add	r3, r2
 8003836:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800383a:	653b      	str	r3, [r7, #80]	@ 0x50
 800383c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003840:	b29a      	uxth	r2, r3
 8003842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003844:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6959      	ldr	r1, [r3, #20]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	895a      	ldrh	r2, [r3, #10]
 8003852:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003856:	b29b      	uxth	r3, r3
 8003858:	f003 f823 	bl	80068a2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29b      	uxth	r3, r3
 800386e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003876:	82bb      	strh	r3, [r7, #20]
 8003878:	8abb      	ldrh	r3, [r7, #20]
 800387a:	f083 0310 	eor.w	r3, r3, #16
 800387e:	82bb      	strh	r3, [r7, #20]
 8003880:	8abb      	ldrh	r3, [r7, #20]
 8003882:	f083 0320 	eor.w	r3, r3, #32
 8003886:	82bb      	strh	r3, [r7, #20]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	8abb      	ldrh	r3, [r7, #20]
 8003898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800389c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3790      	adds	r7, #144	@ 0x90
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b087      	sub	sp, #28
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	817b      	strh	r3, [r7, #10]
 80038c4:	4613      	mov	r3, r2
 80038c6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80038c8:	897b      	ldrh	r3, [r7, #10]
 80038ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d4:	897b      	ldrh	r3, [r7, #10]
 80038d6:	f003 0207 	and.w	r2, r3, #7
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	3310      	adds	r3, #16
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e009      	b.n	8003900 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038ec:	897a      	ldrh	r2, [r7, #10]
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4413      	add	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003900:	893b      	ldrh	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d107      	bne.n	8003916 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2200      	movs	r2, #0
 800390a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	b29a      	uxth	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	80da      	strh	r2, [r3, #6]
 8003914:	e00b      	b.n	800392e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2201      	movs	r2, #1
 800391a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	b29a      	uxth	r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	0c1b      	lsrs	r3, r3, #16
 8003928:	b29a      	uxth	r2, r3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr
	...

0800393c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e272      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8087 	beq.w	8003a6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800395c:	4b92      	ldr	r3, [pc, #584]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	2b04      	cmp	r3, #4
 8003966:	d00c      	beq.n	8003982 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003968:	4b8f      	ldr	r3, [pc, #572]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	2b08      	cmp	r3, #8
 8003972:	d112      	bne.n	800399a <HAL_RCC_OscConfig+0x5e>
 8003974:	4b8c      	ldr	r3, [pc, #560]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800397c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003980:	d10b      	bne.n	800399a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003982:	4b89      	ldr	r3, [pc, #548]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d06c      	beq.n	8003a68 <HAL_RCC_OscConfig+0x12c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d168      	bne.n	8003a68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e24c      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a2:	d106      	bne.n	80039b2 <HAL_RCC_OscConfig+0x76>
 80039a4:	4b80      	ldr	r3, [pc, #512]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a7f      	ldr	r2, [pc, #508]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	e02e      	b.n	8003a10 <HAL_RCC_OscConfig+0xd4>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x98>
 80039ba:	4b7b      	ldr	r3, [pc, #492]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a7a      	ldr	r2, [pc, #488]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 80039c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b78      	ldr	r3, [pc, #480]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a77      	ldr	r2, [pc, #476]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e01d      	b.n	8003a10 <HAL_RCC_OscConfig+0xd4>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCC_OscConfig+0xbc>
 80039de:	4b72      	ldr	r3, [pc, #456]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a71      	ldr	r2, [pc, #452]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6e      	ldr	r2, [pc, #440]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e00b      	b.n	8003a10 <HAL_RCC_OscConfig+0xd4>
 80039f8:	4b6b      	ldr	r3, [pc, #428]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a6a      	ldr	r2, [pc, #424]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b68      	ldr	r3, [pc, #416]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a67      	ldr	r2, [pc, #412]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003a0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d013      	beq.n	8003a40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fc febc 	bl	8000794 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a20:	f7fc feb8 	bl	8000794 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	@ 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e200      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	4b5d      	ldr	r3, [pc, #372]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0xe4>
 8003a3e:	e014      	b.n	8003a6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fc fea8 	bl	8000794 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fc fea4 	bl	8000794 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	@ 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e1ec      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	4b53      	ldr	r3, [pc, #332]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x10c>
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d063      	beq.n	8003b3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a76:	4b4c      	ldr	r3, [pc, #304]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a82:	4b49      	ldr	r3, [pc, #292]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d11c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x18c>
 8003a8e:	4b46      	ldr	r3, [pc, #280]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d116      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9a:	4b43      	ldr	r3, [pc, #268]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x176>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e1c0      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4939      	ldr	r1, [pc, #228]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac6:	e03a      	b.n	8003b3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad0:	4b36      	ldr	r3, [pc, #216]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad6:	f7fc fe5d 	bl	8000794 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fc fe59 	bl	8000794 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e1a1      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	4b2d      	ldr	r3, [pc, #180]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4b2a      	ldr	r3, [pc, #168]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4927      	ldr	r1, [pc, #156]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]
 8003b10:	e015      	b.n	8003b3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b12:	4b26      	ldr	r3, [pc, #152]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fc fe3c 	bl	8000794 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b20:	f7fc fe38 	bl	8000794 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e180      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d03a      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d019      	beq.n	8003b86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b52:	4b17      	ldr	r3, [pc, #92]	@ (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b58:	f7fc fe1c 	bl	8000794 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fc fe18 	bl	8000794 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e160      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba8 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b7e:	2001      	movs	r0, #1
 8003b80:	f000 faba 	bl	80040f8 <RCC_Delay>
 8003b84:	e01c      	b.n	8003bc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b86:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8c:	f7fc fe02 	bl	8000794 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b92:	e00f      	b.n	8003bb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b94:	f7fc fdfe 	bl	8000794 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d908      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e146      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	42420000 	.word	0x42420000
 8003bb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb4:	4b92      	ldr	r3, [pc, #584]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e9      	bne.n	8003b94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80a6 	beq.w	8003d1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd2:	4b8b      	ldr	r3, [pc, #556]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10d      	bne.n	8003bfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bde:	4b88      	ldr	r3, [pc, #544]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	4a87      	ldr	r2, [pc, #540]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	61d3      	str	r3, [r2, #28]
 8003bea:	4b85      	ldr	r3, [pc, #532]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfa:	4b82      	ldr	r3, [pc, #520]	@ (8003e04 <HAL_RCC_OscConfig+0x4c8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d118      	bne.n	8003c38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c06:	4b7f      	ldr	r3, [pc, #508]	@ (8003e04 <HAL_RCC_OscConfig+0x4c8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e04 <HAL_RCC_OscConfig+0x4c8>)
 8003c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c12:	f7fc fdbf 	bl	8000794 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1a:	f7fc fdbb 	bl	8000794 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b64      	cmp	r3, #100	@ 0x64
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e103      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2c:	4b75      	ldr	r3, [pc, #468]	@ (8003e04 <HAL_RCC_OscConfig+0x4c8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d106      	bne.n	8003c4e <HAL_RCC_OscConfig+0x312>
 8003c40:	4b6f      	ldr	r3, [pc, #444]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	4a6e      	ldr	r2, [pc, #440]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	6213      	str	r3, [r2, #32]
 8003c4c:	e02d      	b.n	8003caa <HAL_RCC_OscConfig+0x36e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x334>
 8003c56:	4b6a      	ldr	r3, [pc, #424]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4a69      	ldr	r2, [pc, #420]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	6213      	str	r3, [r2, #32]
 8003c62:	4b67      	ldr	r3, [pc, #412]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	4a66      	ldr	r2, [pc, #408]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	f023 0304 	bic.w	r3, r3, #4
 8003c6c:	6213      	str	r3, [r2, #32]
 8003c6e:	e01c      	b.n	8003caa <HAL_RCC_OscConfig+0x36e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d10c      	bne.n	8003c92 <HAL_RCC_OscConfig+0x356>
 8003c78:	4b61      	ldr	r3, [pc, #388]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4a60      	ldr	r2, [pc, #384]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	f043 0304 	orr.w	r3, r3, #4
 8003c82:	6213      	str	r3, [r2, #32]
 8003c84:	4b5e      	ldr	r3, [pc, #376]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	4a5d      	ldr	r2, [pc, #372]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	6213      	str	r3, [r2, #32]
 8003c90:	e00b      	b.n	8003caa <HAL_RCC_OscConfig+0x36e>
 8003c92:	4b5b      	ldr	r3, [pc, #364]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	4a5a      	ldr	r2, [pc, #360]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	6213      	str	r3, [r2, #32]
 8003c9e:	4b58      	ldr	r3, [pc, #352]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	4a57      	ldr	r2, [pc, #348]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	f023 0304 	bic.w	r3, r3, #4
 8003ca8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d015      	beq.n	8003cde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb2:	f7fc fd6f 	bl	8000794 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb8:	e00a      	b.n	8003cd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cba:	f7fc fd6b 	bl	8000794 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e0b1      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd0:	4b4b      	ldr	r3, [pc, #300]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0ee      	beq.n	8003cba <HAL_RCC_OscConfig+0x37e>
 8003cdc:	e014      	b.n	8003d08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cde:	f7fc fd59 	bl	8000794 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ce4:	e00a      	b.n	8003cfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce6:	f7fc fd55 	bl	8000794 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e09b      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cfc:	4b40      	ldr	r3, [pc, #256]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1ee      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d105      	bne.n	8003d1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	4a3b      	ldr	r2, [pc, #236]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 8087 	beq.w	8003e32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d24:	4b36      	ldr	r3, [pc, #216]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 030c 	and.w	r3, r3, #12
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d061      	beq.n	8003df4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d146      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d38:	4b33      	ldr	r3, [pc, #204]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3e:	f7fc fd29 	bl	8000794 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d46:	f7fc fd25 	bl	8000794 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e06d      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d58:	4b29      	ldr	r3, [pc, #164]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f0      	bne.n	8003d46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6c:	d108      	bne.n	8003d80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d6e:	4b24      	ldr	r3, [pc, #144]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	4921      	ldr	r1, [pc, #132]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d80:	4b1f      	ldr	r3, [pc, #124]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a19      	ldr	r1, [r3, #32]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	430b      	orrs	r3, r1
 8003d92:	491b      	ldr	r1, [pc, #108]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d98:	4b1b      	ldr	r3, [pc, #108]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9e:	f7fc fcf9 	bl	8000794 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da6:	f7fc fcf5 	bl	8000794 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e03d      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003db8:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x46a>
 8003dc4:	e035      	b.n	8003e32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc6:	4b10      	ldr	r3, [pc, #64]	@ (8003e08 <HAL_RCC_OscConfig+0x4cc>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7fc fce2 	bl	8000794 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd4:	f7fc fcde 	bl	8000794 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e026      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de6:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <HAL_RCC_OscConfig+0x4c4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x498>
 8003df2:	e01e      	b.n	8003e32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e019      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40007000 	.word	0x40007000
 8003e08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e3c <HAL_RCC_OscConfig+0x500>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40021000 	.word	0x40021000

08003e40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0d0      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e54:	4b6a      	ldr	r3, [pc, #424]	@ (8004000 <HAL_RCC_ClockConfig+0x1c0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d910      	bls.n	8003e84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b67      	ldr	r3, [pc, #412]	@ (8004000 <HAL_RCC_ClockConfig+0x1c0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f023 0207 	bic.w	r2, r3, #7
 8003e6a:	4965      	ldr	r1, [pc, #404]	@ (8004000 <HAL_RCC_ClockConfig+0x1c0>)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	4b63      	ldr	r3, [pc, #396]	@ (8004000 <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0b8      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d020      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e9c:	4b59      	ldr	r3, [pc, #356]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4a58      	ldr	r2, [pc, #352]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ea6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb4:	4b53      	ldr	r3, [pc, #332]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4a52      	ldr	r2, [pc, #328]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003eba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003ebe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b50      	ldr	r3, [pc, #320]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	494d      	ldr	r1, [pc, #308]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d040      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d107      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	4b47      	ldr	r3, [pc, #284]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d115      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e07f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d107      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003efe:	4b41      	ldr	r3, [pc, #260]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e073      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06b      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f1e:	4b39      	ldr	r3, [pc, #228]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f023 0203 	bic.w	r2, r3, #3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	4936      	ldr	r1, [pc, #216]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f30:	f7fc fc30 	bl	8000794 <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f38:	f7fc fc2c 	bl	8000794 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e053      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 020c 	and.w	r2, r3, #12
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d1eb      	bne.n	8003f38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f60:	4b27      	ldr	r3, [pc, #156]	@ (8004000 <HAL_RCC_ClockConfig+0x1c0>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d210      	bcs.n	8003f90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6e:	4b24      	ldr	r3, [pc, #144]	@ (8004000 <HAL_RCC_ClockConfig+0x1c0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f023 0207 	bic.w	r2, r3, #7
 8003f76:	4922      	ldr	r1, [pc, #136]	@ (8004000 <HAL_RCC_ClockConfig+0x1c0>)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b20      	ldr	r3, [pc, #128]	@ (8004000 <HAL_RCC_ClockConfig+0x1c0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e032      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9c:	4b19      	ldr	r3, [pc, #100]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4916      	ldr	r1, [pc, #88]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fba:	4b12      	ldr	r3, [pc, #72]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	490e      	ldr	r1, [pc, #56]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fce:	f000 f821 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	490a      	ldr	r1, [pc, #40]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe0:	5ccb      	ldrb	r3, [r1, r3]
 8003fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe6:	4a09      	ldr	r2, [pc, #36]	@ (800400c <HAL_RCC_ClockConfig+0x1cc>)
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003fea:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <HAL_RCC_ClockConfig+0x1d0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc fb8e 	bl	8000710 <HAL_InitTick>

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40022000 	.word	0x40022000
 8004004:	40021000 	.word	0x40021000
 8004008:	08008aa8 	.word	0x08008aa8
 800400c:	20000000 	.word	0x20000000
 8004010:	20000004 	.word	0x20000004

08004014 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	2300      	movs	r3, #0
 8004028:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800402e:	4b1e      	ldr	r3, [pc, #120]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b04      	cmp	r3, #4
 800403c:	d002      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x30>
 800403e:	2b08      	cmp	r3, #8
 8004040:	d003      	beq.n	800404a <HAL_RCC_GetSysClockFreq+0x36>
 8004042:	e027      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004044:	4b19      	ldr	r3, [pc, #100]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004046:	613b      	str	r3, [r7, #16]
      break;
 8004048:	e027      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	0c9b      	lsrs	r3, r3, #18
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	4a17      	ldr	r2, [pc, #92]	@ (80040b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004054:	5cd3      	ldrb	r3, [r2, r3]
 8004056:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d010      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004062:	4b11      	ldr	r3, [pc, #68]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	0c5b      	lsrs	r3, r3, #17
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	4a11      	ldr	r2, [pc, #68]	@ (80040b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800406e:	5cd3      	ldrb	r3, [r2, r3]
 8004070:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a0d      	ldr	r2, [pc, #52]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004076:	fb03 f202 	mul.w	r2, r3, r2
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	e004      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a0c      	ldr	r2, [pc, #48]	@ (80040b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004088:	fb02 f303 	mul.w	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	613b      	str	r3, [r7, #16]
      break;
 8004092:	e002      	b.n	800409a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004094:	4b05      	ldr	r3, [pc, #20]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x98>)
 8004096:	613b      	str	r3, [r7, #16]
      break;
 8004098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409a:	693b      	ldr	r3, [r7, #16]
}
 800409c:	4618      	mov	r0, r3
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	007a1200 	.word	0x007a1200
 80040b0:	08008ac0 	.word	0x08008ac0
 80040b4:	08008ad0 	.word	0x08008ad0
 80040b8:	003d0900 	.word	0x003d0900

080040bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040c0:	4b02      	ldr	r3, [pc, #8]	@ (80040cc <HAL_RCC_GetHCLKFreq+0x10>)
 80040c2:	681b      	ldr	r3, [r3, #0]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr
 80040cc:	20000000 	.word	0x20000000

080040d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040d4:	f7ff fff2 	bl	80040bc <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	@ (80040f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40021000 	.word	0x40021000
 80040f4:	08008ab8 	.word	0x08008ab8

080040f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004100:	4b0a      	ldr	r3, [pc, #40]	@ (800412c <RCC_Delay+0x34>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a0a      	ldr	r2, [pc, #40]	@ (8004130 <RCC_Delay+0x38>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	0a5b      	lsrs	r3, r3, #9
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004114:	bf00      	nop
  }
  while (Delay --);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1e5a      	subs	r2, r3, #1
 800411a:	60fa      	str	r2, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f9      	bne.n	8004114 <RCC_Delay+0x1c>
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	20000000 	.word	0x20000000
 8004130:	10624dd3 	.word	0x10624dd3

08004134 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d07d      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004150:	2300      	movs	r3, #0
 8004152:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004154:	4b4f      	ldr	r3, [pc, #316]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10d      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004160:	4b4c      	ldr	r3, [pc, #304]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	4a4b      	ldr	r2, [pc, #300]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416a:	61d3      	str	r3, [r2, #28]
 800416c:	4b49      	ldr	r3, [pc, #292]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004178:	2301      	movs	r3, #1
 800417a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417c:	4b46      	ldr	r3, [pc, #280]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d118      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004188:	4b43      	ldr	r3, [pc, #268]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a42      	ldr	r2, [pc, #264]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800418e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004192:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004194:	f7fc fafe 	bl	8000794 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800419a:	e008      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800419c:	f7fc fafa 	bl	8000794 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	@ 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e06d      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ae:	4b3a      	ldr	r3, [pc, #232]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ba:	4b36      	ldr	r3, [pc, #216]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d02e      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d027      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041e2:	4b2e      	ldr	r3, [pc, #184]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041e8:	4b2c      	ldr	r3, [pc, #176]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041ee:	4a29      	ldr	r2, [pc, #164]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d014      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fe:	f7fc fac9 	bl	8000794 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004204:	e00a      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7fc fac5 	bl	8000794 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004214:	4293      	cmp	r3, r2
 8004216:	d901      	bls.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e036      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421c:	4b1d      	ldr	r3, [pc, #116]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0ee      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004228:	4b1a      	ldr	r3, [pc, #104]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4917      	ldr	r1, [pc, #92]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004236:	4313      	orrs	r3, r2
 8004238:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800423a:	7dfb      	ldrb	r3, [r7, #23]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d105      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004240:	4b14      	ldr	r3, [pc, #80]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	4a13      	ldr	r2, [pc, #76]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800424a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004258:	4b0e      	ldr	r3, [pc, #56]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	490b      	ldr	r1, [pc, #44]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004276:	4b07      	ldr	r3, [pc, #28]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	4904      	ldr	r1, [pc, #16]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004284:	4313      	orrs	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	40007000 	.word	0x40007000
 800429c:	42420440 	.word	0x42420440

080042a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	4638      	mov	r0, r7
 80042aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042ca:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80042ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr

080042e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042ee:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80042f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	b29b      	uxth	r3, r3
 8004304:	4013      	ands	r3, r2
 8004306:	b29a      	uxth	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	bc80      	pop	{r7}
 8004318:	4770      	bx	lr

0800431a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr

08004332 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	4638      	mov	r0, r7
 800433c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800436c:	b480      	push	{r7}
 800436e:	b09d      	sub	sp, #116	@ 0x74
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800438e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004392:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	78db      	ldrb	r3, [r3, #3]
 800439a:	2b03      	cmp	r3, #3
 800439c:	d81f      	bhi.n	80043de <USB_ActivateEndpoint+0x72>
 800439e:	a201      	add	r2, pc, #4	@ (adr r2, 80043a4 <USB_ActivateEndpoint+0x38>)
 80043a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a4:	080043b5 	.word	0x080043b5
 80043a8:	080043d1 	.word	0x080043d1
 80043ac:	080043e7 	.word	0x080043e7
 80043b0:	080043c3 	.word	0x080043c3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80043b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80043c0:	e012      	b.n	80043e8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80043c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043c6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80043ca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80043ce:	e00b      	b.n	80043e8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80043dc:	e004      	b.n	80043e8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80043e4:	e000      	b.n	80043e8 <USB_ActivateEndpoint+0x7c>
      break;
 80043e6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	441a      	add	r2, r3
 80043f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80043f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004406:	b29b      	uxth	r3, r3
 8004408:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800441c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004420:	b29b      	uxth	r3, r3
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	7812      	ldrb	r2, [r2, #0]
 8004426:	4313      	orrs	r3, r2
 8004428:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800443a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800443e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800444a:	b29b      	uxth	r3, r3
 800444c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	7b1b      	ldrb	r3, [r3, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f040 8178 	bne.w	8004748 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	785b      	ldrb	r3, [r3, #1]
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8084 	beq.w	800456a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800446c:	b29b      	uxth	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	4413      	add	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	011a      	lsls	r2, r3, #4
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	88db      	ldrh	r3, [r3, #6]
 800448a:	085b      	lsrs	r3, r3, #1
 800448c:	b29b      	uxth	r3, r3
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	827b      	strh	r3, [r7, #18]
 80044a4:	8a7b      	ldrh	r3, [r7, #18]
 80044a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01b      	beq.n	80044e6 <USB_ActivateEndpoint+0x17a>
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c4:	823b      	strh	r3, [r7, #16]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	441a      	add	r2, r3
 80044d0:	8a3b      	ldrh	r3, [r7, #16]
 80044d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	78db      	ldrb	r3, [r3, #3]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d020      	beq.n	8004530 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004500:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004504:	81bb      	strh	r3, [r7, #12]
 8004506:	89bb      	ldrh	r3, [r7, #12]
 8004508:	f083 0320 	eor.w	r3, r3, #32
 800450c:	81bb      	strh	r3, [r7, #12]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	441a      	add	r2, r3
 8004518:	89bb      	ldrh	r3, [r7, #12]
 800451a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800451e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800452a:	b29b      	uxth	r3, r3
 800452c:	8013      	strh	r3, [r2, #0]
 800452e:	e2d5      	b.n	8004adc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004542:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004546:	81fb      	strh	r3, [r7, #14]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	441a      	add	r2, r3
 8004552:	89fb      	ldrh	r3, [r7, #14]
 8004554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800455c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004564:	b29b      	uxth	r3, r3
 8004566:	8013      	strh	r3, [r2, #0]
 8004568:	e2b8      	b.n	8004adc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	633b      	str	r3, [r7, #48]	@ 0x30
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004574:	b29b      	uxth	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457a:	4413      	add	r3, r2
 800457c:	633b      	str	r3, [r7, #48]	@ 0x30
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	011a      	lsls	r2, r3, #4
 8004584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004586:	4413      	add	r3, r2
 8004588:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	88db      	ldrh	r3, [r3, #6]
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	b29b      	uxth	r3, r3
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	4413      	add	r3, r2
 80045b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	011a      	lsls	r2, r3, #4
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	4413      	add	r3, r2
 80045bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	801a      	strh	r2, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80045d8:	d91d      	bls.n	8004616 <USB_ActivateEndpoint+0x2aa>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <USB_ActivateEndpoint+0x288>
 80045ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045f0:	3b01      	subs	r3, #1
 80045f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	029b      	lsls	r3, r3, #10
 8004600:	b29b      	uxth	r3, r3
 8004602:	4313      	orrs	r3, r2
 8004604:	b29b      	uxth	r3, r3
 8004606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800460a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800460e:	b29a      	uxth	r2, r3
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	801a      	strh	r2, [r3, #0]
 8004614:	e026      	b.n	8004664 <USB_ActivateEndpoint+0x2f8>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10a      	bne.n	8004634 <USB_ActivateEndpoint+0x2c8>
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800462c:	b29a      	uxth	r2, r3
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	801a      	strh	r2, [r3, #0]
 8004632:	e017      	b.n	8004664 <USB_ActivateEndpoint+0x2f8>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <USB_ActivateEndpoint+0x2e2>
 8004648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800464a:	3301      	adds	r3, #1
 800464c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29a      	uxth	r2, r3
 8004654:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004656:	b29b      	uxth	r3, r3
 8004658:	029b      	lsls	r3, r3, #10
 800465a:	b29b      	uxth	r3, r3
 800465c:	4313      	orrs	r3, r2
 800465e:	b29a      	uxth	r2, r3
 8004660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004662:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004672:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01b      	beq.n	80046b4 <USB_ActivateEndpoint+0x348>
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b29b      	uxth	r3, r3
 800468a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800468e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004692:	843b      	strh	r3, [r7, #32]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	8c3b      	ldrh	r3, [r7, #32]
 80046a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d124      	bne.n	8004706 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046d2:	83bb      	strh	r3, [r7, #28]
 80046d4:	8bbb      	ldrh	r3, [r7, #28]
 80046d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80046da:	83bb      	strh	r3, [r7, #28]
 80046dc:	8bbb      	ldrh	r3, [r7, #28]
 80046de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046e2:	83bb      	strh	r3, [r7, #28]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	441a      	add	r2, r3
 80046ee:	8bbb      	ldrh	r3, [r7, #28]
 80046f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004700:	b29b      	uxth	r3, r3
 8004702:	8013      	strh	r3, [r2, #0]
 8004704:	e1ea      	b.n	8004adc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471c:	83fb      	strh	r3, [r7, #30]
 800471e:	8bfb      	ldrh	r3, [r7, #30]
 8004720:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004724:	83fb      	strh	r3, [r7, #30]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	441a      	add	r2, r3
 8004730:	8bfb      	ldrh	r3, [r7, #30]
 8004732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800473a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800473e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004742:	b29b      	uxth	r3, r3
 8004744:	8013      	strh	r3, [r2, #0]
 8004746:	e1c9      	b.n	8004adc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	78db      	ldrb	r3, [r3, #3]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d11e      	bne.n	800478e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004766:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	441a      	add	r2, r3
 8004774:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800477c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004780:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]
 800478c:	e01d      	b.n	80047ca <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80047a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80047b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	461a      	mov	r2, r3
 80047d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047da:	4413      	add	r3, r2
 80047dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	011a      	lsls	r2, r3, #4
 80047e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80047ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	891b      	ldrh	r3, [r3, #8]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047fc:	801a      	strh	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	657b      	str	r3, [r7, #84]	@ 0x54
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004808:	b29b      	uxth	r3, r3
 800480a:	461a      	mov	r2, r3
 800480c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800480e:	4413      	add	r3, r2
 8004810:	657b      	str	r3, [r7, #84]	@ 0x54
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	011a      	lsls	r2, r3, #4
 8004818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800481a:	4413      	add	r3, r2
 800481c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004820:	653b      	str	r3, [r7, #80]	@ 0x50
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	895b      	ldrh	r3, [r3, #10]
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	b29b      	uxth	r3, r3
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004830:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	785b      	ldrb	r3, [r3, #1]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f040 8093 	bne.w	8004962 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800484c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01b      	beq.n	8004890 <USB_ActivateEndpoint+0x524>
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800486a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800487c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004880:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004884:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800488c:	b29b      	uxth	r3, r3
 800488e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800489e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80048a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01b      	beq.n	80048e0 <USB_ActivateEndpoint+0x574>
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048be:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	441a      	add	r2, r3
 80048ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80048cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048dc:	b29b      	uxth	r3, r3
 80048de:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048f6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80048f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80048fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80048fe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004900:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004902:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004906:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	441a      	add	r2, r3
 8004912:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800491c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004924:	b29b      	uxth	r3, r3
 8004926:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800493a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800493e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	441a      	add	r2, r3
 800494a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800494c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004950:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004958:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800495c:	b29b      	uxth	r3, r3
 800495e:	8013      	strh	r3, [r2, #0]
 8004960:	e0bc      	b.n	8004adc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004972:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d01d      	beq.n	80049ba <USB_ActivateEndpoint+0x64e>
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004994:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	441a      	add	r2, r3
 80049a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80049a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80049ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80049ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01d      	beq.n	8004a12 <USB_ActivateEndpoint+0x6a6>
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ec:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	441a      	add	r2, r3
 80049fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80049fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	78db      	ldrb	r3, [r3, #3]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d024      	beq.n	8004a64 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a30:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004a34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004a38:	f083 0320 	eor.w	r3, r3, #32
 8004a3c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	441a      	add	r2, r3
 8004a4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	8013      	strh	r3, [r2, #0]
 8004a62:	e01d      	b.n	8004aa0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a7a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	441a      	add	r2, r3
 8004a88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	441a      	add	r2, r3
 8004ac4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004adc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3774      	adds	r7, #116	@ 0x74
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop

08004aec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b08d      	sub	sp, #52	@ 0x34
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	7b1b      	ldrb	r3, [r3, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 808e 	bne.w	8004c1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d044      	beq.n	8004b92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	81bb      	strh	r3, [r7, #12]
 8004b16:	89bb      	ldrh	r3, [r7, #12]
 8004b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <USB_DeactivateEndpoint+0x6c>
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b36:	817b      	strh	r3, [r7, #10]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	897b      	ldrh	r3, [r7, #10]
 8004b44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b6e:	813b      	strh	r3, [r7, #8]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	893b      	ldrh	r3, [r7, #8]
 8004b7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]
 8004b90:	e192      	b.n	8004eb8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	827b      	strh	r3, [r7, #18]
 8004ba0:	8a7b      	ldrh	r3, [r7, #18]
 8004ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d01b      	beq.n	8004be2 <USB_DeactivateEndpoint+0xf6>
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc0:	823b      	strh	r3, [r7, #16]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	8a3b      	ldrh	r3, [r7, #16]
 8004bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf8:	81fb      	strh	r3, [r7, #14]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	441a      	add	r2, r3
 8004c04:	89fb      	ldrh	r3, [r7, #14]
 8004c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	8013      	strh	r3, [r2, #0]
 8004c1a:	e14d      	b.n	8004eb8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	785b      	ldrb	r3, [r3, #1]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f040 80a5 	bne.w	8004d70 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	843b      	strh	r3, [r7, #32]
 8004c34:	8c3b      	ldrh	r3, [r7, #32]
 8004c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d01b      	beq.n	8004c76 <USB_DeactivateEndpoint+0x18a>
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c54:	83fb      	strh	r3, [r7, #30]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	441a      	add	r2, r3
 8004c60:	8bfb      	ldrh	r3, [r7, #30]
 8004c62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	83bb      	strh	r3, [r7, #28]
 8004c84:	8bbb      	ldrh	r3, [r7, #28]
 8004c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d01b      	beq.n	8004cc6 <USB_DeactivateEndpoint+0x1da>
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca4:	837b      	strh	r3, [r7, #26]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	441a      	add	r2, r3
 8004cb0:	8b7b      	ldrh	r3, [r7, #26]
 8004cb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cdc:	833b      	strh	r3, [r7, #24]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	441a      	add	r2, r3
 8004ce8:	8b3b      	ldrh	r3, [r7, #24]
 8004cea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cf6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d14:	82fb      	strh	r3, [r7, #22]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	441a      	add	r2, r3
 8004d20:	8afb      	ldrh	r3, [r7, #22]
 8004d22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d4c:	82bb      	strh	r3, [r7, #20]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	441a      	add	r2, r3
 8004d58:	8abb      	ldrh	r3, [r7, #20]
 8004d5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	8013      	strh	r3, [r2, #0]
 8004d6e:	e0a3      	b.n	8004eb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004d7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01b      	beq.n	8004dc0 <USB_DeactivateEndpoint+0x2d4>
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d9e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004dac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004db0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004db4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004db8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004dce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01b      	beq.n	8004e10 <USB_DeactivateEndpoint+0x324>
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dee:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	441a      	add	r2, r3
 8004dfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004dfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e08:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e26:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004e34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	441a      	add	r2, r3
 8004e6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e96:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	441a      	add	r2, r3
 8004ea2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ea4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3734      	adds	r7, #52	@ 0x34
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b0c2      	sub	sp, #264	@ 0x108
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ed2:	6018      	str	r0, [r3, #0]
 8004ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004edc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	785b      	ldrb	r3, [r3, #1]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	f040 86b7 	bne.w	8005c5e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699a      	ldr	r2, [r3, #24]
 8004efc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d908      	bls.n	8004f1e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004f1c:	e007      	b.n	8004f2e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	7b1b      	ldrb	r3, [r3, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d13a      	bne.n	8004fb4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6959      	ldr	r1, [r3, #20]
 8004f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	88da      	ldrh	r2, [r3, #6]
 8004f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f64:	6800      	ldr	r0, [r0, #0]
 8004f66:	f001 fc9c 	bl	80068a2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	011a      	lsls	r2, r3, #4
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	f000 be1f 	b.w	8005bf2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	78db      	ldrb	r3, [r3, #3]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	f040 8462 	bne.w	800588a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6a1a      	ldr	r2, [r3, #32]
 8004fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	f240 83df 	bls.w	80057a2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800500e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800501c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800502c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005034:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800503c:	b29b      	uxth	r3, r3
 800503e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6a1a      	ldr	r2, [r3, #32]
 800504c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005050:	1ad2      	subs	r2, r2, r3
 8005052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800505e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005062:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800506c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	b29b      	uxth	r3, r3
 800507c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 81c7 	beq.w	8005414 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800508a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	633b      	str	r3, [r7, #48]	@ 0x30
 8005092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	785b      	ldrb	r3, [r3, #1]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d177      	bne.n	8005192 <USB_EPStartXfer+0x2ce>
 80050a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050bc:	b29b      	uxth	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c2:	4413      	add	r3, r2
 80050c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	011a      	lsls	r2, r3, #4
 80050d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d6:	4413      	add	r3, r2
 80050d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80050dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	801a      	strh	r2, [r3, #0]
 80050ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80050f4:	d921      	bls.n	800513a <USB_EPStartXfer+0x276>
 80050f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	2b00      	cmp	r3, #0
 800510a:	d104      	bne.n	8005116 <USB_EPStartXfer+0x252>
 800510c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005110:	3b01      	subs	r3, #1
 8005112:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29a      	uxth	r2, r3
 800511c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005120:	b29b      	uxth	r3, r3
 8005122:	029b      	lsls	r3, r3, #10
 8005124:	b29b      	uxth	r3, r3
 8005126:	4313      	orrs	r3, r2
 8005128:	b29b      	uxth	r3, r3
 800512a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005132:	b29a      	uxth	r2, r3
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	801a      	strh	r2, [r3, #0]
 8005138:	e050      	b.n	80051dc <USB_EPStartXfer+0x318>
 800513a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <USB_EPStartXfer+0x294>
 8005142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800514c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005150:	b29a      	uxth	r2, r3
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	801a      	strh	r2, [r3, #0]
 8005156:	e041      	b.n	80051dc <USB_EPStartXfer+0x318>
 8005158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800515c:	085b      	lsrs	r3, r3, #1
 800515e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d004      	beq.n	8005178 <USB_EPStartXfer+0x2b4>
 800516e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005172:	3301      	adds	r3, #1
 8005174:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b29a      	uxth	r2, r3
 800517e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005182:	b29b      	uxth	r3, r3
 8005184:	029b      	lsls	r3, r3, #10
 8005186:	b29b      	uxth	r3, r3
 8005188:	4313      	orrs	r3, r2
 800518a:	b29a      	uxth	r2, r3
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	801a      	strh	r2, [r3, #0]
 8005190:	e024      	b.n	80051dc <USB_EPStartXfer+0x318>
 8005192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	785b      	ldrb	r3, [r3, #1]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d11c      	bne.n	80051dc <USB_EPStartXfer+0x318>
 80051a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b6:	4413      	add	r3, r2
 80051b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	011a      	lsls	r2, r3, #4
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	4413      	add	r3, r2
 80051cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80051d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	895b      	ldrh	r3, [r3, #10]
 80051e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6959      	ldr	r1, [r3, #20]
 80051f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005202:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005206:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	f001 fb49 	bl	80068a2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	695a      	ldr	r2, [r3, #20]
 800521c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005220:	441a      	add	r2, r3
 8005222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800522e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6a1a      	ldr	r2, [r3, #32]
 800523a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	429a      	cmp	r2, r3
 8005248:	d90f      	bls.n	800526a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800524a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6a1a      	ldr	r2, [r3, #32]
 8005256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800525a:	1ad2      	subs	r2, r2, r3
 800525c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	621a      	str	r2, [r3, #32]
 8005268:	e00e      	b.n	8005288 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800526a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800526e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800527a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800527e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2200      	movs	r2, #0
 8005286:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d177      	bne.n	8005388 <USB_EPStartXfer+0x4c4>
 8005298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	61bb      	str	r3, [r7, #24]
 80052a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	461a      	mov	r2, r3
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	4413      	add	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	011a      	lsls	r2, r3, #4
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	4413      	add	r3, r2
 80052ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052de:	b29a      	uxth	r2, r3
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	801a      	strh	r2, [r3, #0]
 80052e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80052ea:	d921      	bls.n	8005330 <USB_EPStartXfer+0x46c>
 80052ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <USB_EPStartXfer+0x448>
 8005302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005306:	3b01      	subs	r3, #1
 8005308:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	b29a      	uxth	r2, r3
 8005312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005316:	b29b      	uxth	r3, r3
 8005318:	029b      	lsls	r3, r3, #10
 800531a:	b29b      	uxth	r3, r3
 800531c:	4313      	orrs	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005328:	b29a      	uxth	r2, r3
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	801a      	strh	r2, [r3, #0]
 800532e:	e056      	b.n	80053de <USB_EPStartXfer+0x51a>
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <USB_EPStartXfer+0x48a>
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005346:	b29a      	uxth	r2, r3
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	801a      	strh	r2, [r3, #0]
 800534c:	e047      	b.n	80053de <USB_EPStartXfer+0x51a>
 800534e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d004      	beq.n	800536e <USB_EPStartXfer+0x4aa>
 8005364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005368:	3301      	adds	r3, #1
 800536a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29a      	uxth	r2, r3
 8005374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005378:	b29b      	uxth	r3, r3
 800537a:	029b      	lsls	r3, r3, #10
 800537c:	b29b      	uxth	r3, r3
 800537e:	4313      	orrs	r3, r2
 8005380:	b29a      	uxth	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	e02a      	b.n	80053de <USB_EPStartXfer+0x51a>
 8005388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	785b      	ldrb	r3, [r3, #1]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d122      	bne.n	80053de <USB_EPStartXfer+0x51a>
 8005398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	623b      	str	r3, [r7, #32]
 80053a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	4413      	add	r3, r2
 80053ba:	623b      	str	r3, [r7, #32]
 80053bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	011a      	lsls	r2, r3, #4
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	4413      	add	r3, r2
 80053ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053d2:	61fb      	str	r3, [r7, #28]
 80053d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d8:	b29a      	uxth	r2, r3
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	891b      	ldrh	r3, [r3, #8]
 80053ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6959      	ldr	r1, [r3, #20]
 80053fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005404:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005408:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800540c:	6800      	ldr	r0, [r0, #0]
 800540e:	f001 fa48 	bl	80068a2 <USB_WritePMA>
 8005412:	e3ee      	b.n	8005bf2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d177      	bne.n	8005514 <USB_EPStartXfer+0x650>
 8005424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005428:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005434:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800543e:	b29b      	uxth	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005444:	4413      	add	r3, r2
 8005446:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800544c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	011a      	lsls	r2, r3, #4
 8005456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005458:	4413      	add	r3, r2
 800545a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800545e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800546a:	b29a      	uxth	r2, r3
 800546c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800546e:	801a      	strh	r2, [r3, #0]
 8005470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005474:	2b3e      	cmp	r3, #62	@ 0x3e
 8005476:	d921      	bls.n	80054bc <USB_EPStartXfer+0x5f8>
 8005478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	2b00      	cmp	r3, #0
 800548c:	d104      	bne.n	8005498 <USB_EPStartXfer+0x5d4>
 800548e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005492:	3b01      	subs	r3, #1
 8005494:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29a      	uxth	r2, r3
 800549e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	4313      	orrs	r3, r2
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054b8:	801a      	strh	r2, [r3, #0]
 80054ba:	e056      	b.n	800556a <USB_EPStartXfer+0x6a6>
 80054bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <USB_EPStartXfer+0x616>
 80054c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054d6:	801a      	strh	r2, [r3, #0]
 80054d8:	e047      	b.n	800556a <USB_EPStartXfer+0x6a6>
 80054da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054de:	085b      	lsrs	r3, r3, #1
 80054e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <USB_EPStartXfer+0x636>
 80054f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054f4:	3301      	adds	r3, #1
 80054f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80054fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29a      	uxth	r2, r3
 8005500:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005504:	b29b      	uxth	r3, r3
 8005506:	029b      	lsls	r3, r3, #10
 8005508:	b29b      	uxth	r3, r3
 800550a:	4313      	orrs	r3, r2
 800550c:	b29a      	uxth	r2, r3
 800550e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005510:	801a      	strh	r2, [r3, #0]
 8005512:	e02a      	b.n	800556a <USB_EPStartXfer+0x6a6>
 8005514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	785b      	ldrb	r3, [r3, #1]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d122      	bne.n	800556a <USB_EPStartXfer+0x6a6>
 8005524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005528:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800553e:	b29b      	uxth	r3, r3
 8005540:	461a      	mov	r2, r3
 8005542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005544:	4413      	add	r3, r2
 8005546:	653b      	str	r3, [r7, #80]	@ 0x50
 8005548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	011a      	lsls	r2, r3, #4
 8005556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005558:	4413      	add	r3, r2
 800555a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800555e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005564:	b29a      	uxth	r2, r3
 8005566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005568:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800556a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	891b      	ldrh	r3, [r3, #8]
 8005576:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800557a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6959      	ldr	r1, [r3, #20]
 8005586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558a:	b29b      	uxth	r3, r3
 800558c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005590:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005594:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005598:	6800      	ldr	r0, [r0, #0]
 800559a:	f001 f982 	bl	80068a2 <USB_WritePMA>
            ep->xfer_buff += len;
 800559e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695a      	ldr	r2, [r3, #20]
 80055aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ae:	441a      	add	r2, r3
 80055b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6a1a      	ldr	r2, [r3, #32]
 80055c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d90f      	bls.n	80055f8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80055d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6a1a      	ldr	r2, [r3, #32]
 80055e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e8:	1ad2      	subs	r2, r2, r3
 80055ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	621a      	str	r2, [r3, #32]
 80055f6:	e00e      	b.n	8005616 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80055f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2200      	movs	r2, #0
 8005614:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800561a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	643b      	str	r3, [r7, #64]	@ 0x40
 8005622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	785b      	ldrb	r3, [r3, #1]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d177      	bne.n	8005722 <USB_EPStartXfer+0x85e>
 8005632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800563e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800564c:	b29b      	uxth	r3, r3
 800564e:	461a      	mov	r2, r3
 8005650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005652:	4413      	add	r3, r2
 8005654:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	011a      	lsls	r2, r3, #4
 8005664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005666:	4413      	add	r3, r2
 8005668:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800566c:	637b      	str	r3, [r7, #52]	@ 0x34
 800566e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005678:	b29a      	uxth	r2, r3
 800567a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567c:	801a      	strh	r2, [r3, #0]
 800567e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005682:	2b3e      	cmp	r3, #62	@ 0x3e
 8005684:	d921      	bls.n	80056ca <USB_EPStartXfer+0x806>
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	2b00      	cmp	r3, #0
 800569a:	d104      	bne.n	80056a6 <USB_EPStartXfer+0x7e2>
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a0:	3b01      	subs	r3, #1
 80056a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	029b      	lsls	r3, r3, #10
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	4313      	orrs	r3, r2
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e050      	b.n	800576c <USB_EPStartXfer+0x8a8>
 80056ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <USB_EPStartXfer+0x824>
 80056d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	e041      	b.n	800576c <USB_EPStartXfer+0x8a8>
 80056e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80056f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <USB_EPStartXfer+0x844>
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005702:	3301      	adds	r3, #1
 8005704:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29a      	uxth	r2, r3
 800570e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005712:	b29b      	uxth	r3, r3
 8005714:	029b      	lsls	r3, r3, #10
 8005716:	b29b      	uxth	r3, r3
 8005718:	4313      	orrs	r3, r2
 800571a:	b29a      	uxth	r2, r3
 800571c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	e024      	b.n	800576c <USB_EPStartXfer+0x8a8>
 8005722:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005726:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	785b      	ldrb	r3, [r3, #1]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d11c      	bne.n	800576c <USB_EPStartXfer+0x8a8>
 8005732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005736:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005740:	b29b      	uxth	r3, r3
 8005742:	461a      	mov	r2, r3
 8005744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005746:	4413      	add	r3, r2
 8005748:	643b      	str	r3, [r7, #64]	@ 0x40
 800574a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800574e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	011a      	lsls	r2, r3, #4
 8005758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800575a:	4413      	add	r3, r2
 800575c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005766:	b29a      	uxth	r2, r3
 8005768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800576c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	895b      	ldrh	r3, [r3, #10]
 8005778:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800577c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6959      	ldr	r1, [r3, #20]
 8005788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800578c:	b29b      	uxth	r3, r3
 800578e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005792:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005796:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800579a:	6800      	ldr	r0, [r0, #0]
 800579c:	f001 f881 	bl	80068a2 <USB_WritePMA>
 80057a0:	e227      	b.n	8005bf2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80057a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80057b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80057d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80057dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	441a      	add	r2, r3
 80057f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80057fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800580a:	b29b      	uxth	r3, r3
 800580c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800580e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005812:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800581a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800581e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005828:	b29b      	uxth	r3, r3
 800582a:	461a      	mov	r2, r3
 800582c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800582e:	4413      	add	r3, r2
 8005830:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	011a      	lsls	r2, r3, #4
 8005840:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005842:	4413      	add	r3, r2
 8005844:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005848:	65bb      	str	r3, [r7, #88]	@ 0x58
 800584a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584e:	b29a      	uxth	r2, r3
 8005850:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005852:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	891b      	ldrh	r3, [r3, #8]
 8005860:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6959      	ldr	r1, [r3, #20]
 8005870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005874:	b29b      	uxth	r3, r3
 8005876:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800587a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800587e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005882:	6800      	ldr	r0, [r0, #0]
 8005884:	f001 f80d 	bl	80068a2 <USB_WritePMA>
 8005888:	e1b3      	b.n	8005bf2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800588a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6a1a      	ldr	r2, [r3, #32]
 8005896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589a:	1ad2      	subs	r2, r2, r3
 800589c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80058a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80c6 	beq.w	8005a5c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	673b      	str	r3, [r7, #112]	@ 0x70
 80058dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d177      	bne.n	80059dc <USB_EPStartXfer+0xb18>
 80058ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005906:	b29b      	uxth	r3, r3
 8005908:	461a      	mov	r2, r3
 800590a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800590c:	4413      	add	r3, r2
 800590e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	011a      	lsls	r2, r3, #4
 800591e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005920:	4413      	add	r3, r2
 8005922:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005926:	667b      	str	r3, [r7, #100]	@ 0x64
 8005928:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005932:	b29a      	uxth	r2, r3
 8005934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800593c:	2b3e      	cmp	r3, #62	@ 0x3e
 800593e:	d921      	bls.n	8005984 <USB_EPStartXfer+0xac0>
 8005940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800594a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	2b00      	cmp	r3, #0
 8005954:	d104      	bne.n	8005960 <USB_EPStartXfer+0xa9c>
 8005956:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800595a:	3b01      	subs	r3, #1
 800595c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b29a      	uxth	r2, r3
 8005966:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800596a:	b29b      	uxth	r3, r3
 800596c:	029b      	lsls	r3, r3, #10
 800596e:	b29b      	uxth	r3, r3
 8005970:	4313      	orrs	r3, r2
 8005972:	b29b      	uxth	r3, r3
 8005974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597c:	b29a      	uxth	r2, r3
 800597e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	e050      	b.n	8005a26 <USB_EPStartXfer+0xb62>
 8005984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <USB_EPStartXfer+0xade>
 800598c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599a:	b29a      	uxth	r2, r3
 800599c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800599e:	801a      	strh	r2, [r3, #0]
 80059a0:	e041      	b.n	8005a26 <USB_EPStartXfer+0xb62>
 80059a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a6:	085b      	lsrs	r3, r3, #1
 80059a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80059ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d004      	beq.n	80059c2 <USB_EPStartXfer+0xafe>
 80059b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80059bc:	3301      	adds	r3, #1
 80059be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80059c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	029b      	lsls	r3, r3, #10
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	4313      	orrs	r3, r2
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059d8:	801a      	strh	r2, [r3, #0]
 80059da:	e024      	b.n	8005a26 <USB_EPStartXfer+0xb62>
 80059dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d11c      	bne.n	8005a26 <USB_EPStartXfer+0xb62>
 80059ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a00:	4413      	add	r3, r2
 8005a02:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	011a      	lsls	r2, r3, #4
 8005a12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a14:	4413      	add	r3, r2
 8005a16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	895b      	ldrh	r3, [r3, #10]
 8005a32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6959      	ldr	r1, [r3, #20]
 8005a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a54:	6800      	ldr	r0, [r0, #0]
 8005a56:	f000 ff24 	bl	80068a2 <USB_WritePMA>
 8005a5a:	e0ca      	b.n	8005bf2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d177      	bne.n	8005b5c <USB_EPStartXfer+0xc98>
 8005a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a8c:	4413      	add	r3, r2
 8005a8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	011a      	lsls	r2, r3, #4
 8005a9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005aa6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ab6:	801a      	strh	r2, [r3, #0]
 8005ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005abc:	2b3e      	cmp	r3, #62	@ 0x3e
 8005abe:	d921      	bls.n	8005b04 <USB_EPStartXfer+0xc40>
 8005ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac4:	095b      	lsrs	r3, r3, #5
 8005ac6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d104      	bne.n	8005ae0 <USB_EPStartXfer+0xc1c>
 8005ad6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005ada:	3b01      	subs	r3, #1
 8005adc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ae0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	029b      	lsls	r3, r3, #10
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	4313      	orrs	r3, r2
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b00:	801a      	strh	r2, [r3, #0]
 8005b02:	e05c      	b.n	8005bbe <USB_EPStartXfer+0xcfa>
 8005b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <USB_EPStartXfer+0xc5e>
 8005b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b1e:	801a      	strh	r2, [r3, #0]
 8005b20:	e04d      	b.n	8005bbe <USB_EPStartXfer+0xcfa>
 8005b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <USB_EPStartXfer+0xc7e>
 8005b38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	029b      	lsls	r3, r3, #10
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	4313      	orrs	r3, r2
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b58:	801a      	strh	r2, [r3, #0]
 8005b5a:	e030      	b.n	8005bbe <USB_EPStartXfer+0xcfa>
 8005b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d128      	bne.n	8005bbe <USB_EPStartXfer+0xcfa>
 8005b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b90:	4413      	add	r3, r2
 8005b92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	011a      	lsls	r2, r3, #4
 8005ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ba8:	4413      	add	r3, r2
 8005baa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005bae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bbc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	891b      	ldrh	r3, [r3, #8]
 8005bca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6959      	ldr	r1, [r3, #20]
 8005bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005be4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005be8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005bec:	6800      	ldr	r0, [r0, #0]
 8005bee:	f000 fe58 	bl	80068a2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c18:	817b      	strh	r3, [r7, #10]
 8005c1a:	897b      	ldrh	r3, [r7, #10]
 8005c1c:	f083 0310 	eor.w	r3, r3, #16
 8005c20:	817b      	strh	r3, [r7, #10]
 8005c22:	897b      	ldrh	r3, [r7, #10]
 8005c24:	f083 0320 	eor.w	r3, r3, #32
 8005c28:	817b      	strh	r3, [r7, #10]
 8005c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	441a      	add	r2, r3
 8005c44:	897b      	ldrh	r3, [r7, #10]
 8005c46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	8013      	strh	r3, [r2, #0]
 8005c5a:	f000 bcde 	b.w	800661a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005c5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	7b1b      	ldrb	r3, [r3, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f040 80bb 	bne.w	8005de6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699a      	ldr	r2, [r3, #24]
 8005c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d917      	bls.n	8005cbc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005c8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699a      	ldr	r2, [r3, #24]
 8005ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cac:	1ad2      	subs	r2, r2, r3
 8005cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	619a      	str	r2, [r3, #24]
 8005cba:	e00e      	b.n	8005cda <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005cfe:	4413      	add	r3, r2
 8005d00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	011a      	lsls	r2, r3, #4
 8005d12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d16:	4413      	add	r3, r2
 8005d18:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d38:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d3a:	d924      	bls.n	8005d86 <USB_EPStartXfer+0xec2>
 8005d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d104      	bne.n	8005d5c <USB_EPStartXfer+0xe98>
 8005d52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d56:	3b01      	subs	r3, #1
 8005d58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	029b      	lsls	r3, r3, #10
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d80:	801a      	strh	r2, [r3, #0]
 8005d82:	f000 bc10 	b.w	80065a6 <USB_EPStartXfer+0x16e2>
 8005d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10c      	bne.n	8005da8 <USB_EPStartXfer+0xee4>
 8005d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005da4:	801a      	strh	r2, [r3, #0]
 8005da6:	e3fe      	b.n	80065a6 <USB_EPStartXfer+0x16e2>
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d004      	beq.n	8005dc8 <USB_EPStartXfer+0xf04>
 8005dbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	029b      	lsls	r3, r3, #10
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	e3df      	b.n	80065a6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	78db      	ldrb	r3, [r3, #3]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	f040 8218 	bne.w	8006228 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f040 809d 	bne.w	8005f44 <USB_EPStartXfer+0x1080>
 8005e0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e2e:	4413      	add	r3, r2
 8005e30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	011a      	lsls	r2, r3, #4
 8005e42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e46:	4413      	add	r3, r2
 8005e48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e62:	801a      	strh	r2, [r3, #0]
 8005e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e72:	d92b      	bls.n	8005ecc <USB_EPStartXfer+0x1008>
 8005e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <USB_EPStartXfer+0xfe0>
 8005e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ea4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	029b      	lsls	r3, r3, #10
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	e070      	b.n	8005fae <USB_EPStartXfer+0x10ea>
 8005ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10c      	bne.n	8005ef6 <USB_EPStartXfer+0x1032>
 8005edc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	e05b      	b.n	8005fae <USB_EPStartXfer+0x10ea>
 8005ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	085b      	lsrs	r3, r3, #1
 8005f04:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <USB_EPStartXfer+0x1062>
 8005f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f20:	3301      	adds	r3, #1
 8005f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	029b      	lsls	r3, r3, #10
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005f40:	801a      	strh	r2, [r3, #0]
 8005f42:	e034      	b.n	8005fae <USB_EPStartXfer+0x10ea>
 8005f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d12c      	bne.n	8005fae <USB_EPStartXfer+0x10ea>
 8005f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	461a      	mov	r2, r3
 8005f74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f78:	4413      	add	r3, r2
 8005f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	011a      	lsls	r2, r3, #4
 8005f8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005f90:	4413      	add	r3, r2
 8005f92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005fac:	801a      	strh	r2, [r3, #0]
 8005fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	785b      	ldrb	r3, [r3, #1]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f040 809d 	bne.w	8006108 <USB_EPStartXfer+0x1244>
 8005fce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	011a      	lsls	r2, r3, #4
 8006006:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800600a:	4413      	add	r3, r2
 800600c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006014:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006020:	b29a      	uxth	r2, r3
 8006022:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006026:	801a      	strh	r2, [r3, #0]
 8006028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800602c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b3e      	cmp	r3, #62	@ 0x3e
 8006036:	d92b      	bls.n	8006090 <USB_EPStartXfer+0x11cc>
 8006038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800604a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800604e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <USB_EPStartXfer+0x11a4>
 800605e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006062:	3b01      	subs	r3, #1
 8006064:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006068:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	b29a      	uxth	r2, r3
 8006070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006074:	b29b      	uxth	r3, r3
 8006076:	029b      	lsls	r3, r3, #10
 8006078:	b29b      	uxth	r3, r3
 800607a:	4313      	orrs	r3, r2
 800607c:	b29b      	uxth	r3, r3
 800607e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006086:	b29a      	uxth	r2, r3
 8006088:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800608c:	801a      	strh	r2, [r3, #0]
 800608e:	e069      	b.n	8006164 <USB_EPStartXfer+0x12a0>
 8006090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10c      	bne.n	80060ba <USB_EPStartXfer+0x11f6>
 80060a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060b6:	801a      	strh	r2, [r3, #0]
 80060b8:	e054      	b.n	8006164 <USB_EPStartXfer+0x12a0>
 80060ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	085b      	lsrs	r3, r3, #1
 80060c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <USB_EPStartXfer+0x1226>
 80060e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060e4:	3301      	adds	r3, #1
 80060e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80060ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	029b      	lsls	r3, r3, #10
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	4313      	orrs	r3, r2
 80060fe:	b29a      	uxth	r2, r3
 8006100:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006104:	801a      	strh	r2, [r3, #0]
 8006106:	e02d      	b.n	8006164 <USB_EPStartXfer+0x12a0>
 8006108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800610c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d125      	bne.n	8006164 <USB_EPStartXfer+0x12a0>
 8006118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006126:	b29b      	uxth	r3, r3
 8006128:	461a      	mov	r2, r3
 800612a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800612e:	4413      	add	r3, r2
 8006130:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	011a      	lsls	r2, r3, #4
 8006142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006146:	4413      	add	r3, r2
 8006148:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800614c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	b29a      	uxth	r2, r3
 800615e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006162:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8218 	beq.w	80065a6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006196:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800619a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <USB_EPStartXfer+0x12ea>
 80061a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10d      	bne.n	80061ca <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f040 81f5 	bne.w	80065a6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80061c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f040 81ee 	bne.w	80065a6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80061ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061f0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80061f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	441a      	add	r2, r3
 800620e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006216:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800621a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800621e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006222:	b29b      	uxth	r3, r3
 8006224:	8013      	strh	r3, [r2, #0]
 8006226:	e1be      	b.n	80065a6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006228:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	78db      	ldrb	r3, [r3, #3]
 8006234:	2b01      	cmp	r3, #1
 8006236:	f040 81b4 	bne.w	80065a2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800623a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800623e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	429a      	cmp	r2, r3
 8006254:	d917      	bls.n	8006286 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800625a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006276:	1ad2      	subs	r2, r2, r3
 8006278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	619a      	str	r2, [r3, #24]
 8006284:	e00e      	b.n	80062a4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2200      	movs	r2, #0
 80062a2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80062a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	785b      	ldrb	r3, [r3, #1]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f040 8085 	bne.w	80063c0 <USB_EPStartXfer+0x14fc>
 80062b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062da:	4413      	add	r3, r2
 80062dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	011a      	lsls	r2, r3, #4
 80062ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062f2:	4413      	add	r3, r2
 80062f4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80062f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006308:	b29a      	uxth	r2, r3
 800630a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006314:	2b3e      	cmp	r3, #62	@ 0x3e
 8006316:	d923      	bls.n	8006360 <USB_EPStartXfer+0x149c>
 8006318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	2b00      	cmp	r3, #0
 800632c:	d104      	bne.n	8006338 <USB_EPStartXfer+0x1474>
 800632e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006332:	3b01      	subs	r3, #1
 8006334:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29a      	uxth	r2, r3
 8006340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006344:	b29b      	uxth	r3, r3
 8006346:	029b      	lsls	r3, r3, #10
 8006348:	b29b      	uxth	r3, r3
 800634a:	4313      	orrs	r3, r2
 800634c:	b29b      	uxth	r3, r3
 800634e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006356:	b29a      	uxth	r2, r3
 8006358:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800635c:	801a      	strh	r2, [r3, #0]
 800635e:	e060      	b.n	8006422 <USB_EPStartXfer+0x155e>
 8006360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10c      	bne.n	8006382 <USB_EPStartXfer+0x14be>
 8006368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	b29b      	uxth	r3, r3
 8006370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006378:	b29a      	uxth	r2, r3
 800637a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800637e:	801a      	strh	r2, [r3, #0]
 8006380:	e04f      	b.n	8006422 <USB_EPStartXfer+0x155e>
 8006382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800638c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <USB_EPStartXfer+0x14de>
 8006398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800639c:	3301      	adds	r3, #1
 800639e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80063a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	029b      	lsls	r3, r3, #10
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	4313      	orrs	r3, r2
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80063bc:	801a      	strh	r2, [r3, #0]
 80063be:	e030      	b.n	8006422 <USB_EPStartXfer+0x155e>
 80063c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	785b      	ldrb	r3, [r3, #1]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d128      	bne.n	8006422 <USB_EPStartXfer+0x155e>
 80063d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063f4:	4413      	add	r3, r2
 80063f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80063fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	011a      	lsls	r2, r3, #4
 8006408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800640c:	4413      	add	r3, r2
 800640e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006412:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800641a:	b29a      	uxth	r2, r3
 800641c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006420:	801a      	strh	r2, [r3, #0]
 8006422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006426:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f040 8085 	bne.w	800654c <USB_EPStartXfer+0x1688>
 8006442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800645e:	b29b      	uxth	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006466:	4413      	add	r3, r2
 8006468:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800646c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	011a      	lsls	r2, r3, #4
 800647a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800647e:	4413      	add	r3, r2
 8006480:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006484:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006488:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006494:	b29a      	uxth	r2, r3
 8006496:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800649a:	801a      	strh	r2, [r3, #0]
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80064a2:	d923      	bls.n	80064ec <USB_EPStartXfer+0x1628>
 80064a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a8:	095b      	lsrs	r3, r3, #5
 80064aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b2:	f003 031f 	and.w	r3, r3, #31
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d104      	bne.n	80064c4 <USB_EPStartXfer+0x1600>
 80064ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064be:	3b01      	subs	r3, #1
 80064c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064c8:	881b      	ldrh	r3, [r3, #0]
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	029b      	lsls	r3, r3, #10
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	4313      	orrs	r3, r2
 80064d8:	b29b      	uxth	r3, r3
 80064da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	e05c      	b.n	80065a6 <USB_EPStartXfer+0x16e2>
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10c      	bne.n	800650e <USB_EPStartXfer+0x164a>
 80064f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006504:	b29a      	uxth	r2, r3
 8006506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800650a:	801a      	strh	r2, [r3, #0]
 800650c:	e04b      	b.n	80065a6 <USB_EPStartXfer+0x16e2>
 800650e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006512:	085b      	lsrs	r3, r3, #1
 8006514:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d004      	beq.n	800652e <USB_EPStartXfer+0x166a>
 8006524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006528:	3301      	adds	r3, #1
 800652a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800652e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	b29a      	uxth	r2, r3
 8006536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800653a:	b29b      	uxth	r3, r3
 800653c:	029b      	lsls	r3, r3, #10
 800653e:	b29b      	uxth	r3, r3
 8006540:	4313      	orrs	r3, r2
 8006542:	b29a      	uxth	r2, r3
 8006544:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006548:	801a      	strh	r2, [r3, #0]
 800654a:	e02c      	b.n	80065a6 <USB_EPStartXfer+0x16e2>
 800654c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	785b      	ldrb	r3, [r3, #1]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d124      	bne.n	80065a6 <USB_EPStartXfer+0x16e2>
 800655c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800656a:	b29b      	uxth	r3, r3
 800656c:	461a      	mov	r2, r3
 800656e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006572:	4413      	add	r3, r2
 8006574:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	011a      	lsls	r2, r3, #4
 8006586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800658a:	4413      	add	r3, r2
 800658c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006590:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006598:	b29a      	uxth	r2, r3
 800659a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800659e:	801a      	strh	r2, [r3, #0]
 80065a0:	e001      	b.n	80065a6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e03a      	b.n	800661c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80065d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80065e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80065e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80065e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	441a      	add	r2, r3
 8006602:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006606:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800660a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800660e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006616:	b29b      	uxth	r3, r3
 8006618:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006626:	b480      	push	{r7}
 8006628:	b085      	sub	sp, #20
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	785b      	ldrb	r3, [r3, #1]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d020      	beq.n	800667a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	b29b      	uxth	r3, r3
 8006646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800664a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800664e:	81bb      	strh	r3, [r7, #12]
 8006650:	89bb      	ldrh	r3, [r7, #12]
 8006652:	f083 0310 	eor.w	r3, r3, #16
 8006656:	81bb      	strh	r3, [r7, #12]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	89bb      	ldrh	r3, [r7, #12]
 8006664:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006668:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800666c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006674:	b29b      	uxth	r3, r3
 8006676:	8013      	strh	r3, [r2, #0]
 8006678:	e01f      	b.n	80066ba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800668c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006690:	81fb      	strh	r3, [r7, #14]
 8006692:	89fb      	ldrh	r3, [r7, #14]
 8006694:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006698:	81fb      	strh	r3, [r7, #14]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	441a      	add	r2, r3
 80066a4:	89fb      	ldrh	r3, [r7, #14]
 80066a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr

080066c6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b087      	sub	sp, #28
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	7b1b      	ldrb	r3, [r3, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f040 809d 	bne.w	8006814 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d04c      	beq.n	800677c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	823b      	strh	r3, [r7, #16]
 80066f0:	8a3b      	ldrh	r3, [r7, #16]
 80066f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d01b      	beq.n	8006732 <USB_EPClearStall+0x6c>
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800670c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006710:	81fb      	strh	r3, [r7, #14]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	441a      	add	r2, r3
 800671c:	89fb      	ldrh	r3, [r7, #14]
 800671e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006722:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800672a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800672e:	b29b      	uxth	r3, r3
 8006730:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	78db      	ldrb	r3, [r3, #3]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d06c      	beq.n	8006814 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800674c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006750:	81bb      	strh	r3, [r7, #12]
 8006752:	89bb      	ldrh	r3, [r7, #12]
 8006754:	f083 0320 	eor.w	r3, r3, #32
 8006758:	81bb      	strh	r3, [r7, #12]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	441a      	add	r2, r3
 8006764:	89bb      	ldrh	r3, [r7, #12]
 8006766:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800676a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800676e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006776:	b29b      	uxth	r3, r3
 8006778:	8013      	strh	r3, [r2, #0]
 800677a:	e04b      	b.n	8006814 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	82fb      	strh	r3, [r7, #22]
 800678a:	8afb      	ldrh	r3, [r7, #22]
 800678c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01b      	beq.n	80067cc <USB_EPClearStall+0x106>
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067aa:	82bb      	strh	r3, [r7, #20]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	441a      	add	r2, r3
 80067b6:	8abb      	ldrh	r3, [r7, #20]
 80067b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067e2:	827b      	strh	r3, [r7, #18]
 80067e4:	8a7b      	ldrh	r3, [r7, #18]
 80067e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80067ea:	827b      	strh	r3, [r7, #18]
 80067ec:	8a7b      	ldrh	r3, [r7, #18]
 80067ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067f2:	827b      	strh	r3, [r7, #18]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	8a7b      	ldrh	r3, [r7, #18]
 8006800:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006804:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800680c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006810:	b29b      	uxth	r3, r3
 8006812:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d103      	bne.n	800683a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2280      	movs	r2, #128	@ 0x80
 8006836:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr

08006846 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr

0800685a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	bc80      	pop	{r7}
 800686c:	4770      	bx	lr

0800686e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800686e:	b480      	push	{r7}
 8006870:	b085      	sub	sp, #20
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800687c:	b29b      	uxth	r3, r3
 800687e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006880:	68fb      	ldr	r3, [r7, #12]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	bc80      	pop	{r7}
 800688a:	4770      	bx	lr

0800688c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	bc80      	pop	{r7}
 80068a0:	4770      	bx	lr

080068a2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b08b      	sub	sp, #44	@ 0x2c
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	4611      	mov	r1, r2
 80068ae:	461a      	mov	r2, r3
 80068b0:	460b      	mov	r3, r1
 80068b2:	80fb      	strh	r3, [r7, #6]
 80068b4:	4613      	mov	r3, r2
 80068b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068b8:	88bb      	ldrh	r3, [r7, #4]
 80068ba:	3301      	adds	r3, #1
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	005a      	lsls	r2, r3, #1
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068da:	e01e      	b.n	800691a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	3301      	adds	r3, #1
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	021b      	lsls	r3, r3, #8
 80068ea:	b21a      	sxth	r2, r3
 80068ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	b21b      	sxth	r3, r3
 80068f4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	8a7a      	ldrh	r2, [r7, #18]
 80068fa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	3302      	adds	r3, #2
 8006900:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	3302      	adds	r3, #2
 8006906:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	3301      	adds	r3, #1
 800690c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	3301      	adds	r3, #1
 8006912:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	3b01      	subs	r3, #1
 8006918:	627b      	str	r3, [r7, #36]	@ 0x24
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1dd      	bne.n	80068dc <USB_WritePMA+0x3a>
  }
}
 8006920:	bf00      	nop
 8006922:	bf00      	nop
 8006924:	372c      	adds	r7, #44	@ 0x2c
 8006926:	46bd      	mov	sp, r7
 8006928:	bc80      	pop	{r7}
 800692a:	4770      	bx	lr

0800692c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800692c:	b480      	push	{r7}
 800692e:	b08b      	sub	sp, #44	@ 0x2c
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4611      	mov	r1, r2
 8006938:	461a      	mov	r2, r3
 800693a:	460b      	mov	r3, r1
 800693c:	80fb      	strh	r3, [r7, #6]
 800693e:	4613      	mov	r3, r2
 8006940:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006942:	88bb      	ldrh	r3, [r7, #4]
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	b29b      	uxth	r3, r3
 8006948:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	005a      	lsls	r2, r3, #1
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800695e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	627b      	str	r3, [r7, #36]	@ 0x24
 8006964:	e01b      	b.n	800699e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006966:	6a3b      	ldr	r3, [r7, #32]
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	3302      	adds	r3, #2
 8006972:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	b2da      	uxtb	r2, r3
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	3301      	adds	r3, #1
 8006980:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	0a1b      	lsrs	r3, r3, #8
 8006986:	b2da      	uxtb	r2, r3
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	3301      	adds	r3, #1
 8006990:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	3302      	adds	r3, #2
 8006996:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699a:	3b01      	subs	r3, #1
 800699c:	627b      	str	r3, [r7, #36]	@ 0x24
 800699e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e0      	bne.n	8006966 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80069a4:	88bb      	ldrh	r3, [r7, #4]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d007      	beq.n	80069c0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	701a      	strb	r2, [r3, #0]
  }
}
 80069c0:	bf00      	nop
 80069c2:	372c      	adds	r7, #44	@ 0x2c
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr

080069ca <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b084      	sub	sp, #16
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	460b      	mov	r3, r1
 80069d4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	7c1b      	ldrb	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d115      	bne.n	8006a0e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80069e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069e6:	2202      	movs	r2, #2
 80069e8:	2181      	movs	r1, #129	@ 0x81
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 fe95 	bl	800871a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069fa:	2202      	movs	r2, #2
 80069fc:	2101      	movs	r1, #1
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f001 fe8b 	bl	800871a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006a0c:	e012      	b.n	8006a34 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a0e:	2340      	movs	r3, #64	@ 0x40
 8006a10:	2202      	movs	r2, #2
 8006a12:	2181      	movs	r1, #129	@ 0x81
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fe80 	bl	800871a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006a20:	2340      	movs	r3, #64	@ 0x40
 8006a22:	2202      	movs	r2, #2
 8006a24:	2101      	movs	r1, #1
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 fe77 	bl	800871a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006a34:	2308      	movs	r3, #8
 8006a36:	2203      	movs	r2, #3
 8006a38:	2182      	movs	r1, #130	@ 0x82
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 fe6d 	bl	800871a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a46:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006a4a:	f001 ff8d 	bl	8008968 <USBD_static_malloc>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006a60:	2301      	movs	r3, #1
 8006a62:	73fb      	strb	r3, [r7, #15]
 8006a64:	e026      	b.n	8006ab4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a6c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	7c1b      	ldrb	r3, [r3, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d109      	bne.n	8006aa4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 ff2c 	bl	80088fa <USBD_LL_PrepareReceive>
 8006aa2:	e007      	b.n	8006ab4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006aaa:	2340      	movs	r3, #64	@ 0x40
 8006aac:	2101      	movs	r1, #1
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f001 ff23 	bl	80088fa <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ace:	2181      	movs	r1, #129	@ 0x81
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f001 fe48 	bl	8008766 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006adc:	2101      	movs	r1, #1
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f001 fe41 	bl	8008766 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006aec:	2182      	movs	r1, #130	@ 0x82
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fe39 	bl	8008766 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00e      	beq.n	8006b22 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 ff33 	bl	8008980 <USBD_static_free>
    pdev->pClassData = NULL;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b3c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d039      	beq.n	8006bca <USBD_CDC_Setup+0x9e>
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d17f      	bne.n	8006c5a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	88db      	ldrh	r3, [r3, #6]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d029      	beq.n	8006bb6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	b25b      	sxtb	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	da11      	bge.n	8006b90 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006b78:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	88d2      	ldrh	r2, [r2, #6]
 8006b7e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b80:	6939      	ldr	r1, [r7, #16]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	88db      	ldrh	r3, [r3, #6]
 8006b86:	461a      	mov	r2, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 fa05 	bl	8007f98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006b8e:	e06b      	b.n	8006c68 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	785a      	ldrb	r2, [r3, #1]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	88db      	ldrh	r3, [r3, #6]
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ba6:	6939      	ldr	r1, [r7, #16]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	88db      	ldrh	r3, [r3, #6]
 8006bac:	461a      	mov	r2, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 fa20 	bl	8007ff4 <USBD_CtlPrepareRx>
      break;
 8006bb4:	e058      	b.n	8006c68 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	7850      	ldrb	r0, [r2, #1]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	4798      	blx	r3
      break;
 8006bc8:	e04e      	b.n	8006c68 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	785b      	ldrb	r3, [r3, #1]
 8006bce:	2b0b      	cmp	r3, #11
 8006bd0:	d02e      	beq.n	8006c30 <USBD_CDC_Setup+0x104>
 8006bd2:	2b0b      	cmp	r3, #11
 8006bd4:	dc38      	bgt.n	8006c48 <USBD_CDC_Setup+0x11c>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <USBD_CDC_Setup+0xb4>
 8006bda:	2b0a      	cmp	r3, #10
 8006bdc:	d014      	beq.n	8006c08 <USBD_CDC_Setup+0xdc>
 8006bde:	e033      	b.n	8006c48 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d107      	bne.n	8006bfa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006bea:	f107 030c 	add.w	r3, r7, #12
 8006bee:	2202      	movs	r2, #2
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f001 f9d0 	bl	8007f98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bf8:	e02e      	b.n	8006c58 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 f961 	bl	8007ec4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c02:	2302      	movs	r3, #2
 8006c04:	75fb      	strb	r3, [r7, #23]
          break;
 8006c06:	e027      	b.n	8006c58 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d107      	bne.n	8006c22 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c12:	f107 030f 	add.w	r3, r7, #15
 8006c16:	2201      	movs	r2, #1
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 f9bc 	bl	8007f98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c20:	e01a      	b.n	8006c58 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 f94d 	bl	8007ec4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c2e:	e013      	b.n	8006c58 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d00d      	beq.n	8006c56 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f001 f941 	bl	8007ec4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c42:	2302      	movs	r3, #2
 8006c44:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006c46:	e006      	b.n	8006c56 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 f93a 	bl	8007ec4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c50:	2302      	movs	r3, #2
 8006c52:	75fb      	strb	r3, [r7, #23]
          break;
 8006c54:	e000      	b.n	8006c58 <USBD_CDC_Setup+0x12c>
          break;
 8006c56:	bf00      	nop
      }
      break;
 8006c58:	e006      	b.n	8006c68 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 f931 	bl	8007ec4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006c62:	2302      	movs	r3, #2
 8006c64:	75fb      	strb	r3, [r7, #23]
      break;
 8006c66:	bf00      	nop
  }

  return ret;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b084      	sub	sp, #16
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c84:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006c8c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d03a      	beq.n	8006d0e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c98:	78fa      	ldrb	r2, [r7, #3]
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	440b      	add	r3, r1
 8006ca6:	331c      	adds	r3, #28
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d029      	beq.n	8006d02 <USBD_CDC_DataIn+0x90>
 8006cae:	78fa      	ldrb	r2, [r7, #3]
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	331c      	adds	r3, #28
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	78f9      	ldrb	r1, [r7, #3]
 8006cc2:	68b8      	ldr	r0, [r7, #8]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	440b      	add	r3, r1
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	4403      	add	r3, r0
 8006cce:	3320      	adds	r3, #32
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	fbb2 f1f3 	udiv	r1, r2, r3
 8006cd6:	fb01 f303 	mul.w	r3, r1, r3
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d110      	bne.n	8006d02 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006ce0:	78fa      	ldrb	r2, [r7, #3]
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	331c      	adds	r3, #28
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006cf4:	78f9      	ldrb	r1, [r7, #3]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f001 fdda 	bl	80088b4 <USBD_LL_Transmit>
 8006d00:	e003      	b.n	8006d0a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e000      	b.n	8006d10 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006d0e:	2302      	movs	r3, #2
  }
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 fe05 	bl	8008940 <USBD_LL_GetRxDataSize>
 8006d36:	4602      	mov	r2, r0
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00d      	beq.n	8006d64 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	4798      	blx	r3

    return USBD_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	e000      	b.n	8006d66 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006d64:	2302      	movs	r3, #2
  }
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d7c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d014      	beq.n	8006db2 <USBD_CDC_EP0_RxReady+0x44>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006d8e:	2bff      	cmp	r3, #255	@ 0xff
 8006d90:	d00f      	beq.n	8006db2 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006da0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006da8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	22ff      	movs	r2, #255	@ 0xff
 8006dae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2243      	movs	r2, #67	@ 0x43
 8006dc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006dca:	4b03      	ldr	r3, [pc, #12]	@ (8006dd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000094 	.word	0x20000094

08006ddc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2243      	movs	r2, #67	@ 0x43
 8006de8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006dea:	4b03      	ldr	r3, [pc, #12]	@ (8006df8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bc80      	pop	{r7}
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	20000050 	.word	0x20000050

08006dfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2243      	movs	r2, #67	@ 0x43
 8006e08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006e0a:	4b03      	ldr	r3, [pc, #12]	@ (8006e18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bc80      	pop	{r7}
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	200000d8 	.word	0x200000d8

08006e1c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	220a      	movs	r2, #10
 8006e28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006e2a:	4b03      	ldr	r3, [pc, #12]	@ (8006e38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bc80      	pop	{r7}
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	2000000c 	.word	0x2000000c

08006e3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006e46:	2302      	movs	r3, #2
 8006e48:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bc80      	pop	{r7}
 8006e66:	4770      	bx	lr

08006e68 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e7c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006e86:	88fa      	ldrh	r2, [r7, #6]
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr

08006e9a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eaa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr

08006ec0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ece:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d01c      	beq.n	8006f14 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d115      	bne.n	8006f10 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	2181      	movs	r1, #129	@ 0x81
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 fcd4 	bl	80088b4 <USBD_LL_Transmit>

      return USBD_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e002      	b.n	8006f16 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e000      	b.n	8006f16 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006f14:	2302      	movs	r3, #2
  }
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d017      	beq.n	8006f68 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	7c1b      	ldrb	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d109      	bne.n	8006f54 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 fcd4 	bl	80088fa <USBD_LL_PrepareReceive>
 8006f52:	e007      	b.n	8006f64 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f5a:	2340      	movs	r3, #64	@ 0x40
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fccb 	bl	80088fa <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	e000      	b.n	8006f6a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006f68:	2302      	movs	r3, #2
  }
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}

08006f72 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f72:	b580      	push	{r7, lr}
 8006f74:	b084      	sub	sp, #16
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	60f8      	str	r0, [r7, #12]
 8006f7a:	60b9      	str	r1, [r7, #8]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f86:	2302      	movs	r3, #2
 8006f88:	e01a      	b.n	8006fc0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	79fa      	ldrb	r2, [r7, #7]
 8006fb6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f001 fb39 	bl	8008630 <USBD_LL_Init>

  return USBD_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d006      	beq.n	8006fea <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	73fb      	strb	r3, [r7, #15]
 8006fe8:	e001      	b.n	8006fee <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006fea:	2302      	movs	r3, #2
 8006fec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bc80      	pop	{r7}
 8006ff8:	4770      	bx	lr

08006ffa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 fb6e 	bl	80086e4 <USBD_LL_Start>

  return USBD_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr

08007026 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
 800702e:	460b      	mov	r3, r1
 8007030:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007032:	2302      	movs	r3, #2
 8007034:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00c      	beq.n	800705a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	78fa      	ldrb	r2, [r7, #3]
 800704a:	4611      	mov	r1, r2
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	4798      	blx	r3
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800705a:	7bfb      	ldrb	r3, [r7, #15]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	460b      	mov	r3, r1
 800706e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	4611      	mov	r1, r2
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3

  return USBD_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b082      	sub	sp, #8
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fed8 	bl	8007e52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80070b0:	461a      	mov	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d016      	beq.n	80070f4 <USBD_LL_SetupStage+0x6a>
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d81c      	bhi.n	8007104 <USBD_LL_SetupStage+0x7a>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <USBD_LL_SetupStage+0x4a>
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d008      	beq.n	80070e4 <USBD_LL_SetupStage+0x5a>
 80070d2:	e017      	b.n	8007104 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f9cb 	bl	8007478 <USBD_StdDevReq>
      break;
 80070e2:	e01a      	b.n	800711a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fa2d 	bl	800754c <USBD_StdItfReq>
      break;
 80070f2:	e012      	b.n	800711a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fa6d 	bl	80075dc <USBD_StdEPReq>
      break;
 8007102:	e00a      	b.n	800711a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800710a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800710e:	b2db      	uxtb	r3, r3
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fb46 	bl	80087a4 <USBD_LL_StallEP>
      break;
 8007118:	bf00      	nop
  }

  return USBD_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	460b      	mov	r3, r1
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d14b      	bne.n	80071d0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800713e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007146:	2b03      	cmp	r3, #3
 8007148:	d134      	bne.n	80071b4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	429a      	cmp	r2, r3
 8007154:	d919      	bls.n	800718a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	1ad2      	subs	r2, r2, r3
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800716c:	429a      	cmp	r2, r3
 800716e:	d203      	bcs.n	8007178 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007174:	b29b      	uxth	r3, r3
 8007176:	e002      	b.n	800717e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800717c:	b29b      	uxth	r3, r3
 800717e:	461a      	mov	r2, r3
 8007180:	6879      	ldr	r1, [r7, #4]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 ff54 	bl	8008030 <USBD_CtlContinueRx>
 8007188:	e038      	b.n	80071fc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800719c:	2b03      	cmp	r3, #3
 800719e:	d105      	bne.n	80071ac <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 ff51 	bl	8008054 <USBD_CtlSendStatus>
 80071b2:	e023      	b.n	80071fc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	d11e      	bne.n	80071fc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80071c6:	2100      	movs	r1, #0
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f001 faeb 	bl	80087a4 <USBD_LL_StallEP>
 80071ce:	e015      	b.n	80071fc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00d      	beq.n	80071f8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d108      	bne.n	80071f8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	7afa      	ldrb	r2, [r7, #11]
 80071f0:	4611      	mov	r1, r2
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	4798      	blx	r3
 80071f6:	e001      	b.n	80071fc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80071f8:	2302      	movs	r3, #2
 80071fa:	e000      	b.n	80071fe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b086      	sub	sp, #24
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	460b      	mov	r3, r1
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d17f      	bne.n	800731a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3314      	adds	r3, #20
 800721e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007226:	2b02      	cmp	r3, #2
 8007228:	d15c      	bne.n	80072e4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	429a      	cmp	r2, r3
 8007234:	d915      	bls.n	8007262 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	b29b      	uxth	r3, r3
 800724a:	461a      	mov	r2, r3
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 febe 	bl	8007fd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007254:	2300      	movs	r3, #0
 8007256:	2200      	movs	r2, #0
 8007258:	2100      	movs	r1, #0
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f001 fb4d 	bl	80088fa <USBD_LL_PrepareReceive>
 8007260:	e04e      	b.n	8007300 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	6912      	ldr	r2, [r2, #16]
 800726a:	fbb3 f1f2 	udiv	r1, r3, r2
 800726e:	fb01 f202 	mul.w	r2, r1, r2
 8007272:	1a9b      	subs	r3, r3, r2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d11c      	bne.n	80072b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007280:	429a      	cmp	r2, r3
 8007282:	d316      	bcc.n	80072b2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800728e:	429a      	cmp	r2, r3
 8007290:	d20f      	bcs.n	80072b2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007292:	2200      	movs	r2, #0
 8007294:	2100      	movs	r1, #0
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 fe9a 	bl	8007fd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072a4:	2300      	movs	r3, #0
 80072a6:	2200      	movs	r2, #0
 80072a8:	2100      	movs	r1, #0
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f001 fb25 	bl	80088fa <USBD_LL_PrepareReceive>
 80072b0:	e026      	b.n	8007300 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d105      	bne.n	80072d4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80072d4:	2180      	movs	r1, #128	@ 0x80
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f001 fa64 	bl	80087a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 fecc 	bl	800807a <USBD_CtlReceiveStatus>
 80072e2:	e00d      	b.n	8007300 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d004      	beq.n	80072f8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d103      	bne.n	8007300 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80072f8:	2180      	movs	r1, #128	@ 0x80
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f001 fa52 	bl	80087a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007306:	2b01      	cmp	r3, #1
 8007308:	d11d      	bne.n	8007346 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f7ff fe81 	bl	8007012 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007318:	e015      	b.n	8007346 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00d      	beq.n	8007342 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800732c:	2b03      	cmp	r3, #3
 800732e:	d108      	bne.n	8007342 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	7afa      	ldrb	r2, [r7, #11]
 800733a:	4611      	mov	r1, r2
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	4798      	blx	r3
 8007340:	e001      	b.n	8007346 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007342:	2302      	movs	r3, #2
 8007344:	e000      	b.n	8007348 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007358:	2340      	movs	r3, #64	@ 0x40
 800735a:	2200      	movs	r2, #0
 800735c:	2100      	movs	r1, #0
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 f9db 	bl	800871a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2240      	movs	r2, #64	@ 0x40
 8007370:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007374:	2340      	movs	r3, #64	@ 0x40
 8007376:	2200      	movs	r2, #0
 8007378:	2180      	movs	r1, #128	@ 0x80
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f001 f9cd 	bl	800871a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2240      	movs	r2, #64	@ 0x40
 800738a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d009      	beq.n	80073c8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6852      	ldr	r2, [r2, #4]
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	4611      	mov	r1, r2
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	4798      	blx	r3
  }

  return USBD_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	460b      	mov	r3, r1
 80073dc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	78fa      	ldrb	r2, [r7, #3]
 80073e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bc80      	pop	{r7}
 80073ee:	4770      	bx	lr

080073f0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2204      	movs	r2, #4
 8007408:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	bc80      	pop	{r7}
 8007416:	4770      	bx	lr

08007418 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007426:	2b04      	cmp	r3, #4
 8007428:	d105      	bne.n	8007436 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr

08007442 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007450:	2b03      	cmp	r3, #3
 8007452:	d10b      	bne.n	800746c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d005      	beq.n	800746c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
	...

08007478 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800748e:	2b40      	cmp	r3, #64	@ 0x40
 8007490:	d005      	beq.n	800749e <USBD_StdDevReq+0x26>
 8007492:	2b40      	cmp	r3, #64	@ 0x40
 8007494:	d84f      	bhi.n	8007536 <USBD_StdDevReq+0xbe>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d009      	beq.n	80074ae <USBD_StdDevReq+0x36>
 800749a:	2b20      	cmp	r3, #32
 800749c:	d14b      	bne.n	8007536 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	4798      	blx	r3
      break;
 80074ac:	e048      	b.n	8007540 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	2b09      	cmp	r3, #9
 80074b4:	d839      	bhi.n	800752a <USBD_StdDevReq+0xb2>
 80074b6:	a201      	add	r2, pc, #4	@ (adr r2, 80074bc <USBD_StdDevReq+0x44>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	0800750d 	.word	0x0800750d
 80074c0:	08007521 	.word	0x08007521
 80074c4:	0800752b 	.word	0x0800752b
 80074c8:	08007517 	.word	0x08007517
 80074cc:	0800752b 	.word	0x0800752b
 80074d0:	080074ef 	.word	0x080074ef
 80074d4:	080074e5 	.word	0x080074e5
 80074d8:	0800752b 	.word	0x0800752b
 80074dc:	08007503 	.word	0x08007503
 80074e0:	080074f9 	.word	0x080074f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f9dc 	bl	80078a4 <USBD_GetDescriptor>
          break;
 80074ec:	e022      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fb3f 	bl	8007b74 <USBD_SetAddress>
          break;
 80074f6:	e01d      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fb7e 	bl	8007bfc <USBD_SetConfig>
          break;
 8007500:	e018      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fc07 	bl	8007d18 <USBD_GetConfig>
          break;
 800750a:	e013      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fc37 	bl	8007d82 <USBD_GetStatus>
          break;
 8007514:	e00e      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fc65 	bl	8007de8 <USBD_SetFeature>
          break;
 800751e:	e009      	b.n	8007534 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fc74 	bl	8007e10 <USBD_ClrFeature>
          break;
 8007528:	e004      	b.n	8007534 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fcc9 	bl	8007ec4 <USBD_CtlError>
          break;
 8007532:	bf00      	nop
      }
      break;
 8007534:	e004      	b.n	8007540 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fcc3 	bl	8007ec4 <USBD_CtlError>
      break;
 800753e:	bf00      	nop
  }

  return ret;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop

0800754c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007562:	2b40      	cmp	r3, #64	@ 0x40
 8007564:	d005      	beq.n	8007572 <USBD_StdItfReq+0x26>
 8007566:	2b40      	cmp	r3, #64	@ 0x40
 8007568:	d82e      	bhi.n	80075c8 <USBD_StdItfReq+0x7c>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <USBD_StdItfReq+0x26>
 800756e:	2b20      	cmp	r3, #32
 8007570:	d12a      	bne.n	80075c8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007578:	3b01      	subs	r3, #1
 800757a:	2b02      	cmp	r3, #2
 800757c:	d81d      	bhi.n	80075ba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	889b      	ldrh	r3, [r3, #4]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b01      	cmp	r3, #1
 8007586:	d813      	bhi.n	80075b0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	4798      	blx	r3
 8007596:	4603      	mov	r3, r0
 8007598:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	88db      	ldrh	r3, [r3, #6]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d110      	bne.n	80075c4 <USBD_StdItfReq+0x78>
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10d      	bne.n	80075c4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fd53 	bl	8008054 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075ae:	e009      	b.n	80075c4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fc86 	bl	8007ec4 <USBD_CtlError>
          break;
 80075b8:	e004      	b.n	80075c4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fc81 	bl	8007ec4 <USBD_CtlError>
          break;
 80075c2:	e000      	b.n	80075c6 <USBD_StdItfReq+0x7a>
          break;
 80075c4:	bf00      	nop
      }
      break;
 80075c6:	e004      	b.n	80075d2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fc7a 	bl	8007ec4 <USBD_CtlError>
      break;
 80075d0:	bf00      	nop
  }

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80075e6:	2300      	movs	r3, #0
 80075e8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	889b      	ldrh	r3, [r3, #4]
 80075ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075f8:	2b40      	cmp	r3, #64	@ 0x40
 80075fa:	d007      	beq.n	800760c <USBD_StdEPReq+0x30>
 80075fc:	2b40      	cmp	r3, #64	@ 0x40
 80075fe:	f200 8146 	bhi.w	800788e <USBD_StdEPReq+0x2b2>
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <USBD_StdEPReq+0x40>
 8007606:	2b20      	cmp	r3, #32
 8007608:	f040 8141 	bne.w	800788e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
      break;
 800761a:	e13d      	b.n	8007898 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007624:	2b20      	cmp	r3, #32
 8007626:	d10a      	bne.n	800763e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
 8007636:	4603      	mov	r3, r0
 8007638:	73fb      	strb	r3, [r7, #15]

        return ret;
 800763a:	7bfb      	ldrb	r3, [r7, #15]
 800763c:	e12d      	b.n	800789a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	785b      	ldrb	r3, [r3, #1]
 8007642:	2b03      	cmp	r3, #3
 8007644:	d007      	beq.n	8007656 <USBD_StdEPReq+0x7a>
 8007646:	2b03      	cmp	r3, #3
 8007648:	f300 811b 	bgt.w	8007882 <USBD_StdEPReq+0x2a6>
 800764c:	2b00      	cmp	r3, #0
 800764e:	d072      	beq.n	8007736 <USBD_StdEPReq+0x15a>
 8007650:	2b01      	cmp	r3, #1
 8007652:	d03a      	beq.n	80076ca <USBD_StdEPReq+0xee>
 8007654:	e115      	b.n	8007882 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800765c:	2b02      	cmp	r3, #2
 800765e:	d002      	beq.n	8007666 <USBD_StdEPReq+0x8a>
 8007660:	2b03      	cmp	r3, #3
 8007662:	d015      	beq.n	8007690 <USBD_StdEPReq+0xb4>
 8007664:	e02b      	b.n	80076be <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00c      	beq.n	8007686 <USBD_StdEPReq+0xaa>
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b80      	cmp	r3, #128	@ 0x80
 8007670:	d009      	beq.n	8007686 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 f894 	bl	80087a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800767c:	2180      	movs	r1, #128	@ 0x80
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f001 f890 	bl	80087a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007684:	e020      	b.n	80076c8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fc1b 	bl	8007ec4 <USBD_CtlError>
              break;
 800768e:	e01b      	b.n	80076c8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	885b      	ldrh	r3, [r3, #2]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10e      	bne.n	80076b6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <USBD_StdEPReq+0xda>
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b80      	cmp	r3, #128	@ 0x80
 80076a2:	d008      	beq.n	80076b6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	88db      	ldrh	r3, [r3, #6]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d104      	bne.n	80076b6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	4619      	mov	r1, r3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 f877 	bl	80087a4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fccc 	bl	8008054 <USBD_CtlSendStatus>

              break;
 80076bc:	e004      	b.n	80076c8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fbff 	bl	8007ec4 <USBD_CtlError>
              break;
 80076c6:	bf00      	nop
          }
          break;
 80076c8:	e0e0      	b.n	800788c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d002      	beq.n	80076da <USBD_StdEPReq+0xfe>
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d015      	beq.n	8007704 <USBD_StdEPReq+0x128>
 80076d8:	e026      	b.n	8007728 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00c      	beq.n	80076fa <USBD_StdEPReq+0x11e>
 80076e0:	7bbb      	ldrb	r3, [r7, #14]
 80076e2:	2b80      	cmp	r3, #128	@ 0x80
 80076e4:	d009      	beq.n	80076fa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	4619      	mov	r1, r3
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 f85a 	bl	80087a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80076f0:	2180      	movs	r1, #128	@ 0x80
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 f856 	bl	80087a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076f8:	e01c      	b.n	8007734 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 fbe1 	bl	8007ec4 <USBD_CtlError>
              break;
 8007702:	e017      	b.n	8007734 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	885b      	ldrh	r3, [r3, #2]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d112      	bne.n	8007732 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007712:	2b00      	cmp	r3, #0
 8007714:	d004      	beq.n	8007720 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 f861 	bl	80087e2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fc97 	bl	8008054 <USBD_CtlSendStatus>
              }
              break;
 8007726:	e004      	b.n	8007732 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fbca 	bl	8007ec4 <USBD_CtlError>
              break;
 8007730:	e000      	b.n	8007734 <USBD_StdEPReq+0x158>
              break;
 8007732:	bf00      	nop
          }
          break;
 8007734:	e0aa      	b.n	800788c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800773c:	2b02      	cmp	r3, #2
 800773e:	d002      	beq.n	8007746 <USBD_StdEPReq+0x16a>
 8007740:	2b03      	cmp	r3, #3
 8007742:	d032      	beq.n	80077aa <USBD_StdEPReq+0x1ce>
 8007744:	e097      	b.n	8007876 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <USBD_StdEPReq+0x180>
 800774c:	7bbb      	ldrb	r3, [r7, #14]
 800774e:	2b80      	cmp	r3, #128	@ 0x80
 8007750:	d004      	beq.n	800775c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fbb5 	bl	8007ec4 <USBD_CtlError>
                break;
 800775a:	e091      	b.n	8007880 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800775c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007760:	2b00      	cmp	r3, #0
 8007762:	da0b      	bge.n	800777c <USBD_StdEPReq+0x1a0>
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800776a:	4613      	mov	r3, r2
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	3310      	adds	r3, #16
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	4413      	add	r3, r2
 8007778:	3304      	adds	r3, #4
 800777a:	e00b      	b.n	8007794 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	4413      	add	r3, r2
 8007792:	3304      	adds	r3, #4
 8007794:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2202      	movs	r2, #2
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fbf8 	bl	8007f98 <USBD_CtlSendData>
              break;
 80077a8:	e06a      	b.n	8007880 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	da11      	bge.n	80077d6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	f003 020f 	and.w	r2, r3, #15
 80077b8:	6879      	ldr	r1, [r7, #4]
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	440b      	add	r3, r1
 80077c4:	3318      	adds	r3, #24
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d117      	bne.n	80077fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fb78 	bl	8007ec4 <USBD_CtlError>
                  break;
 80077d4:	e054      	b.n	8007880 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	f003 020f 	and.w	r2, r3, #15
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d104      	bne.n	80077fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fb65 	bl	8007ec4 <USBD_CtlError>
                  break;
 80077fa:	e041      	b.n	8007880 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007800:	2b00      	cmp	r3, #0
 8007802:	da0b      	bge.n	800781c <USBD_StdEPReq+0x240>
 8007804:	7bbb      	ldrb	r3, [r7, #14]
 8007806:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800780a:	4613      	mov	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	3310      	adds	r3, #16
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	4413      	add	r3, r2
 8007818:	3304      	adds	r3, #4
 800781a:	e00b      	b.n	8007834 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	4413      	add	r3, r2
 8007832:	3304      	adds	r3, #4
 8007834:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <USBD_StdEPReq+0x266>
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	2b80      	cmp	r3, #128	@ 0x80
 8007840:	d103      	bne.n	800784a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e00e      	b.n	8007868 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 ffe6 	bl	8008820 <USBD_LL_IsStallEP>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2201      	movs	r2, #1
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	e002      	b.n	8007868 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2200      	movs	r2, #0
 8007866:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2202      	movs	r2, #2
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fb92 	bl	8007f98 <USBD_CtlSendData>
              break;
 8007874:	e004      	b.n	8007880 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fb23 	bl	8007ec4 <USBD_CtlError>
              break;
 800787e:	bf00      	nop
          }
          break;
 8007880:	e004      	b.n	800788c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fb1d 	bl	8007ec4 <USBD_CtlError>
          break;
 800788a:	bf00      	nop
      }
      break;
 800788c:	e004      	b.n	8007898 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fb17 	bl	8007ec4 <USBD_CtlError>
      break;
 8007896:	bf00      	nop
  }

  return ret;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	885b      	ldrh	r3, [r3, #2]
 80078be:	0a1b      	lsrs	r3, r3, #8
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	3b01      	subs	r3, #1
 80078c4:	2b06      	cmp	r3, #6
 80078c6:	f200 8128 	bhi.w	8007b1a <USBD_GetDescriptor+0x276>
 80078ca:	a201      	add	r2, pc, #4	@ (adr r2, 80078d0 <USBD_GetDescriptor+0x2c>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	080078ed 	.word	0x080078ed
 80078d4:	08007905 	.word	0x08007905
 80078d8:	08007945 	.word	0x08007945
 80078dc:	08007b1b 	.word	0x08007b1b
 80078e0:	08007b1b 	.word	0x08007b1b
 80078e4:	08007abb 	.word	0x08007abb
 80078e8:	08007ae7 	.word	0x08007ae7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	7c12      	ldrb	r2, [r2, #16]
 80078f8:	f107 0108 	add.w	r1, r7, #8
 80078fc:	4610      	mov	r0, r2
 80078fe:	4798      	blx	r3
 8007900:	60f8      	str	r0, [r7, #12]
      break;
 8007902:	e112      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	7c1b      	ldrb	r3, [r3, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10d      	bne.n	8007928 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007914:	f107 0208 	add.w	r2, r7, #8
 8007918:	4610      	mov	r0, r2
 800791a:	4798      	blx	r3
 800791c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	3301      	adds	r3, #1
 8007922:	2202      	movs	r2, #2
 8007924:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007926:	e100      	b.n	8007b2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800792e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007930:	f107 0208 	add.w	r2, r7, #8
 8007934:	4610      	mov	r0, r2
 8007936:	4798      	blx	r3
 8007938:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3301      	adds	r3, #1
 800793e:	2202      	movs	r2, #2
 8007940:	701a      	strb	r2, [r3, #0]
      break;
 8007942:	e0f2      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	885b      	ldrh	r3, [r3, #2]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b05      	cmp	r3, #5
 800794c:	f200 80ac 	bhi.w	8007aa8 <USBD_GetDescriptor+0x204>
 8007950:	a201      	add	r2, pc, #4	@ (adr r2, 8007958 <USBD_GetDescriptor+0xb4>)
 8007952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007956:	bf00      	nop
 8007958:	08007971 	.word	0x08007971
 800795c:	080079a5 	.word	0x080079a5
 8007960:	080079d9 	.word	0x080079d9
 8007964:	08007a0d 	.word	0x08007a0d
 8007968:	08007a41 	.word	0x08007a41
 800796c:	08007a75 	.word	0x08007a75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	7c12      	ldrb	r2, [r2, #16]
 8007988:	f107 0108 	add.w	r1, r7, #8
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007992:	e091      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa94 	bl	8007ec4 <USBD_CtlError>
            err++;
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	3301      	adds	r3, #1
 80079a0:	72fb      	strb	r3, [r7, #11]
          break;
 80079a2:	e089      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7c12      	ldrb	r2, [r2, #16]
 80079bc:	f107 0108 	add.w	r1, r7, #8
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c6:	e077      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa7a 	bl	8007ec4 <USBD_CtlError>
            err++;
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	3301      	adds	r3, #1
 80079d4:	72fb      	strb	r3, [r7, #11]
          break;
 80079d6:	e06f      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fa:	e05d      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa60 	bl	8007ec4 <USBD_CtlError>
            err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0a:	e055      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7c12      	ldrb	r2, [r2, #16]
 8007a24:	f107 0108 	add.w	r1, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2e:	e043      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa46 	bl	8007ec4 <USBD_CtlError>
            err++;
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3e:	e03b      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00b      	beq.n	8007a64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	7c12      	ldrb	r2, [r2, #16]
 8007a58:	f107 0108 	add.w	r1, r7, #8
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4798      	blx	r3
 8007a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a62:	e029      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa2c 	bl	8007ec4 <USBD_CtlError>
            err++;
 8007a6c:	7afb      	ldrb	r3, [r7, #11]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	72fb      	strb	r3, [r7, #11]
          break;
 8007a72:	e021      	b.n	8007ab8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	7c12      	ldrb	r2, [r2, #16]
 8007a8c:	f107 0108 	add.w	r1, r7, #8
 8007a90:	4610      	mov	r0, r2
 8007a92:	4798      	blx	r3
 8007a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a96:	e00f      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa12 	bl	8007ec4 <USBD_CtlError>
            err++;
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8007aa6:	e007      	b.n	8007ab8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa0a 	bl	8007ec4 <USBD_CtlError>
          err++;
 8007ab0:	7afb      	ldrb	r3, [r7, #11]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007ab6:	e038      	b.n	8007b2a <USBD_GetDescriptor+0x286>
 8007ab8:	e037      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	7c1b      	ldrb	r3, [r3, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d109      	bne.n	8007ad6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aca:	f107 0208 	add.w	r2, r7, #8
 8007ace:	4610      	mov	r0, r2
 8007ad0:	4798      	blx	r3
 8007ad2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ad4:	e029      	b.n	8007b2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ad6:	6839      	ldr	r1, [r7, #0]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f9f3 	bl	8007ec4 <USBD_CtlError>
        err++;
 8007ade:	7afb      	ldrb	r3, [r7, #11]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	72fb      	strb	r3, [r7, #11]
      break;
 8007ae4:	e021      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	7c1b      	ldrb	r3, [r3, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10d      	bne.n	8007b0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af6:	f107 0208 	add.w	r2, r7, #8
 8007afa:	4610      	mov	r0, r2
 8007afc:	4798      	blx	r3
 8007afe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3301      	adds	r3, #1
 8007b04:	2207      	movs	r2, #7
 8007b06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b08:	e00f      	b.n	8007b2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f9d9 	bl	8007ec4 <USBD_CtlError>
        err++;
 8007b12:	7afb      	ldrb	r3, [r7, #11]
 8007b14:	3301      	adds	r3, #1
 8007b16:	72fb      	strb	r3, [r7, #11]
      break;
 8007b18:	e007      	b.n	8007b2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f9d1 	bl	8007ec4 <USBD_CtlError>
      err++;
 8007b22:	7afb      	ldrb	r3, [r7, #11]
 8007b24:	3301      	adds	r3, #1
 8007b26:	72fb      	strb	r3, [r7, #11]
      break;
 8007b28:	bf00      	nop
  }

  if (err != 0U)
 8007b2a:	7afb      	ldrb	r3, [r7, #11]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d11c      	bne.n	8007b6a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007b30:	893b      	ldrh	r3, [r7, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d011      	beq.n	8007b5a <USBD_GetDescriptor+0x2b6>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	88db      	ldrh	r3, [r3, #6]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00d      	beq.n	8007b5a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	88da      	ldrh	r2, [r3, #6]
 8007b42:	893b      	ldrh	r3, [r7, #8]
 8007b44:	4293      	cmp	r3, r2
 8007b46:	bf28      	it	cs
 8007b48:	4613      	movcs	r3, r2
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b4e:	893b      	ldrh	r3, [r7, #8]
 8007b50:	461a      	mov	r2, r3
 8007b52:	68f9      	ldr	r1, [r7, #12]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fa1f 	bl	8007f98 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	88db      	ldrh	r3, [r3, #6]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d104      	bne.n	8007b6c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fa76 	bl	8008054 <USBD_CtlSendStatus>
 8007b68:	e000      	b.n	8007b6c <USBD_GetDescriptor+0x2c8>
    return;
 8007b6a:	bf00      	nop
    }
  }
}
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop

08007b74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	889b      	ldrh	r3, [r3, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d130      	bne.n	8007be8 <USBD_SetAddress+0x74>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	88db      	ldrh	r3, [r3, #6]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d12c      	bne.n	8007be8 <USBD_SetAddress+0x74>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	885b      	ldrh	r3, [r3, #2]
 8007b92:	2b7f      	cmp	r3, #127	@ 0x7f
 8007b94:	d828      	bhi.n	8007be8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	885b      	ldrh	r3, [r3, #2]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ba0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d104      	bne.n	8007bb6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f988 	bl	8007ec4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bb4:	e01d      	b.n	8007bf2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	7bfa      	ldrb	r2, [r7, #15]
 8007bba:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fe57 	bl	8008876 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fa43 	bl	8008054 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d004      	beq.n	8007bde <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bdc:	e009      	b.n	8007bf2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be6:	e004      	b.n	8007bf2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f96a 	bl	8007ec4 <USBD_CtlError>
  }
}
 8007bf0:	bf00      	nop
 8007bf2:	bf00      	nop
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
	...

08007bfc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	885b      	ldrh	r3, [r3, #2]
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	4b41      	ldr	r3, [pc, #260]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c10:	4b40      	ldr	r3, [pc, #256]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d904      	bls.n	8007c22 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f952 	bl	8007ec4 <USBD_CtlError>
 8007c20:	e075      	b.n	8007d0e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d002      	beq.n	8007c32 <USBD_SetConfig+0x36>
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d023      	beq.n	8007c78 <USBD_SetConfig+0x7c>
 8007c30:	e062      	b.n	8007cf8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007c32:	4b38      	ldr	r3, [pc, #224]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d01a      	beq.n	8007c70 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007c3a:	4b36      	ldr	r3, [pc, #216]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2203      	movs	r2, #3
 8007c48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c4c:	4b31      	ldr	r3, [pc, #196]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	4619      	mov	r1, r3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f7ff f9e7 	bl	8007026 <USBD_SetClassConfig>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d104      	bne.n	8007c68 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f92f 	bl	8007ec4 <USBD_CtlError>
            return;
 8007c66:	e052      	b.n	8007d0e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f9f3 	bl	8008054 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c6e:	e04e      	b.n	8007d0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f9ef 	bl	8008054 <USBD_CtlSendStatus>
        break;
 8007c76:	e04a      	b.n	8007d0e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007c78:	4b26      	ldr	r3, [pc, #152]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d112      	bne.n	8007ca6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007c88:	4b22      	ldr	r3, [pc, #136]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007c92:	4b20      	ldr	r3, [pc, #128]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff f9e3 	bl	8007064 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f9d8 	bl	8008054 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ca4:	e033      	b.n	8007d0e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d01d      	beq.n	8007cf0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff f9d1 	bl	8007064 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007cc2:	4b14      	ldr	r3, [pc, #80]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ccc:	4b11      	ldr	r3, [pc, #68]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff f9a7 	bl	8007026 <USBD_SetClassConfig>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d104      	bne.n	8007ce8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f8ef 	bl	8007ec4 <USBD_CtlError>
            return;
 8007ce6:	e012      	b.n	8007d0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f9b3 	bl	8008054 <USBD_CtlSendStatus>
        break;
 8007cee:	e00e      	b.n	8007d0e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f9af 	bl	8008054 <USBD_CtlSendStatus>
        break;
 8007cf6:	e00a      	b.n	8007d0e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f8e2 	bl	8007ec4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d00:	4b04      	ldr	r3, [pc, #16]	@ (8007d14 <USBD_SetConfig+0x118>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff f9ac 	bl	8007064 <USBD_ClrClassConfig>
        break;
 8007d0c:	bf00      	nop
    }
  }
}
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20000234 	.word	0x20000234

08007d18 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	88db      	ldrh	r3, [r3, #6]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d004      	beq.n	8007d34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f8c9 	bl	8007ec4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d32:	e022      	b.n	8007d7a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	dc02      	bgt.n	8007d44 <USBD_GetConfig+0x2c>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	dc03      	bgt.n	8007d4a <USBD_GetConfig+0x32>
 8007d42:	e015      	b.n	8007d70 <USBD_GetConfig+0x58>
 8007d44:	2b03      	cmp	r3, #3
 8007d46:	d00b      	beq.n	8007d60 <USBD_GetConfig+0x48>
 8007d48:	e012      	b.n	8007d70 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3308      	adds	r3, #8
 8007d54:	2201      	movs	r2, #1
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f91d 	bl	8007f98 <USBD_CtlSendData>
        break;
 8007d5e:	e00c      	b.n	8007d7a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3304      	adds	r3, #4
 8007d64:	2201      	movs	r2, #1
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f915 	bl	8007f98 <USBD_CtlSendData>
        break;
 8007d6e:	e004      	b.n	8007d7a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f8a6 	bl	8007ec4 <USBD_CtlError>
        break;
 8007d78:	bf00      	nop
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d92:	3b01      	subs	r3, #1
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d81e      	bhi.n	8007dd6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	88db      	ldrh	r3, [r3, #6]
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d004      	beq.n	8007daa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f88e 	bl	8007ec4 <USBD_CtlError>
        break;
 8007da8:	e01a      	b.n	8007de0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d005      	beq.n	8007dc6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	f043 0202 	orr.w	r2, r3, #2
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	330c      	adds	r3, #12
 8007dca:	2202      	movs	r2, #2
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f8e2 	bl	8007f98 <USBD_CtlSendData>
      break;
 8007dd4:	e004      	b.n	8007de0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f873 	bl	8007ec4 <USBD_CtlError>
      break;
 8007dde:	bf00      	nop
  }
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	885b      	ldrh	r3, [r3, #2]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d106      	bne.n	8007e08 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f926 	bl	8008054 <USBD_CtlSendStatus>
  }
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e20:	3b01      	subs	r3, #1
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d80b      	bhi.n	8007e3e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	885b      	ldrh	r3, [r3, #2]
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d10c      	bne.n	8007e48 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f90c 	bl	8008054 <USBD_CtlSendStatus>
      }
      break;
 8007e3c:	e004      	b.n	8007e48 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f83f 	bl	8007ec4 <USBD_CtlError>
      break;
 8007e46:	e000      	b.n	8007e4a <USBD_ClrFeature+0x3a>
      break;
 8007e48:	bf00      	nop
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781a      	ldrb	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	785a      	ldrb	r2, [r3, #1]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	3302      	adds	r3, #2
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	3303      	adds	r3, #3
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	021b      	lsls	r3, r3, #8
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	4413      	add	r3, r2
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	3305      	adds	r3, #5
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	4413      	add	r3, r2
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	3306      	adds	r3, #6
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	3307      	adds	r3, #7
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	4413      	add	r3, r2
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	80da      	strh	r2, [r3, #6]

}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc80      	pop	{r7}
 8007ec2:	4770      	bx	lr

08007ec4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007ece:	2180      	movs	r1, #128	@ 0x80
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fc67 	bl	80087a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fc63 	bl	80087a4 <USBD_LL_StallEP>
}
 8007ede:	bf00      	nop
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b086      	sub	sp, #24
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d032      	beq.n	8007f62 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 f834 	bl	8007f6a <USBD_GetLen>
 8007f02:	4603      	mov	r3, r0
 8007f04:	3301      	adds	r3, #1
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	75fa      	strb	r2, [r7, #23]
 8007f16:	461a      	mov	r2, r3
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	7812      	ldrb	r2, [r2, #0]
 8007f20:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	75fa      	strb	r2, [r7, #23]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	2203      	movs	r2, #3
 8007f30:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007f32:	e012      	b.n	8007f5a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	60fa      	str	r2, [r7, #12]
 8007f3a:	7dfa      	ldrb	r2, [r7, #23]
 8007f3c:	1c51      	adds	r1, r2, #1
 8007f3e:	75f9      	strb	r1, [r7, #23]
 8007f40:	4611      	mov	r1, r2
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	440a      	add	r2, r1
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	75fa      	strb	r2, [r7, #23]
 8007f50:	461a      	mov	r2, r3
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	4413      	add	r3, r2
 8007f56:	2200      	movs	r2, #0
 8007f58:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e8      	bne.n	8007f34 <USBD_GetString+0x4e>
    }
  }
}
 8007f62:	bf00      	nop
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007f76:	e005      	b.n	8007f84 <USBD_GetLen+0x1a>
  {
    len++;
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3301      	adds	r3, #1
 8007f82:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1f5      	bne.n	8007f78 <USBD_GetLen+0xe>
  }

  return len;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bc80      	pop	{r7}
 8007f96:	4770      	bx	lr

08007f98 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007fae:	88fa      	ldrh	r2, [r7, #6]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007fb4:	88fa      	ldrh	r2, [r7, #6]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 fc77 	bl	80088b4 <USBD_LL_Transmit>

  return USBD_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fde:	88fb      	ldrh	r3, [r7, #6]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 fc65 	bl	80088b4 <USBD_LL_Transmit>

  return USBD_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4613      	mov	r3, r2
 8008000:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2203      	movs	r2, #3
 8008006:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800800a:	88fa      	ldrh	r2, [r7, #6]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008012:	88fa      	ldrh	r2, [r7, #6]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800801a:	88fb      	ldrh	r3, [r7, #6]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	2100      	movs	r1, #0
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 fc6a 	bl	80088fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	4613      	mov	r3, r2
 800803c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800803e:	88fb      	ldrh	r3, [r7, #6]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	2100      	movs	r1, #0
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 fc58 	bl	80088fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2204      	movs	r2, #4
 8008060:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008064:	2300      	movs	r3, #0
 8008066:	2200      	movs	r2, #0
 8008068:	2100      	movs	r1, #0
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fc22 	bl	80088b4 <USBD_LL_Transmit>

  return USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2205      	movs	r2, #5
 8008086:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800808a:	2300      	movs	r3, #0
 800808c:	2200      	movs	r2, #0
 800808e:	2100      	movs	r1, #0
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fc32 	bl	80088fa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080a4:	2200      	movs	r2, #0
 80080a6:	4912      	ldr	r1, [pc, #72]	@ (80080f0 <MX_USB_DEVICE_Init+0x50>)
 80080a8:	4812      	ldr	r0, [pc, #72]	@ (80080f4 <MX_USB_DEVICE_Init+0x54>)
 80080aa:	f7fe ff62 	bl	8006f72 <USBD_Init>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080b4:	f7f8 fa20 	bl	80004f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80080b8:	490f      	ldr	r1, [pc, #60]	@ (80080f8 <MX_USB_DEVICE_Init+0x58>)
 80080ba:	480e      	ldr	r0, [pc, #56]	@ (80080f4 <MX_USB_DEVICE_Init+0x54>)
 80080bc:	f7fe ff84 	bl	8006fc8 <USBD_RegisterClass>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080c6:	f7f8 fa17 	bl	80004f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80080ca:	490c      	ldr	r1, [pc, #48]	@ (80080fc <MX_USB_DEVICE_Init+0x5c>)
 80080cc:	4809      	ldr	r0, [pc, #36]	@ (80080f4 <MX_USB_DEVICE_Init+0x54>)
 80080ce:	f7fe feb5 	bl	8006e3c <USBD_CDC_RegisterInterface>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080d8:	f7f8 fa0e 	bl	80004f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080dc:	4805      	ldr	r0, [pc, #20]	@ (80080f4 <MX_USB_DEVICE_Init+0x54>)
 80080de:	f7fe ff8c 	bl	8006ffa <USBD_Start>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80080e8:	f7f8 fa06 	bl	80004f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080ec:	bf00      	nop
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	2000012c 	.word	0x2000012c
 80080f4:	20000238 	.word	0x20000238
 80080f8:	20000018 	.word	0x20000018
 80080fc:	2000011c 	.word	0x2000011c

08008100 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008104:	2200      	movs	r2, #0
 8008106:	4905      	ldr	r1, [pc, #20]	@ (800811c <CDC_Init_FS+0x1c>)
 8008108:	4805      	ldr	r0, [pc, #20]	@ (8008120 <CDC_Init_FS+0x20>)
 800810a:	f7fe fead 	bl	8006e68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800810e:	4905      	ldr	r1, [pc, #20]	@ (8008124 <CDC_Init_FS+0x24>)
 8008110:	4803      	ldr	r0, [pc, #12]	@ (8008120 <CDC_Init_FS+0x20>)
 8008112:	f7fe fec2 	bl	8006e9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008116:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008118:	4618      	mov	r0, r3
 800811a:	bd80      	pop	{r7, pc}
 800811c:	200008fc 	.word	0x200008fc
 8008120:	20000238 	.word	0x20000238
 8008124:	200004fc 	.word	0x200004fc

08008128 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008128:	b480      	push	{r7}
 800812a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800812c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800812e:	4618      	mov	r0, r3
 8008130:	46bd      	mov	sp, r7
 8008132:	bc80      	pop	{r7}
 8008134:	4770      	bx	lr
	...

08008138 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	6039      	str	r1, [r7, #0]
 8008142:	71fb      	strb	r3, [r7, #7]
 8008144:	4613      	mov	r3, r2
 8008146:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008148:	79fb      	ldrb	r3, [r7, #7]
 800814a:	2b23      	cmp	r3, #35	@ 0x23
 800814c:	d84a      	bhi.n	80081e4 <CDC_Control_FS+0xac>
 800814e:	a201      	add	r2, pc, #4	@ (adr r2, 8008154 <CDC_Control_FS+0x1c>)
 8008150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008154:	080081e5 	.word	0x080081e5
 8008158:	080081e5 	.word	0x080081e5
 800815c:	080081e5 	.word	0x080081e5
 8008160:	080081e5 	.word	0x080081e5
 8008164:	080081e5 	.word	0x080081e5
 8008168:	080081e5 	.word	0x080081e5
 800816c:	080081e5 	.word	0x080081e5
 8008170:	080081e5 	.word	0x080081e5
 8008174:	080081e5 	.word	0x080081e5
 8008178:	080081e5 	.word	0x080081e5
 800817c:	080081e5 	.word	0x080081e5
 8008180:	080081e5 	.word	0x080081e5
 8008184:	080081e5 	.word	0x080081e5
 8008188:	080081e5 	.word	0x080081e5
 800818c:	080081e5 	.word	0x080081e5
 8008190:	080081e5 	.word	0x080081e5
 8008194:	080081e5 	.word	0x080081e5
 8008198:	080081e5 	.word	0x080081e5
 800819c:	080081e5 	.word	0x080081e5
 80081a0:	080081e5 	.word	0x080081e5
 80081a4:	080081e5 	.word	0x080081e5
 80081a8:	080081e5 	.word	0x080081e5
 80081ac:	080081e5 	.word	0x080081e5
 80081b0:	080081e5 	.word	0x080081e5
 80081b4:	080081e5 	.word	0x080081e5
 80081b8:	080081e5 	.word	0x080081e5
 80081bc:	080081e5 	.word	0x080081e5
 80081c0:	080081e5 	.word	0x080081e5
 80081c4:	080081e5 	.word	0x080081e5
 80081c8:	080081e5 	.word	0x080081e5
 80081cc:	080081e5 	.word	0x080081e5
 80081d0:	080081e5 	.word	0x080081e5
 80081d4:	080081e5 	.word	0x080081e5
 80081d8:	080081e5 	.word	0x080081e5
 80081dc:	080081e5 	.word	0x080081e5
 80081e0:	080081e5 	.word	0x080081e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80081e4:	bf00      	nop
  }

  return (USBD_OK);
 80081e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bc80      	pop	{r7}
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop

080081f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  usb_ON_Receiving = true;
 80081fe:	4b09      	ldr	r3, [pc, #36]	@ (8008224 <CDC_Receive_FS+0x30>)
 8008200:	2201      	movs	r2, #1
 8008202:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	4808      	ldr	r0, [pc, #32]	@ (8008228 <CDC_Receive_FS+0x34>)
 8008208:	f7fe fe47 	bl	8006e9a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800820c:	4806      	ldr	r0, [pc, #24]	@ (8008228 <CDC_Receive_FS+0x34>)
 800820e:	f7fe fe86 	bl	8006f1e <USBD_CDC_ReceivePacket>
  usb_ON_Receiving = false;
 8008212:	4b04      	ldr	r3, [pc, #16]	@ (8008224 <CDC_Receive_FS+0x30>)
 8008214:	2200      	movs	r2, #0
 8008216:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8008218:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	20000cfc 	.word	0x20000cfc
 8008228:	20000238 	.word	0x20000238

0800822c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800823c:	4b0d      	ldr	r3, [pc, #52]	@ (8008274 <CDC_Transmit_FS+0x48>)
 800823e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008242:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800824e:	2301      	movs	r3, #1
 8008250:	e00b      	b.n	800826a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008252:	887b      	ldrh	r3, [r7, #2]
 8008254:	461a      	mov	r2, r3
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	4806      	ldr	r0, [pc, #24]	@ (8008274 <CDC_Transmit_FS+0x48>)
 800825a:	f7fe fe05 	bl	8006e68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800825e:	4805      	ldr	r0, [pc, #20]	@ (8008274 <CDC_Transmit_FS+0x48>)
 8008260:	f7fe fe2e 	bl	8006ec0 <USBD_CDC_TransmitPacket>
 8008264:	4603      	mov	r3, r0
 8008266:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000238 	.word	0x20000238

08008278 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	4603      	mov	r3, r0
 8008280:	6039      	str	r1, [r7, #0]
 8008282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2212      	movs	r2, #18
 8008288:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800828a:	4b03      	ldr	r3, [pc, #12]	@ (8008298 <USBD_FS_DeviceDescriptor+0x20>)
}
 800828c:	4618      	mov	r0, r3
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	bc80      	pop	{r7}
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	20000148 	.word	0x20000148

0800829c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	6039      	str	r1, [r7, #0]
 80082a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2204      	movs	r2, #4
 80082ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082ae:	4b03      	ldr	r3, [pc, #12]	@ (80082bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bc80      	pop	{r7}
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	2000015c 	.word	0x2000015c

080082c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	6039      	str	r1, [r7, #0]
 80082ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082cc:	79fb      	ldrb	r3, [r7, #7]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d105      	bne.n	80082de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	4907      	ldr	r1, [pc, #28]	@ (80082f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80082d6:	4808      	ldr	r0, [pc, #32]	@ (80082f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80082d8:	f7ff fe05 	bl	8007ee6 <USBD_GetString>
 80082dc:	e004      	b.n	80082e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	4904      	ldr	r1, [pc, #16]	@ (80082f4 <USBD_FS_ProductStrDescriptor+0x34>)
 80082e2:	4805      	ldr	r0, [pc, #20]	@ (80082f8 <USBD_FS_ProductStrDescriptor+0x38>)
 80082e4:	f7ff fdff 	bl	8007ee6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082e8:	4b02      	ldr	r3, [pc, #8]	@ (80082f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20000d00 	.word	0x20000d00
 80082f8:	08008a70 	.word	0x08008a70

080082fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	6039      	str	r1, [r7, #0]
 8008306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	4904      	ldr	r1, [pc, #16]	@ (800831c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800830c:	4804      	ldr	r0, [pc, #16]	@ (8008320 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800830e:	f7ff fdea 	bl	8007ee6 <USBD_GetString>
  return USBD_StrDesc;
 8008312:	4b02      	ldr	r3, [pc, #8]	@ (800831c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20000d00 	.word	0x20000d00
 8008320:	08008a7c 	.word	0x08008a7c

08008324 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	6039      	str	r1, [r7, #0]
 800832e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	221a      	movs	r2, #26
 8008334:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008336:	f000 f843 	bl	80083c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800833a:	4b02      	ldr	r3, [pc, #8]	@ (8008344 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20000160 	.word	0x20000160

08008348 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	6039      	str	r1, [r7, #0]
 8008352:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d105      	bne.n	8008366 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	4907      	ldr	r1, [pc, #28]	@ (800837c <USBD_FS_ConfigStrDescriptor+0x34>)
 800835e:	4808      	ldr	r0, [pc, #32]	@ (8008380 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008360:	f7ff fdc1 	bl	8007ee6 <USBD_GetString>
 8008364:	e004      	b.n	8008370 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	4904      	ldr	r1, [pc, #16]	@ (800837c <USBD_FS_ConfigStrDescriptor+0x34>)
 800836a:	4805      	ldr	r0, [pc, #20]	@ (8008380 <USBD_FS_ConfigStrDescriptor+0x38>)
 800836c:	f7ff fdbb 	bl	8007ee6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008370:	4b02      	ldr	r3, [pc, #8]	@ (800837c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000d00 	.word	0x20000d00
 8008380:	08008a8c 	.word	0x08008a8c

08008384 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	6039      	str	r1, [r7, #0]
 800838e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d105      	bne.n	80083a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	4907      	ldr	r1, [pc, #28]	@ (80083b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800839a:	4808      	ldr	r0, [pc, #32]	@ (80083bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800839c:	f7ff fda3 	bl	8007ee6 <USBD_GetString>
 80083a0:	e004      	b.n	80083ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	4904      	ldr	r1, [pc, #16]	@ (80083b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083a6:	4805      	ldr	r0, [pc, #20]	@ (80083bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083a8:	f7ff fd9d 	bl	8007ee6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083ac:	4b02      	ldr	r3, [pc, #8]	@ (80083b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20000d00 	.word	0x20000d00
 80083bc:	08008a98 	.word	0x08008a98

080083c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008404 <Get_SerialNum+0x44>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008408 <Get_SerialNum+0x48>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083d2:	4b0e      	ldr	r3, [pc, #56]	@ (800840c <Get_SerialNum+0x4c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4413      	add	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d009      	beq.n	80083fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083e6:	2208      	movs	r2, #8
 80083e8:	4909      	ldr	r1, [pc, #36]	@ (8008410 <Get_SerialNum+0x50>)
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 f814 	bl	8008418 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083f0:	2204      	movs	r2, #4
 80083f2:	4908      	ldr	r1, [pc, #32]	@ (8008414 <Get_SerialNum+0x54>)
 80083f4:	68b8      	ldr	r0, [r7, #8]
 80083f6:	f000 f80f 	bl	8008418 <IntToUnicode>
  }
}
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	1ffff7e8 	.word	0x1ffff7e8
 8008408:	1ffff7ec 	.word	0x1ffff7ec
 800840c:	1ffff7f0 	.word	0x1ffff7f0
 8008410:	20000162 	.word	0x20000162
 8008414:	20000172 	.word	0x20000172

08008418 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800842a:	2300      	movs	r3, #0
 800842c:	75fb      	strb	r3, [r7, #23]
 800842e:	e027      	b.n	8008480 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	0f1b      	lsrs	r3, r3, #28
 8008434:	2b09      	cmp	r3, #9
 8008436:	d80b      	bhi.n	8008450 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	0f1b      	lsrs	r3, r3, #28
 800843c:	b2da      	uxtb	r2, r3
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	005b      	lsls	r3, r3, #1
 8008442:	4619      	mov	r1, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	440b      	add	r3, r1
 8008448:	3230      	adds	r2, #48	@ 0x30
 800844a:	b2d2      	uxtb	r2, r2
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	e00a      	b.n	8008466 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	0f1b      	lsrs	r3, r3, #28
 8008454:	b2da      	uxtb	r2, r3
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	4619      	mov	r1, r3
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	440b      	add	r3, r1
 8008460:	3237      	adds	r2, #55	@ 0x37
 8008462:	b2d2      	uxtb	r2, r2
 8008464:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	011b      	lsls	r3, r3, #4
 800846a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	3301      	adds	r3, #1
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	4413      	add	r3, r2
 8008476:	2200      	movs	r2, #0
 8008478:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	3301      	adds	r3, #1
 800847e:	75fb      	strb	r3, [r7, #23]
 8008480:	7dfa      	ldrb	r2, [r7, #23]
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	429a      	cmp	r2, r3
 8008486:	d3d3      	bcc.n	8008430 <IntToUnicode+0x18>
  }
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	371c      	adds	r7, #28
 800848e:	46bd      	mov	sp, r7
 8008490:	bc80      	pop	{r7}
 8008492:	4770      	bx	lr

08008494 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a0d      	ldr	r2, [pc, #52]	@ (80084d8 <HAL_PCD_MspInit+0x44>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d113      	bne.n	80084ce <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80084a6:	4b0d      	ldr	r3, [pc, #52]	@ (80084dc <HAL_PCD_MspInit+0x48>)
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	4a0c      	ldr	r2, [pc, #48]	@ (80084dc <HAL_PCD_MspInit+0x48>)
 80084ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80084b0:	61d3      	str	r3, [r2, #28]
 80084b2:	4b0a      	ldr	r3, [pc, #40]	@ (80084dc <HAL_PCD_MspInit+0x48>)
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80084be:	2200      	movs	r2, #0
 80084c0:	2100      	movs	r1, #0
 80084c2:	2014      	movs	r0, #20
 80084c4:	f7f8 fa6b 	bl	800099e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80084c8:	2014      	movs	r0, #20
 80084ca:	f7f8 fa84 	bl	80009d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80084ce:	bf00      	nop
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	40005c00 	.word	0x40005c00
 80084dc:	40021000 	.word	0x40021000

080084e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80084f4:	4619      	mov	r1, r3
 80084f6:	4610      	mov	r0, r2
 80084f8:	f7fe fdc7 	bl	800708a <USBD_LL_SetupStage>
}
 80084fc:	bf00      	nop
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008516:	78fa      	ldrb	r2, [r7, #3]
 8008518:	6879      	ldr	r1, [r7, #4]
 800851a:	4613      	mov	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	440b      	add	r3, r1
 8008524:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	78fb      	ldrb	r3, [r7, #3]
 800852c:	4619      	mov	r1, r3
 800852e:	f7fe fdf9 	bl	8007124 <USBD_LL_DataOutStage>
}
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	460b      	mov	r3, r1
 8008544:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800854c:	78fa      	ldrb	r2, [r7, #3]
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	440b      	add	r3, r1
 800855a:	3324      	adds	r3, #36	@ 0x24
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	78fb      	ldrb	r3, [r7, #3]
 8008560:	4619      	mov	r1, r3
 8008562:	f7fe fe50 	bl	8007206 <USBD_LL_DataInStage>
}
 8008566:	bf00      	nop
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800857c:	4618      	mov	r0, r3
 800857e:	f7fe ff60 	bl	8007442 <USBD_LL_SOF>
}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008592:	2301      	movs	r3, #1
 8008594:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	799b      	ldrb	r3, [r3, #6]
 800859a:	2b02      	cmp	r3, #2
 800859c:	d001      	beq.n	80085a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800859e:	f7f7 ffab 	bl	80004f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085a8:	7bfa      	ldrb	r2, [r7, #15]
 80085aa:	4611      	mov	r1, r2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fe ff10 	bl	80073d2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe fec9 	bl	8007350 <USBD_LL_Reset>
}
 80085be:	bf00      	nop
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe ff0a 	bl	80073f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	7a9b      	ldrb	r3, [r3, #10]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085e4:	4b06      	ldr	r3, [pc, #24]	@ (8008600 <HAL_PCD_SuspendCallback+0x38>)
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	4a05      	ldr	r2, [pc, #20]	@ (8008600 <HAL_PCD_SuspendCallback+0x38>)
 80085ea:	f043 0306 	orr.w	r3, r3, #6
 80085ee:	6113      	str	r3, [r2, #16]
  }
  usb_IS_Connected = false;
 80085f0:	4b04      	ldr	r3, [pc, #16]	@ (8008604 <HAL_PCD_SuspendCallback+0x3c>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */
}
 80085f6:	bf00      	nop
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	e000ed00 	.word	0xe000ed00
 8008604:	20000f00 	.word	0x20000f00

08008608 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
	usb_IS_Connected = true;
 8008610:	4b06      	ldr	r3, [pc, #24]	@ (800862c <HAL_PCD_ResumeCallback+0x24>)
 8008612:	2201      	movs	r2, #1
 8008614:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800861c:	4618      	mov	r0, r3
 800861e:	f7fe fefb 	bl	8007418 <USBD_LL_Resume>
}
 8008622:	bf00      	nop
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20000f00 	.word	0x20000f00

08008630 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008638:	4a28      	ldr	r2, [pc, #160]	@ (80086dc <USBD_LL_Init+0xac>)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a26      	ldr	r2, [pc, #152]	@ (80086dc <USBD_LL_Init+0xac>)
 8008644:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008648:	4b24      	ldr	r3, [pc, #144]	@ (80086dc <USBD_LL_Init+0xac>)
 800864a:	4a25      	ldr	r2, [pc, #148]	@ (80086e0 <USBD_LL_Init+0xb0>)
 800864c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800864e:	4b23      	ldr	r3, [pc, #140]	@ (80086dc <USBD_LL_Init+0xac>)
 8008650:	2208      	movs	r2, #8
 8008652:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008654:	4b21      	ldr	r3, [pc, #132]	@ (80086dc <USBD_LL_Init+0xac>)
 8008656:	2202      	movs	r2, #2
 8008658:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800865a:	4b20      	ldr	r3, [pc, #128]	@ (80086dc <USBD_LL_Init+0xac>)
 800865c:	2200      	movs	r2, #0
 800865e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008660:	4b1e      	ldr	r3, [pc, #120]	@ (80086dc <USBD_LL_Init+0xac>)
 8008662:	2200      	movs	r2, #0
 8008664:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008666:	4b1d      	ldr	r3, [pc, #116]	@ (80086dc <USBD_LL_Init+0xac>)
 8008668:	2200      	movs	r2, #0
 800866a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800866c:	481b      	ldr	r0, [pc, #108]	@ (80086dc <USBD_LL_Init+0xac>)
 800866e:	f7f9 fc04 	bl	8001e7a <HAL_PCD_Init>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008678:	f7f7 ff3e 	bl	80004f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008682:	2318      	movs	r3, #24
 8008684:	2200      	movs	r2, #0
 8008686:	2100      	movs	r1, #0
 8008688:	f7fb f915 	bl	80038b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008692:	2358      	movs	r3, #88	@ 0x58
 8008694:	2200      	movs	r2, #0
 8008696:	2180      	movs	r1, #128	@ 0x80
 8008698:	f7fb f90d 	bl	80038b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086a2:	23c0      	movs	r3, #192	@ 0xc0
 80086a4:	2200      	movs	r2, #0
 80086a6:	2181      	movs	r1, #129	@ 0x81
 80086a8:	f7fb f905 	bl	80038b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086b2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80086b6:	2200      	movs	r2, #0
 80086b8:	2101      	movs	r1, #1
 80086ba:	f7fb f8fc 	bl	80038b6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80086c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80086c8:	2200      	movs	r2, #0
 80086ca:	2182      	movs	r1, #130	@ 0x82
 80086cc:	f7fb f8f3 	bl	80038b6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	20000f04 	.word	0x20000f04
 80086e0:	40005c00 	.word	0x40005c00

080086e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7f9 fcb3 	bl	8002066 <HAL_PCD_Start>
 8008700:	4603      	mov	r3, r0
 8008702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008704:	7bfb      	ldrb	r3, [r7, #15]
 8008706:	4618      	mov	r0, r3
 8008708:	f000 f94e 	bl	80089a8 <USBD_Get_USB_Status>
 800870c:	4603      	mov	r3, r0
 800870e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008710:	7bbb      	ldrb	r3, [r7, #14]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	4608      	mov	r0, r1
 8008724:	4611      	mov	r1, r2
 8008726:	461a      	mov	r2, r3
 8008728:	4603      	mov	r3, r0
 800872a:	70fb      	strb	r3, [r7, #3]
 800872c:	460b      	mov	r3, r1
 800872e:	70bb      	strb	r3, [r7, #2]
 8008730:	4613      	mov	r3, r2
 8008732:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008742:	78bb      	ldrb	r3, [r7, #2]
 8008744:	883a      	ldrh	r2, [r7, #0]
 8008746:	78f9      	ldrb	r1, [r7, #3]
 8008748:	f7f9 fe07 	bl	800235a <HAL_PCD_EP_Open>
 800874c:	4603      	mov	r3, r0
 800874e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	4618      	mov	r0, r3
 8008754:	f000 f928 	bl	80089a8 <USBD_Get_USB_Status>
 8008758:	4603      	mov	r3, r0
 800875a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800875c:	7bbb      	ldrb	r3, [r7, #14]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	460b      	mov	r3, r1
 8008770:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008780:	78fa      	ldrb	r2, [r7, #3]
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f7f9 fe45 	bl	8002414 <HAL_PCD_EP_Close>
 800878a:	4603      	mov	r3, r0
 800878c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 f909 	bl	80089a8 <USBD_Get_USB_Status>
 8008796:	4603      	mov	r3, r0
 8008798:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800879a:	7bbb      	ldrb	r3, [r7, #14]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087be:	78fa      	ldrb	r2, [r7, #3]
 80087c0:	4611      	mov	r1, r2
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7f9 feed 	bl	80025a2 <HAL_PCD_EP_SetStall>
 80087c8:	4603      	mov	r3, r0
 80087ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 f8ea 	bl	80089a8 <USBD_Get_USB_Status>
 80087d4:	4603      	mov	r3, r0
 80087d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b084      	sub	sp, #16
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	460b      	mov	r3, r1
 80087ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087fc:	78fa      	ldrb	r2, [r7, #3]
 80087fe:	4611      	mov	r1, r2
 8008800:	4618      	mov	r0, r3
 8008802:	f7f9 ff2e 	bl	8002662 <HAL_PCD_EP_ClrStall>
 8008806:	4603      	mov	r3, r0
 8008808:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	4618      	mov	r0, r3
 800880e:	f000 f8cb 	bl	80089a8 <USBD_Get_USB_Status>
 8008812:	4603      	mov	r3, r0
 8008814:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008816:	7bbb      	ldrb	r3, [r7, #14]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008832:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008838:	2b00      	cmp	r3, #0
 800883a:	da0b      	bge.n	8008854 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008842:	68f9      	ldr	r1, [r7, #12]
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	440b      	add	r3, r1
 800884e:	3312      	adds	r3, #18
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	e00b      	b.n	800886c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800885a:	68f9      	ldr	r1, [r7, #12]
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	440b      	add	r3, r1
 8008866:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800886a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	bc80      	pop	{r7}
 8008874:	4770      	bx	lr

08008876 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008890:	78fa      	ldrb	r2, [r7, #3]
 8008892:	4611      	mov	r1, r2
 8008894:	4618      	mov	r0, r3
 8008896:	f7f9 fd3c 	bl	8002312 <HAL_PCD_SetAddress>
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f000 f881 	bl	80089a8 <USBD_Get_USB_Status>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	607a      	str	r2, [r7, #4]
 80088be:	461a      	mov	r2, r3
 80088c0:	460b      	mov	r3, r1
 80088c2:	72fb      	strb	r3, [r7, #11]
 80088c4:	4613      	mov	r3, r2
 80088c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80088d6:	893b      	ldrh	r3, [r7, #8]
 80088d8:	7af9      	ldrb	r1, [r7, #11]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	f7f9 fe2a 	bl	8002534 <HAL_PCD_EP_Transmit>
 80088e0:	4603      	mov	r3, r0
 80088e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 f85e 	bl	80089a8 <USBD_Get_USB_Status>
 80088ec:	4603      	mov	r3, r0
 80088ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b086      	sub	sp, #24
 80088fe:	af00      	add	r7, sp, #0
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	461a      	mov	r2, r3
 8008906:	460b      	mov	r3, r1
 8008908:	72fb      	strb	r3, [r7, #11]
 800890a:	4613      	mov	r3, r2
 800890c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800891c:	893b      	ldrh	r3, [r7, #8]
 800891e:	7af9      	ldrb	r1, [r7, #11]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	f7f9 fdbf 	bl	80024a4 <HAL_PCD_EP_Receive>
 8008926:	4603      	mov	r3, r0
 8008928:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800892a:	7dfb      	ldrb	r3, [r7, #23]
 800892c:	4618      	mov	r0, r3
 800892e:	f000 f83b 	bl	80089a8 <USBD_Get_USB_Status>
 8008932:	4603      	mov	r3, r0
 8008934:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008936:	7dbb      	ldrb	r3, [r7, #22]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008952:	78fa      	ldrb	r2, [r7, #3]
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f7f9 fdd5 	bl	8002506 <HAL_PCD_EP_GetRxCount>
 800895c:	4603      	mov	r3, r0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008970:	4b02      	ldr	r3, [pc, #8]	@ (800897c <USBD_static_malloc+0x14>)
}
 8008972:	4618      	mov	r0, r3
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	bc80      	pop	{r7}
 800897a:	4770      	bx	lr
 800897c:	200011dc 	.word	0x200011dc

08008980 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]

}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	bc80      	pop	{r7}
 8008990:	4770      	bx	lr

08008992 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	460b      	mov	r3, r1
 800899c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800899e:	bf00      	nop
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bc80      	pop	{r7}
 80089a6:	4770      	bx	lr

080089a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	4603      	mov	r3, r0
 80089b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	2b03      	cmp	r3, #3
 80089ba:	d817      	bhi.n	80089ec <USBD_Get_USB_Status+0x44>
 80089bc:	a201      	add	r2, pc, #4	@ (adr r2, 80089c4 <USBD_Get_USB_Status+0x1c>)
 80089be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c2:	bf00      	nop
 80089c4:	080089d5 	.word	0x080089d5
 80089c8:	080089db 	.word	0x080089db
 80089cc:	080089e1 	.word	0x080089e1
 80089d0:	080089e7 	.word	0x080089e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73fb      	strb	r3, [r7, #15]
    break;
 80089d8:	e00b      	b.n	80089f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089da:	2302      	movs	r3, #2
 80089dc:	73fb      	strb	r3, [r7, #15]
    break;
 80089de:	e008      	b.n	80089f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089e0:	2301      	movs	r3, #1
 80089e2:	73fb      	strb	r3, [r7, #15]
    break;
 80089e4:	e005      	b.n	80089f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089e6:	2302      	movs	r3, #2
 80089e8:	73fb      	strb	r3, [r7, #15]
    break;
 80089ea:	e002      	b.n	80089f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089ec:	2302      	movs	r3, #2
 80089ee:	73fb      	strb	r3, [r7, #15]
    break;
 80089f0:	bf00      	nop
  }
  return usb_status;
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bc80      	pop	{r7}
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop

08008a00 <memset>:
 8008a00:	4603      	mov	r3, r0
 8008a02:	4402      	add	r2, r0
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d100      	bne.n	8008a0a <memset+0xa>
 8008a08:	4770      	bx	lr
 8008a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a0e:	e7f9      	b.n	8008a04 <memset+0x4>

08008a10 <__libc_init_array>:
 8008a10:	b570      	push	{r4, r5, r6, lr}
 8008a12:	2600      	movs	r6, #0
 8008a14:	4d0c      	ldr	r5, [pc, #48]	@ (8008a48 <__libc_init_array+0x38>)
 8008a16:	4c0d      	ldr	r4, [pc, #52]	@ (8008a4c <__libc_init_array+0x3c>)
 8008a18:	1b64      	subs	r4, r4, r5
 8008a1a:	10a4      	asrs	r4, r4, #2
 8008a1c:	42a6      	cmp	r6, r4
 8008a1e:	d109      	bne.n	8008a34 <__libc_init_array+0x24>
 8008a20:	f000 f81a 	bl	8008a58 <_init>
 8008a24:	2600      	movs	r6, #0
 8008a26:	4d0a      	ldr	r5, [pc, #40]	@ (8008a50 <__libc_init_array+0x40>)
 8008a28:	4c0a      	ldr	r4, [pc, #40]	@ (8008a54 <__libc_init_array+0x44>)
 8008a2a:	1b64      	subs	r4, r4, r5
 8008a2c:	10a4      	asrs	r4, r4, #2
 8008a2e:	42a6      	cmp	r6, r4
 8008a30:	d105      	bne.n	8008a3e <__libc_init_array+0x2e>
 8008a32:	bd70      	pop	{r4, r5, r6, pc}
 8008a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a38:	4798      	blx	r3
 8008a3a:	3601      	adds	r6, #1
 8008a3c:	e7ee      	b.n	8008a1c <__libc_init_array+0xc>
 8008a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a42:	4798      	blx	r3
 8008a44:	3601      	adds	r6, #1
 8008a46:	e7f2      	b.n	8008a2e <__libc_init_array+0x1e>
 8008a48:	08008ad4 	.word	0x08008ad4
 8008a4c:	08008ad4 	.word	0x08008ad4
 8008a50:	08008ad4 	.word	0x08008ad4
 8008a54:	08008ad8 	.word	0x08008ad8

08008a58 <_init>:
 8008a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5a:	bf00      	nop
 8008a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5e:	bc08      	pop	{r3}
 8008a60:	469e      	mov	lr, r3
 8008a62:	4770      	bx	lr

08008a64 <_fini>:
 8008a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a66:	bf00      	nop
 8008a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6a:	bc08      	pop	{r3}
 8008a6c:	469e      	mov	lr, r3
 8008a6e:	4770      	bx	lr
