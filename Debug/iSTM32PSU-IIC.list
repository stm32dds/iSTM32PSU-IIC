
iSTM32PSU-IIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080088e0  080088e0  000098e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008954  08008954  0000a17c  2**0
                  CONTENTS
  4 .ARM          00000000  08008954  08008954  0000a17c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008954  08008954  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008954  08008954  00009954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008958  08008958  00009958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800895c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001278  2000017c  08008ad8  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013f4  08008ad8  0000a3f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4bc  00000000  00000000  0000a1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f02  00000000  00000000  00019661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  0001c568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a31  00000000  00000000  0001d300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b03  00000000  00000000  0001dd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001309d  00000000  00000000  00037834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087222  00000000  00000000  0004a8d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1af3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000364c  00000000  00000000  000d1b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d5184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	080088c8 	.word	0x080088c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	080088c8 	.word	0x080088c8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa69 	bl	8000628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f87d 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f917 	bl	800038c <MX_GPIO_Init>
  MX_CRC_Init();
 800015e:	f000 f8d3 	bl	8000308 <MX_CRC_Init>
  MX_I2C1_Init();
 8000162:	f000 f8e5 	bl	8000330 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000166:	f007 ff0d 	bl	8007f84 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800016a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800016e:	482c      	ldr	r0, [pc, #176]	@ (8000220 <main+0xd4>)
 8000170:	f000 fdd8 	bl	8000d24 <HAL_GPIO_TogglePin>
	 masterTxBuf[0]=(uint8_t)on_off;
 8000174:	4b2b      	ldr	r3, [pc, #172]	@ (8000224 <main+0xd8>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	461a      	mov	r2, r3
 800017a:	4b2b      	ldr	r3, [pc, #172]	@ (8000228 <main+0xdc>)
 800017c:	701a      	strb	r2, [r3, #0]
	 memcpy(&masterTxBuf[1], &uSP, sizeof(uSP));
 800017e:	4b2b      	ldr	r3, [pc, #172]	@ (800022c <main+0xe0>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4a29      	ldr	r2, [pc, #164]	@ (8000228 <main+0xdc>)
 8000184:	f8c2 3001 	str.w	r3, [r2, #1]
	 memcpy(&masterTxBuf[5], &iSP, sizeof(iSP));
 8000188:	4b29      	ldr	r3, [pc, #164]	@ (8000230 <main+0xe4>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a26      	ldr	r2, [pc, #152]	@ (8000228 <main+0xdc>)
 800018e:	f8c2 3005 	str.w	r3, [r2, #5]
	 tempCRC = HAL_CRC_Calculate(&hcrc,(uint32_t *)masterTxBuf, (I2C_BUFF_LEN/4)-1);
 8000192:	2203      	movs	r2, #3
 8000194:	4924      	ldr	r1, [pc, #144]	@ (8000228 <main+0xdc>)
 8000196:	4827      	ldr	r0, [pc, #156]	@ (8000234 <main+0xe8>)
 8000198:	f000 fbf5 	bl	8000986 <HAL_CRC_Calculate>
 800019c:	4603      	mov	r3, r0
 800019e:	4a26      	ldr	r2, [pc, #152]	@ (8000238 <main+0xec>)
 80001a0:	6013      	str	r3, [r2, #0]
	 memcpy(&masterTxBuf[I2C_BUFF_LEN-4],&tempCRC,sizeof(tempCRC));
 80001a2:	4b25      	ldr	r3, [pc, #148]	@ (8000238 <main+0xec>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4a20      	ldr	r2, [pc, #128]	@ (8000228 <main+0xdc>)
 80001a8:	60d3      	str	r3, [r2, #12]
	 HAL_I2C_Master_Transmit(&hi2c1, (I2C_SLAVE_ADDRESS << 1),
 80001aa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80001ae:	9300      	str	r3, [sp, #0]
 80001b0:	2310      	movs	r3, #16
 80001b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000228 <main+0xdc>)
 80001b4:	215a      	movs	r1, #90	@ 0x5a
 80001b6:	4821      	ldr	r0, [pc, #132]	@ (800023c <main+0xf0>)
 80001b8:	f000 ff12 	bl	8000fe0 <HAL_I2C_Master_Transmit>
				  	  	  	  	  	  	  (uint8_t*) &masterTxBuf, I2C_BUFF_LEN, 500);
	 HAL_Delay(50);
 80001bc:	2032      	movs	r0, #50	@ 0x32
 80001be:	f000 fa95 	bl	80006ec <HAL_Delay>
	 HAL_I2C_Master_Receive(&hi2c1, (I2C_SLAVE_ADDRESS << 1),
 80001c2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80001c6:	9300      	str	r3, [sp, #0]
 80001c8:	2310      	movs	r3, #16
 80001ca:	4a1d      	ldr	r2, [pc, #116]	@ (8000240 <main+0xf4>)
 80001cc:	215a      	movs	r1, #90	@ 0x5a
 80001ce:	481b      	ldr	r0, [pc, #108]	@ (800023c <main+0xf0>)
 80001d0:	f001 f804 	bl	80011dc <HAL_I2C_Master_Receive>
			 	 	 	 	 	 	 	  (uint8_t*) &masterRxBuf, I2C_BUFF_LEN, 500);
	 memcpy(&on_off_slave_state, &masterRxBuf[0], sizeof(on_off_slave_state));
 80001d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000240 <main+0xf4>)
 80001d6:	781a      	ldrb	r2, [r3, #0]
 80001d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000244 <main+0xf8>)
 80001da:	701a      	strb	r2, [r3, #0]
	 memcpy(&outU, &masterRxBuf[1], sizeof(outU));
 80001dc:	4b18      	ldr	r3, [pc, #96]	@ (8000240 <main+0xf4>)
 80001de:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80001e2:	461a      	mov	r2, r3
 80001e4:	4b18      	ldr	r3, [pc, #96]	@ (8000248 <main+0xfc>)
 80001e6:	601a      	str	r2, [r3, #0]
	 memcpy(&outI, &masterRxBuf[5], sizeof(outI));
 80001e8:	4b15      	ldr	r3, [pc, #84]	@ (8000240 <main+0xf4>)
 80001ea:	f8d3 3005 	ldr.w	r3, [r3, #5]
 80001ee:	461a      	mov	r2, r3
 80001f0:	4b16      	ldr	r3, [pc, #88]	@ (800024c <main+0x100>)
 80001f2:	601a      	str	r2, [r3, #0]
	 memcpy(&tempCRC, &masterRxBuf[I2C_BUFF_LEN-4], sizeof(tempCRC));
 80001f4:	4b12      	ldr	r3, [pc, #72]	@ (8000240 <main+0xf4>)
 80001f6:	68db      	ldr	r3, [r3, #12]
 80001f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000238 <main+0xec>)
 80001fa:	6013      	str	r3, [r2, #0]
	 if(tempCRC == HAL_CRC_Calculate(&hcrc,(uint32_t *)masterRxBuf, (I2C_BUFF_LEN/4)-1))
 80001fc:	2203      	movs	r2, #3
 80001fe:	4910      	ldr	r1, [pc, #64]	@ (8000240 <main+0xf4>)
 8000200:	480c      	ldr	r0, [pc, #48]	@ (8000234 <main+0xe8>)
 8000202:	f000 fbc0 	bl	8000986 <HAL_CRC_Calculate>
 8000206:	4602      	mov	r2, r0
 8000208:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <main+0xec>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	429a      	cmp	r2, r3
 800020e:	d103      	bne.n	8000218 <main+0xcc>
		 	i2cError = false;
 8000210:	4b0f      	ldr	r3, [pc, #60]	@ (8000250 <main+0x104>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
 8000216:	e7a8      	b.n	800016a <main+0x1e>
	 else 	i2cError = true;
 8000218:	4b0d      	ldr	r3, [pc, #52]	@ (8000250 <main+0x104>)
 800021a:	2201      	movs	r2, #1
 800021c:	701a      	strb	r2, [r3, #0]
	 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800021e:	e7a4      	b.n	800016a <main+0x1e>
 8000220:	40011000 	.word	0x40011000
 8000224:	20000224 	.word	0x20000224
 8000228:	200001f4 	.word	0x200001f4
 800022c:	20000214 	.word	0x20000214
 8000230:	20000218 	.word	0x20000218
 8000234:	20000198 	.word	0x20000198
 8000238:	20000228 	.word	0x20000228
 800023c:	200001a0 	.word	0x200001a0
 8000240:	20000204 	.word	0x20000204
 8000244:	20000225 	.word	0x20000225
 8000248:	2000021c 	.word	0x2000021c
 800024c:	20000220 	.word	0x20000220
 8000250:	2000022c 	.word	0x2000022c

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b094      	sub	sp, #80	@ 0x50
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800025e:	2228      	movs	r2, #40	@ 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f008 fb04 	bl	8008870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	f107 0314 	add.w	r3, r7, #20
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	605a      	str	r2, [r3, #4]
 8000272:	609a      	str	r2, [r3, #8]
 8000274:	60da      	str	r2, [r3, #12]
 8000276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000284:	2301      	movs	r3, #1
 8000286:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800028c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000292:	2301      	movs	r3, #1
 8000294:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	2302      	movs	r3, #2
 8000298:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800029e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002aa:	4618      	mov	r0, r3
 80002ac:	f003 fae8 	bl	8003880 <HAL_RCC_OscConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002b6:	f000 f8c1 	bl	800043c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	230f      	movs	r3, #15
 80002bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002be:	2302      	movs	r3, #2
 80002c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	2102      	movs	r1, #2
 80002d6:	4618      	mov	r0, r3
 80002d8:	f003 fd54 	bl	8003d84 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002e2:	f000 f8ab 	bl	800043c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002e6:	2310      	movs	r3, #16
 80002e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002ea:	2300      	movs	r3, #0
 80002ec:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4618      	mov	r0, r3
 80002f2:	f003 fec1 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002fc:	f000 f89e 	bl	800043c <Error_Handler>
  }
}
 8000300:	bf00      	nop
 8000302:	3750      	adds	r7, #80	@ 0x50
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}

08000308 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <MX_CRC_Init+0x20>)
 800030e:	4a07      	ldr	r2, [pc, #28]	@ (800032c <MX_CRC_Init+0x24>)
 8000310:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000312:	4805      	ldr	r0, [pc, #20]	@ (8000328 <MX_CRC_Init+0x20>)
 8000314:	f000 fb1b 	bl	800094e <HAL_CRC_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800031e:	f000 f88d 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000198 	.word	0x20000198
 800032c:	40023000 	.word	0x40023000

08000330 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000334:	4b12      	ldr	r3, [pc, #72]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000336:	4a13      	ldr	r2, [pc, #76]	@ (8000384 <MX_I2C1_Init+0x54>)
 8000338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800033a:	4b11      	ldr	r3, [pc, #68]	@ (8000380 <MX_I2C1_Init+0x50>)
 800033c:	4a12      	ldr	r2, [pc, #72]	@ (8000388 <MX_I2C1_Init+0x58>)
 800033e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000340:	4b0f      	ldr	r3, [pc, #60]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000346:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034c:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <MX_I2C1_Init+0x50>)
 800034e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000354:	4b0a      	ldr	r3, [pc, #40]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800035a:	4b09      	ldr	r3, [pc, #36]	@ (8000380 <MX_I2C1_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000360:	4b07      	ldr	r3, [pc, #28]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000366:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036c:	4804      	ldr	r0, [pc, #16]	@ (8000380 <MX_I2C1_Init+0x50>)
 800036e:	f000 fcf3 	bl	8000d58 <HAL_I2C_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000378:	f000 f860 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	200001a0 	.word	0x200001a0
 8000384:	40005400 	.word	0x40005400
 8000388:	000186a0 	.word	0x000186a0

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a0:	4b24      	ldr	r3, [pc, #144]	@ (8000434 <MX_GPIO_Init+0xa8>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a23      	ldr	r2, [pc, #140]	@ (8000434 <MX_GPIO_Init+0xa8>)
 80003a6:	f043 0310 	orr.w	r3, r3, #16
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b21      	ldr	r3, [pc, #132]	@ (8000434 <MX_GPIO_Init+0xa8>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0310 	and.w	r3, r3, #16
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <MX_GPIO_Init+0xa8>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000434 <MX_GPIO_Init+0xa8>)
 80003be:	f043 0320 	orr.w	r3, r3, #32
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000434 <MX_GPIO_Init+0xa8>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0320 	and.w	r3, r3, #32
 80003cc:	60bb      	str	r3, [r7, #8]
 80003ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d0:	4b18      	ldr	r3, [pc, #96]	@ (8000434 <MX_GPIO_Init+0xa8>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a17      	ldr	r2, [pc, #92]	@ (8000434 <MX_GPIO_Init+0xa8>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b15      	ldr	r3, [pc, #84]	@ (8000434 <MX_GPIO_Init+0xa8>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0304 	and.w	r3, r3, #4
 80003e4:	607b      	str	r3, [r7, #4]
 80003e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e8:	4b12      	ldr	r3, [pc, #72]	@ (8000434 <MX_GPIO_Init+0xa8>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a11      	ldr	r2, [pc, #68]	@ (8000434 <MX_GPIO_Init+0xa8>)
 80003ee:	f043 0308 	orr.w	r3, r3, #8
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <MX_GPIO_Init+0xa8>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0308 	and.w	r3, r3, #8
 80003fc:	603b      	str	r3, [r7, #0]
 80003fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000406:	480c      	ldr	r0, [pc, #48]	@ (8000438 <MX_GPIO_Init+0xac>)
 8000408:	f000 fc74 	bl	8000cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800040c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000412:	2311      	movs	r3, #17
 8000414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2302      	movs	r3, #2
 800041c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	4619      	mov	r1, r3
 8000424:	4804      	ldr	r0, [pc, #16]	@ (8000438 <MX_GPIO_Init+0xac>)
 8000426:	f000 fae1 	bl	80009ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800042a:	bf00      	nop
 800042c:	3720      	adds	r7, #32
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000
 8000438:	40011000 	.word	0x40011000

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <Error_Handler+0x8>

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a14      	ldr	r2, [pc, #80]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b12      	ldr	r3, [pc, #72]	@ (80004a4 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a0e      	ldr	r2, [pc, #56]	@ (80004a4 <HAL_MspInit+0x5c>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800047e:	4b0a      	ldr	r3, [pc, #40]	@ (80004a8 <HAL_MspInit+0x60>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	4a04      	ldr	r2, [pc, #16]	@ (80004a8 <HAL_MspInit+0x60>)
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010000 	.word	0x40010000

080004ac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a09      	ldr	r2, [pc, #36]	@ (80004e0 <HAL_CRC_MspInit+0x34>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d10b      	bne.n	80004d6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80004be:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <HAL_CRC_MspInit+0x38>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a08      	ldr	r2, [pc, #32]	@ (80004e4 <HAL_CRC_MspInit+0x38>)
 80004c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <HAL_CRC_MspInit+0x38>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40023000 	.word	0x40023000
 80004e4:	40021000 	.word	0x40021000

080004e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a15      	ldr	r2, [pc, #84]	@ (8000558 <HAL_I2C_MspInit+0x70>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d123      	bne.n	8000550 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000508:	4b14      	ldr	r3, [pc, #80]	@ (800055c <HAL_I2C_MspInit+0x74>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a13      	ldr	r2, [pc, #76]	@ (800055c <HAL_I2C_MspInit+0x74>)
 800050e:	f043 0308 	orr.w	r3, r3, #8
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b11      	ldr	r3, [pc, #68]	@ (800055c <HAL_I2C_MspInit+0x74>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0308 	and.w	r3, r3, #8
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000520:	23c0      	movs	r3, #192	@ 0xc0
 8000522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000524:	2312      	movs	r3, #18
 8000526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000528:	2303      	movs	r3, #3
 800052a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	480b      	ldr	r0, [pc, #44]	@ (8000560 <HAL_I2C_MspInit+0x78>)
 8000534:	f000 fa5a 	bl	80009ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000538:	4b08      	ldr	r3, [pc, #32]	@ (800055c <HAL_I2C_MspInit+0x74>)
 800053a:	69db      	ldr	r3, [r3, #28]
 800053c:	4a07      	ldr	r2, [pc, #28]	@ (800055c <HAL_I2C_MspInit+0x74>)
 800053e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000542:	61d3      	str	r3, [r2, #28]
 8000544:	4b05      	ldr	r3, [pc, #20]	@ (800055c <HAL_I2C_MspInit+0x74>)
 8000546:	69db      	ldr	r3, [r3, #28]
 8000548:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000550:	bf00      	nop
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40005400 	.word	0x40005400
 800055c:	40021000 	.word	0x40021000
 8000560:	40010c00 	.word	0x40010c00

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <NMI_Handler+0x4>

0800056c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <HardFault_Handler+0x4>

08000574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <MemManage_Handler+0x4>

0800057c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <BusFault_Handler+0x4>

08000584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <UsageFault_Handler+0x4>

0800058c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b4:	f000 f87e 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005c2:	f001 fd18 	bl	8001ff6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000efc 	.word	0x20000efc

080005d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005dc:	f7ff fff8 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e0:	480b      	ldr	r0, [pc, #44]	@ (8000610 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005e2:	490c      	ldr	r1, [pc, #48]	@ (8000614 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e8:	e002      	b.n	80005f0 <LoopCopyDataInit>

080005ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ee:	3304      	adds	r3, #4

080005f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f4:	d3f9      	bcc.n	80005ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f6:	4a09      	ldr	r2, [pc, #36]	@ (800061c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005f8:	4c09      	ldr	r4, [pc, #36]	@ (8000620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005fc:	e001      	b.n	8000602 <LoopFillZerobss>

080005fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000600:	3204      	adds	r2, #4

08000602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000604:	d3fb      	bcc.n	80005fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000606:	f008 f93b 	bl	8008880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060a:	f7ff fd9f 	bl	800014c <main>
  bx lr
 800060e:	4770      	bx	lr
  ldr r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000614:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000618:	0800895c 	.word	0x0800895c
  ldr r2, =_sbss
 800061c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000620:	200013f4 	.word	0x200013f4

08000624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC1_2_IRQHandler>
	...

08000628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800062c:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <HAL_Init+0x28>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a07      	ldr	r2, [pc, #28]	@ (8000650 <HAL_Init+0x28>)
 8000632:	f043 0310 	orr.w	r3, r3, #16
 8000636:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000638:	2003      	movs	r0, #3
 800063a:	f000 f947 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800063e:	200f      	movs	r0, #15
 8000640:	f000 f808 	bl	8000654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000644:	f7ff ff00 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40022000 	.word	0x40022000

08000654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800065c:	4b12      	ldr	r3, [pc, #72]	@ (80006a8 <HAL_InitTick+0x54>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <HAL_InitTick+0x58>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f95f 	bl	8000936 <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f000 f927 	bl	80008e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	@ (80006b0 <HAL_InitTick+0x5c>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000008 	.word	0x20000008
 80006b0:	20000004 	.word	0x20000004

080006b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b8:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <HAL_IncTick+0x1c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <HAL_IncTick+0x20>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a03      	ldr	r2, [pc, #12]	@ (80006d4 <HAL_IncTick+0x20>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000230 	.word	0x20000230

080006d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;
 80006dc:	4b02      	ldr	r3, [pc, #8]	@ (80006e8 <HAL_GetTick+0x10>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	20000230 	.word	0x20000230

080006ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f4:	f7ff fff0 	bl	80006d8 <HAL_GetTick>
 80006f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000704:	d005      	beq.n	8000712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000706:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <HAL_Delay+0x44>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	461a      	mov	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	4413      	add	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000712:	bf00      	nop
 8000714:	f7ff ffe0 	bl	80006d8 <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	429a      	cmp	r2, r3
 8000722:	d8f7      	bhi.n	8000714 <HAL_Delay+0x28>
  {
  }
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000008 	.word	0x20000008

08000734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800075c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000766:	4a04      	ldr	r2, [pc, #16]	@ (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	60d3      	str	r3, [r2, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000780:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <__NVIC_GetPriorityGrouping+0x18>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	f003 0307 	and.w	r3, r3, #7
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	db0b      	blt.n	80007c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f003 021f 	and.w	r2, r3, #31
 80007b0:	4906      	ldr	r1, [pc, #24]	@ (80007cc <__NVIC_EnableIRQ+0x34>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	095b      	lsrs	r3, r3, #5
 80007b8:	2001      	movs	r0, #1
 80007ba:	fa00 f202 	lsl.w	r2, r0, r2
 80007be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	@ (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	@ (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0112      	lsls	r2, r2, #4
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	@ 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f1c3 0307 	rsb	r3, r3, #7
 800083e:	2b04      	cmp	r3, #4
 8000840:	bf28      	it	cs
 8000842:	2304      	movcs	r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3304      	adds	r3, #4
 800084a:	2b06      	cmp	r3, #6
 800084c:	d902      	bls.n	8000854 <NVIC_EncodePriority+0x30>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3b03      	subs	r3, #3
 8000852:	e000      	b.n	8000856 <NVIC_EncodePriority+0x32>
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43da      	mvns	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	401a      	ands	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43d9      	mvns	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	4313      	orrs	r3, r2
         );
}
 800087e:	4618      	mov	r0, r3
 8000880:	3724      	adds	r7, #36	@ 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000898:	d301      	bcc.n	800089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2301      	movs	r3, #1
 800089c:	e00f      	b.n	80008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <SysTick_Config+0x40>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a6:	210f      	movs	r1, #15
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f7ff ff90 	bl	80007d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <SysTick_Config+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <SysTick_Config+0x40>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff2d 	bl	8000734 <__NVIC_SetPriorityGrouping>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f4:	f7ff ff42 	bl	800077c <__NVIC_GetPriorityGrouping>
 80008f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f7ff ff90 	bl	8000824 <NVIC_EncodePriority>
 8000904:	4602      	mov	r2, r0
 8000906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff5f 	bl	80007d0 <__NVIC_SetPriority>
}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff35 	bl	8000798 <__NVIC_EnableIRQ>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ffa2 	bl	8000888 <SysTick_Config>
 8000944:	4603      	mov	r3, r0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d101      	bne.n	8000960 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	e00e      	b.n	800097e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d105      	bne.n	8000976 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff fd9b 	bl	80004ac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2201      	movs	r2, #1
 800097a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000986:	b480      	push	{r7}
 8000988:	b087      	sub	sp, #28
 800098a:	af00      	add	r7, sp, #0
 800098c:	60f8      	str	r0, [r7, #12]
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2202      	movs	r2, #2
 800099a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	689a      	ldr	r2, [r3, #8]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f042 0201 	orr.w	r2, r2, #1
 80009aa:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	e00a      	b.n	80009c8 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	441a      	add	r2, r3
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3f0      	bcc.n	80009b2 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2201      	movs	r2, #1
 80009dc:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80009de:	693b      	ldr	r3, [r7, #16]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	371c      	adds	r7, #28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
	...

080009ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b08b      	sub	sp, #44	@ 0x2c
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009fe:	e169      	b.n	8000cd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a00:	2201      	movs	r2, #1
 8000a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	f040 8158 	bne.w	8000cce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	4a9a      	ldr	r2, [pc, #616]	@ (8000c8c <HAL_GPIO_Init+0x2a0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d05e      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a28:	4a98      	ldr	r2, [pc, #608]	@ (8000c8c <HAL_GPIO_Init+0x2a0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d875      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a2e:	4a98      	ldr	r2, [pc, #608]	@ (8000c90 <HAL_GPIO_Init+0x2a4>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d058      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a34:	4a96      	ldr	r2, [pc, #600]	@ (8000c90 <HAL_GPIO_Init+0x2a4>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d86f      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a3a:	4a96      	ldr	r2, [pc, #600]	@ (8000c94 <HAL_GPIO_Init+0x2a8>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d052      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a40:	4a94      	ldr	r2, [pc, #592]	@ (8000c94 <HAL_GPIO_Init+0x2a8>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d869      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a46:	4a94      	ldr	r2, [pc, #592]	@ (8000c98 <HAL_GPIO_Init+0x2ac>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d04c      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a4c:	4a92      	ldr	r2, [pc, #584]	@ (8000c98 <HAL_GPIO_Init+0x2ac>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d863      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a52:	4a92      	ldr	r2, [pc, #584]	@ (8000c9c <HAL_GPIO_Init+0x2b0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d046      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
 8000a58:	4a90      	ldr	r2, [pc, #576]	@ (8000c9c <HAL_GPIO_Init+0x2b0>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d85d      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a5e:	2b12      	cmp	r3, #18
 8000a60:	d82a      	bhi.n	8000ab8 <HAL_GPIO_Init+0xcc>
 8000a62:	2b12      	cmp	r3, #18
 8000a64:	d859      	bhi.n	8000b1a <HAL_GPIO_Init+0x12e>
 8000a66:	a201      	add	r2, pc, #4	@ (adr r2, 8000a6c <HAL_GPIO_Init+0x80>)
 8000a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6c:	08000ae7 	.word	0x08000ae7
 8000a70:	08000ac1 	.word	0x08000ac1
 8000a74:	08000ad3 	.word	0x08000ad3
 8000a78:	08000b15 	.word	0x08000b15
 8000a7c:	08000b1b 	.word	0x08000b1b
 8000a80:	08000b1b 	.word	0x08000b1b
 8000a84:	08000b1b 	.word	0x08000b1b
 8000a88:	08000b1b 	.word	0x08000b1b
 8000a8c:	08000b1b 	.word	0x08000b1b
 8000a90:	08000b1b 	.word	0x08000b1b
 8000a94:	08000b1b 	.word	0x08000b1b
 8000a98:	08000b1b 	.word	0x08000b1b
 8000a9c:	08000b1b 	.word	0x08000b1b
 8000aa0:	08000b1b 	.word	0x08000b1b
 8000aa4:	08000b1b 	.word	0x08000b1b
 8000aa8:	08000b1b 	.word	0x08000b1b
 8000aac:	08000b1b 	.word	0x08000b1b
 8000ab0:	08000ac9 	.word	0x08000ac9
 8000ab4:	08000add 	.word	0x08000add
 8000ab8:	4a79      	ldr	r2, [pc, #484]	@ (8000ca0 <HAL_GPIO_Init+0x2b4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d013      	beq.n	8000ae6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000abe:	e02c      	b.n	8000b1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	623b      	str	r3, [r7, #32]
          break;
 8000ac6:	e029      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	3304      	adds	r3, #4
 8000ace:	623b      	str	r3, [r7, #32]
          break;
 8000ad0:	e024      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	3308      	adds	r3, #8
 8000ad8:	623b      	str	r3, [r7, #32]
          break;
 8000ada:	e01f      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	330c      	adds	r3, #12
 8000ae2:	623b      	str	r3, [r7, #32]
          break;
 8000ae4:	e01a      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aee:	2304      	movs	r3, #4
 8000af0:	623b      	str	r3, [r7, #32]
          break;
 8000af2:	e013      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d105      	bne.n	8000b08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000afc:	2308      	movs	r3, #8
 8000afe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	611a      	str	r2, [r3, #16]
          break;
 8000b06:	e009      	b.n	8000b1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69fa      	ldr	r2, [r7, #28]
 8000b10:	615a      	str	r2, [r3, #20]
          break;
 8000b12:	e003      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
          break;
 8000b18:	e000      	b.n	8000b1c <HAL_GPIO_Init+0x130>
          break;
 8000b1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	2bff      	cmp	r3, #255	@ 0xff
 8000b20:	d801      	bhi.n	8000b26 <HAL_GPIO_Init+0x13a>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	e001      	b.n	8000b2a <HAL_GPIO_Init+0x13e>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	2bff      	cmp	r3, #255	@ 0xff
 8000b30:	d802      	bhi.n	8000b38 <HAL_GPIO_Init+0x14c>
 8000b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	e002      	b.n	8000b3e <HAL_GPIO_Init+0x152>
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3a:	3b08      	subs	r3, #8
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	210f      	movs	r1, #15
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	401a      	ands	r2, r3
 8000b50:	6a39      	ldr	r1, [r7, #32]
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	fa01 f303 	lsl.w	r3, r1, r3
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 80b1 	beq.w	8000cce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a4c      	ldr	r2, [pc, #304]	@ (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b4a      	ldr	r3, [pc, #296]	@ (8000ca4 <HAL_GPIO_Init+0x2b8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b84:	4a48      	ldr	r2, [pc, #288]	@ (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	3302      	adds	r3, #2
 8000b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a40      	ldr	r2, [pc, #256]	@ (8000cac <HAL_GPIO_Init+0x2c0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d013      	beq.n	8000bd8 <HAL_GPIO_Init+0x1ec>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a3f      	ldr	r2, [pc, #252]	@ (8000cb0 <HAL_GPIO_Init+0x2c4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d00d      	beq.n	8000bd4 <HAL_GPIO_Init+0x1e8>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a3e      	ldr	r2, [pc, #248]	@ (8000cb4 <HAL_GPIO_Init+0x2c8>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d007      	beq.n	8000bd0 <HAL_GPIO_Init+0x1e4>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a3d      	ldr	r2, [pc, #244]	@ (8000cb8 <HAL_GPIO_Init+0x2cc>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d101      	bne.n	8000bcc <HAL_GPIO_Init+0x1e0>
 8000bc8:	2303      	movs	r3, #3
 8000bca:	e006      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bcc:	2304      	movs	r3, #4
 8000bce:	e004      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e002      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e000      	b.n	8000bda <HAL_GPIO_Init+0x1ee>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bdc:	f002 0203 	and.w	r2, r2, #3
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	4093      	lsls	r3, r2
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bea:	492f      	ldr	r1, [pc, #188]	@ (8000ca8 <HAL_GPIO_Init+0x2bc>)
 8000bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bee:	089b      	lsrs	r3, r3, #2
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c04:	4b2d      	ldr	r3, [pc, #180]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	492c      	ldr	r1, [pc, #176]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	608b      	str	r3, [r1, #8]
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c12:	4b2a      	ldr	r3, [pc, #168]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	4928      	ldr	r1, [pc, #160]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c2c:	4b23      	ldr	r3, [pc, #140]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	4922      	ldr	r1, [pc, #136]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	60cb      	str	r3, [r1, #12]
 8000c38:	e006      	b.n	8000c48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c3a:	4b20      	ldr	r3, [pc, #128]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	491e      	ldr	r1, [pc, #120]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c54:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	4918      	ldr	r1, [pc, #96]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	604b      	str	r3, [r1, #4]
 8000c60:	e006      	b.n	8000c70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c62:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	4914      	ldr	r1, [pc, #80]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d021      	beq.n	8000cc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	490e      	ldr	r1, [pc, #56]	@ (8000cbc <HAL_GPIO_Init+0x2d0>)
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	600b      	str	r3, [r1, #0]
 8000c88:	e021      	b.n	8000cce <HAL_GPIO_Init+0x2e2>
 8000c8a:	bf00      	nop
 8000c8c:	10320000 	.word	0x10320000
 8000c90:	10310000 	.word	0x10310000
 8000c94:	10220000 	.word	0x10220000
 8000c98:	10210000 	.word	0x10210000
 8000c9c:	10120000 	.word	0x10120000
 8000ca0:	10110000 	.word	0x10110000
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	40010800 	.word	0x40010800
 8000cb0:	40010c00 	.word	0x40010c00
 8000cb4:	40011000 	.word	0x40011000
 8000cb8:	40011400 	.word	0x40011400
 8000cbc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf0 <HAL_GPIO_Init+0x304>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	4909      	ldr	r1, [pc, #36]	@ (8000cf0 <HAL_GPIO_Init+0x304>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cda:	fa22 f303 	lsr.w	r3, r2, r3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f47f ae8e 	bne.w	8000a00 <HAL_GPIO_Init+0x14>
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	372c      	adds	r7, #44	@ 0x2c
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40010400 	.word	0x40010400

08000cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
 8000d00:	4613      	mov	r3, r2
 8000d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d04:	787b      	ldrb	r3, [r7, #1]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d10:	e003      	b.n	8000d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	041a      	lsls	r2, r3, #16
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	611a      	str	r2, [r3, #16]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	041a      	lsls	r2, r3, #16
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	43d9      	mvns	r1, r3
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	400b      	ands	r3, r1
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	611a      	str	r2, [r3, #16]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
	...

08000d58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e12b      	b.n	8000fc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d106      	bne.n	8000d84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff fbb2 	bl	80004e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2224      	movs	r2, #36	@ 0x24
 8000d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0201 	bic.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000daa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000dba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000dbc:	f003 f92a 	bl	8004014 <HAL_RCC_GetPCLK1Freq>
 8000dc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	4a81      	ldr	r2, [pc, #516]	@ (8000fcc <HAL_I2C_Init+0x274>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d807      	bhi.n	8000ddc <HAL_I2C_Init+0x84>
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4a80      	ldr	r2, [pc, #512]	@ (8000fd0 <HAL_I2C_Init+0x278>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	bf94      	ite	ls
 8000dd4:	2301      	movls	r3, #1
 8000dd6:	2300      	movhi	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	e006      	b.n	8000dea <HAL_I2C_Init+0x92>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4a7d      	ldr	r2, [pc, #500]	@ (8000fd4 <HAL_I2C_Init+0x27c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	bf94      	ite	ls
 8000de4:	2301      	movls	r3, #1
 8000de6:	2300      	movhi	r3, #0
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e0e7      	b.n	8000fc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4a78      	ldr	r2, [pc, #480]	@ (8000fd8 <HAL_I2C_Init+0x280>)
 8000df6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfa:	0c9b      	lsrs	r3, r3, #18
 8000dfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	4a6a      	ldr	r2, [pc, #424]	@ (8000fcc <HAL_I2C_Init+0x274>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d802      	bhi.n	8000e2c <HAL_I2C_Init+0xd4>
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	e009      	b.n	8000e40 <HAL_I2C_Init+0xe8>
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000e32:	fb02 f303 	mul.w	r3, r2, r3
 8000e36:	4a69      	ldr	r2, [pc, #420]	@ (8000fdc <HAL_I2C_Init+0x284>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	099b      	lsrs	r3, r3, #6
 8000e3e:	3301      	adds	r3, #1
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6812      	ldr	r2, [r2, #0]
 8000e44:	430b      	orrs	r3, r1
 8000e46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000e52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	495c      	ldr	r1, [pc, #368]	@ (8000fcc <HAL_I2C_Init+0x274>)
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d819      	bhi.n	8000e94 <HAL_I2C_Init+0x13c>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	1e59      	subs	r1, r3, #1
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e6e:	1c59      	adds	r1, r3, #1
 8000e70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000e74:	400b      	ands	r3, r1
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00a      	beq.n	8000e90 <HAL_I2C_Init+0x138>
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	1e59      	subs	r1, r3, #1
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e88:	3301      	adds	r3, #1
 8000e8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e8e:	e051      	b.n	8000f34 <HAL_I2C_Init+0x1dc>
 8000e90:	2304      	movs	r3, #4
 8000e92:	e04f      	b.n	8000f34 <HAL_I2C_Init+0x1dc>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d111      	bne.n	8000ec0 <HAL_I2C_Init+0x168>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	1e58      	subs	r0, r3, #1
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6859      	ldr	r1, [r3, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	440b      	add	r3, r1
 8000eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eae:	3301      	adds	r3, #1
 8000eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2301      	moveq	r3, #1
 8000eba:	2300      	movne	r3, #0
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	e012      	b.n	8000ee6 <HAL_I2C_Init+0x18e>
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	1e58      	subs	r0, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6859      	ldr	r1, [r3, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	0099      	lsls	r1, r3, #2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf0c      	ite	eq
 8000ee0:	2301      	moveq	r3, #1
 8000ee2:	2300      	movne	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_I2C_Init+0x196>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e022      	b.n	8000f34 <HAL_I2C_Init+0x1dc>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10e      	bne.n	8000f14 <HAL_I2C_Init+0x1bc>
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	1e58      	subs	r0, r3, #1
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6859      	ldr	r1, [r3, #4]
 8000efe:	460b      	mov	r3, r1
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	440b      	add	r3, r1
 8000f04:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f08:	3301      	adds	r3, #1
 8000f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f12:	e00f      	b.n	8000f34 <HAL_I2C_Init+0x1dc>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	1e58      	subs	r0, r3, #1
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6859      	ldr	r1, [r3, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	0099      	lsls	r1, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	6809      	ldr	r1, [r1, #0]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69da      	ldr	r2, [r3, #28]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000f62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6911      	ldr	r1, [r2, #16]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68d2      	ldr	r2, [r2, #12]
 8000f6e:	4311      	orrs	r1, r2
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	6812      	ldr	r2, [r2, #0]
 8000f74:	430b      	orrs	r3, r1
 8000f76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	430a      	orrs	r2, r1
 8000f92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0201 	orr.w	r2, r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2220      	movs	r2, #32
 8000fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	000186a0 	.word	0x000186a0
 8000fd0:	001e847f 	.word	0x001e847f
 8000fd4:	003d08ff 	.word	0x003d08ff
 8000fd8:	431bde83 	.word	0x431bde83
 8000fdc:	10624dd3 	.word	0x10624dd3

08000fe0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	461a      	mov	r2, r3
 8000fec:	460b      	mov	r3, r1
 8000fee:	817b      	strh	r3, [r7, #10]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff fb70 	bl	80006d8 <HAL_GetTick>
 8000ff8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b20      	cmp	r3, #32
 8001004:	f040 80e0 	bne.w	80011c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2319      	movs	r3, #25
 800100e:	2201      	movs	r2, #1
 8001010:	4970      	ldr	r1, [pc, #448]	@ (80011d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f000 fc9e 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800101e:	2302      	movs	r3, #2
 8001020:	e0d3      	b.n	80011ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <HAL_I2C_Master_Transmit+0x50>
 800102c:	2302      	movs	r3, #2
 800102e:	e0cc      	b.n	80011ca <HAL_I2C_Master_Transmit+0x1ea>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b01      	cmp	r3, #1
 8001044:	d007      	beq.n	8001056 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 0201 	orr.w	r2, r2, #1
 8001054:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001064:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2221      	movs	r2, #33	@ 0x21
 800106a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2210      	movs	r2, #16
 8001072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	893a      	ldrh	r2, [r7, #8]
 8001086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800108c:	b29a      	uxth	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4a50      	ldr	r2, [pc, #320]	@ (80011d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001096:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001098:	8979      	ldrh	r1, [r7, #10]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	6a3a      	ldr	r2, [r7, #32]
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f000 fb08 	bl	80016b4 <I2C_MasterRequestWrite>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e08d      	b.n	80011ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80010c4:	e066      	b.n	8001194 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	6a39      	ldr	r1, [r7, #32]
 80010ca:	68f8      	ldr	r0, [r7, #12]
 80010cc:	f000 fd5c 	bl	8001b88 <I2C_WaitOnTXEFlagUntilTimeout>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00d      	beq.n	80010f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d107      	bne.n	80010ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e06b      	b.n	80011ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800110c:	b29b      	uxth	r3, r3
 800110e:	3b01      	subs	r3, #1
 8001110:	b29a      	uxth	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800111a:	3b01      	subs	r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b04      	cmp	r3, #4
 800112e:	d11b      	bne.n	8001168 <HAL_I2C_Master_Transmit+0x188>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001134:	2b00      	cmp	r3, #0
 8001136:	d017      	beq.n	8001168 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001152:	b29b      	uxth	r3, r3
 8001154:	3b01      	subs	r3, #1
 8001156:	b29a      	uxth	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001160:	3b01      	subs	r3, #1
 8001162:	b29a      	uxth	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	6a39      	ldr	r1, [r7, #32]
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 fd53 	bl	8001c18 <I2C_WaitOnBTFFlagUntilTimeout>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00d      	beq.n	8001194 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	2b04      	cmp	r3, #4
 800117e:	d107      	bne.n	8001190 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800118e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e01a      	b.n	80011ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001198:	2b00      	cmp	r3, #0
 800119a:	d194      	bne.n	80010c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2220      	movs	r2, #32
 80011b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e000      	b.n	80011ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80011c8:	2302      	movs	r3, #2
  }
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	00100002 	.word	0x00100002
 80011d8:	ffff0000 	.word	0xffff0000

080011dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	@ 0x30
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	461a      	mov	r2, r3
 80011e8:	460b      	mov	r3, r1
 80011ea:	817b      	strh	r3, [r7, #10]
 80011ec:	4613      	mov	r3, r2
 80011ee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff fa70 	bl	80006d8 <HAL_GetTick>
 80011f8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b20      	cmp	r3, #32
 8001204:	f040 824b 	bne.w	800169e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2319      	movs	r3, #25
 800120e:	2201      	movs	r2, #1
 8001210:	497f      	ldr	r1, [pc, #508]	@ (8001410 <HAL_I2C_Master_Receive+0x234>)
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 fb9e 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800121e:	2302      	movs	r3, #2
 8001220:	e23e      	b.n	80016a0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <HAL_I2C_Master_Receive+0x54>
 800122c:	2302      	movs	r3, #2
 800122e:	e237      	b.n	80016a0 <HAL_I2C_Master_Receive+0x4c4>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b01      	cmp	r3, #1
 8001244:	d007      	beq.n	8001256 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0201 	orr.w	r2, r2, #1
 8001254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001264:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2222      	movs	r2, #34	@ 0x22
 800126a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2210      	movs	r2, #16
 8001272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2200      	movs	r2, #0
 800127a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	893a      	ldrh	r2, [r7, #8]
 8001286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800128c:	b29a      	uxth	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4a5f      	ldr	r2, [pc, #380]	@ (8001414 <HAL_I2C_Master_Receive+0x238>)
 8001296:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001298:	8979      	ldrh	r1, [r7, #10]
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 fa8a 	bl	80017b8 <I2C_MasterRequestRead>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e1f8      	b.n	80016a0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d113      	bne.n	80012de <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	61fb      	str	r3, [r7, #28]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e1cc      	b.n	8001678 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d11e      	bne.n	8001324 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80012f6:	b672      	cpsid	i
}
 80012f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800131e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001320:	b662      	cpsie	i
}
 8001322:	e035      	b.n	8001390 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001328:	2b02      	cmp	r3, #2
 800132a:	d11e      	bne.n	800136a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800133a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001364:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001366:	b662      	cpsie	i
}
 8001368:	e012      	b.n	8001390 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001378:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001390:	e172      	b.n	8001678 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001396:	2b03      	cmp	r3, #3
 8001398:	f200 811f 	bhi.w	80015da <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d123      	bne.n	80013ec <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 fc7d 	bl	8001ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e173      	b.n	80016a0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	691a      	ldr	r2, [r3, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	3b01      	subs	r3, #1
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80013ea:	e145      	b.n	8001678 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d152      	bne.n	800149a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013fa:	2200      	movs	r2, #0
 80013fc:	4906      	ldr	r1, [pc, #24]	@ (8001418 <HAL_I2C_Master_Receive+0x23c>)
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 faa8 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e148      	b.n	80016a0 <HAL_I2C_Master_Receive+0x4c4>
 800140e:	bf00      	nop
 8001410:	00100002 	.word	0x00100002
 8001414:	ffff0000 	.word	0xffff0000
 8001418:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800142e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800144c:	3b01      	subs	r3, #1
 800144e:	b29a      	uxth	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001458:	b29b      	uxth	r3, r3
 800145a:	3b01      	subs	r3, #1
 800145c:	b29a      	uxth	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001462:	b662      	cpsie	i
}
 8001464:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001482:	3b01      	subs	r3, #1
 8001484:	b29a      	uxth	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800148e:	b29b      	uxth	r3, r3
 8001490:	3b01      	subs	r3, #1
 8001492:	b29a      	uxth	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001498:	e0ee      	b.n	8001678 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a0:	2200      	movs	r2, #0
 80014a2:	4981      	ldr	r1, [pc, #516]	@ (80016a8 <HAL_I2C_Master_Receive+0x4cc>)
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 fa55 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0f5      	b.n	80016a0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014e4:	3b01      	subs	r3, #1
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80014fa:	4b6c      	ldr	r3, [pc, #432]	@ (80016ac <HAL_I2C_Master_Receive+0x4d0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	08db      	lsrs	r3, r3, #3
 8001500:	4a6b      	ldr	r2, [pc, #428]	@ (80016b0 <HAL_I2C_Master_Receive+0x4d4>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0a1a      	lsrs	r2, r3, #8
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00da      	lsls	r2, r3, #3
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	3b01      	subs	r3, #1
 8001518:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d118      	bne.n	8001552 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2220      	movs	r2, #32
 800152a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	f043 0220 	orr.w	r2, r3, #32
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001542:	b662      	cpsie	i
}
 8001544:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e0a6      	b.n	80016a0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b04      	cmp	r3, #4
 800155e:	d1d9      	bne.n	8001514 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800156e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800158c:	3b01      	subs	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	b29a      	uxth	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80015a2:	b662      	cpsie	i
}
 80015a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80015d8:	e04e      	b.n	8001678 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80015de:	68f8      	ldr	r0, [r7, #12]
 80015e0:	f000 fb62 	bl	8001ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e058      	b.n	80016a0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800160a:	3b01      	subs	r3, #1
 800160c:	b29a      	uxth	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001616:	b29b      	uxth	r3, r3
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	2b04      	cmp	r3, #4
 800162c:	d124      	bne.n	8001678 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001632:	2b03      	cmp	r3, #3
 8001634:	d107      	bne.n	8001646 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001644:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001662:	3b01      	subs	r3, #1
 8001664:	b29a      	uxth	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800166e:	b29b      	uxth	r3, r3
 8001670:	3b01      	subs	r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800167c:	2b00      	cmp	r3, #0
 800167e:	f47f ae88 	bne.w	8001392 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2220      	movs	r2, #32
 8001686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	e000      	b.n	80016a0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800169e:	2302      	movs	r3, #2
  }
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3728      	adds	r7, #40	@ 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	00010004 	.word	0x00010004
 80016ac:	20000000 	.word	0x20000000
 80016b0:	14f8b589 	.word	0x14f8b589

080016b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	460b      	mov	r3, r1
 80016c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d006      	beq.n	80016de <I2C_MasterRequestWrite+0x2a>
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d003      	beq.n	80016de <I2C_MasterRequestWrite+0x2a>
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80016dc:	d108      	bne.n	80016f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e00b      	b.n	8001708 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f4:	2b12      	cmp	r3, #18
 80016f6:	d107      	bne.n	8001708 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001706:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f91d 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00d      	beq.n	800173c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800172e:	d103      	bne.n	8001738 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001736:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e035      	b.n	80017a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001744:	d108      	bne.n	8001758 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001746:	897b      	ldrh	r3, [r7, #10]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001754:	611a      	str	r2, [r3, #16]
 8001756:	e01b      	b.n	8001790 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001758:	897b      	ldrh	r3, [r7, #10]
 800175a:	11db      	asrs	r3, r3, #7
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f003 0306 	and.w	r3, r3, #6
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f063 030f 	orn	r3, r3, #15
 8001768:	b2da      	uxtb	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	490e      	ldr	r1, [pc, #56]	@ (80017b0 <I2C_MasterRequestWrite+0xfc>)
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f966 	bl	8001a48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e010      	b.n	80017a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001786:	897b      	ldrh	r3, [r7, #10]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4907      	ldr	r1, [pc, #28]	@ (80017b4 <I2C_MasterRequestWrite+0x100>)
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f956 	bl	8001a48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	00010008 	.word	0x00010008
 80017b4:	00010002 	.word	0x00010002

080017b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af02      	add	r7, sp, #8
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	460b      	mov	r3, r1
 80017c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80017dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d006      	beq.n	80017f2 <I2C_MasterRequestRead+0x3a>
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d003      	beq.n	80017f2 <I2C_MasterRequestRead+0x3a>
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80017f0:	d108      	bne.n	8001804 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e00b      	b.n	800181c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001808:	2b11      	cmp	r3, #17
 800180a:	d107      	bne.n	800181c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800181a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 f893 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00d      	beq.n	8001850 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800183e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001842:	d103      	bne.n	800184c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800184a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e079      	b.n	8001944 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001858:	d108      	bne.n	800186c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	b2da      	uxtb	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	611a      	str	r2, [r3, #16]
 800186a:	e05f      	b.n	800192c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800186c:	897b      	ldrh	r3, [r7, #10]
 800186e:	11db      	asrs	r3, r3, #7
 8001870:	b2db      	uxtb	r3, r3
 8001872:	f003 0306 	and.w	r3, r3, #6
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f063 030f 	orn	r3, r3, #15
 800187c:	b2da      	uxtb	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4930      	ldr	r1, [pc, #192]	@ (800194c <I2C_MasterRequestRead+0x194>)
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 f8dc 	bl	8001a48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e054      	b.n	8001944 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800189a:	897b      	ldrh	r3, [r7, #10]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4929      	ldr	r1, [pc, #164]	@ (8001950 <I2C_MasterRequestRead+0x198>)
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f8cc 	bl	8001a48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e044      	b.n	8001944 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f831 	bl	8001954 <I2C_WaitOnFlagUntilTimeout>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00d      	beq.n	8001914 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001906:	d103      	bne.n	8001910 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800190e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e017      	b.n	8001944 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001914:	897b      	ldrh	r3, [r7, #10]
 8001916:	11db      	asrs	r3, r3, #7
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f003 0306 	and.w	r3, r3, #6
 800191e:	b2db      	uxtb	r3, r3
 8001920:	f063 030e 	orn	r3, r3, #14
 8001924:	b2da      	uxtb	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4907      	ldr	r1, [pc, #28]	@ (8001950 <I2C_MasterRequestRead+0x198>)
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f888 	bl	8001a48 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	00010008 	.word	0x00010008
 8001950:	00010002 	.word	0x00010002

08001954 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	4613      	mov	r3, r2
 8001962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001964:	e048      	b.n	80019f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d044      	beq.n	80019f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800196e:	f7fe feb3 	bl	80006d8 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d302      	bcc.n	8001984 <I2C_WaitOnFlagUntilTimeout+0x30>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d139      	bne.n	80019f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d10d      	bne.n	80019aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	43da      	mvns	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	4013      	ands	r3, r2
 800199a:	b29b      	uxth	r3, r3
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf0c      	ite	eq
 80019a0:	2301      	moveq	r3, #1
 80019a2:	2300      	movne	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	e00c      	b.n	80019c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	43da      	mvns	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	4013      	ands	r3, r2
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d116      	bne.n	80019f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2220      	movs	r2, #32
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	f043 0220 	orr.w	r2, r3, #32
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e023      	b.n	8001a40 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	0c1b      	lsrs	r3, r3, #16
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d10d      	bne.n	8001a1e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	43da      	mvns	r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf0c      	ite	eq
 8001a14:	2301      	moveq	r3, #1
 8001a16:	2300      	movne	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	e00c      	b.n	8001a38 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	43da      	mvns	r2, r3
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf0c      	ite	eq
 8001a30:	2301      	moveq	r3, #1
 8001a32:	2300      	movne	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d093      	beq.n	8001966 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a56:	e071      	b.n	8001b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a66:	d123      	bne.n	8001ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a76:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001a80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	f043 0204 	orr.w	r2, r3, #4
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e067      	b.n	8001b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab6:	d041      	beq.n	8001b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ab8:	f7fe fe0e 	bl	80006d8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d302      	bcc.n	8001ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d136      	bne.n	8001b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d10c      	bne.n	8001af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bf14      	ite	ne
 8001aea:	2301      	movne	r3, #1
 8001aec:	2300      	moveq	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	e00b      	b.n	8001b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	43da      	mvns	r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	4013      	ands	r3, r2
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf14      	ite	ne
 8001b04:	2301      	movne	r3, #1
 8001b06:	2300      	moveq	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d016      	beq.n	8001b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2220      	movs	r2, #32
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	f043 0220 	orr.w	r2, r3, #32
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e021      	b.n	8001b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	0c1b      	lsrs	r3, r3, #16
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d10c      	bne.n	8001b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4013      	ands	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	e00b      	b.n	8001b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf14      	ite	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	2300      	moveq	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f47f af6d 	bne.w	8001a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b94:	e034      	b.n	8001c00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 f8e3 	bl	8001d62 <I2C_IsAcknowledgeFailed>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e034      	b.n	8001c10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d028      	beq.n	8001c00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bae:	f7fe fd93 	bl	80006d8 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d302      	bcc.n	8001bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d11d      	bne.n	8001c00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bce:	2b80      	cmp	r3, #128	@ 0x80
 8001bd0:	d016      	beq.n	8001c00 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bec:	f043 0220 	orr.w	r2, r3, #32
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e007      	b.n	8001c10 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c0a:	2b80      	cmp	r3, #128	@ 0x80
 8001c0c:	d1c3      	bne.n	8001b96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c24:	e034      	b.n	8001c90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 f89b 	bl	8001d62 <I2C_IsAcknowledgeFailed>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e034      	b.n	8001ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d028      	beq.n	8001c90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3e:	f7fe fd4b 	bl	80006d8 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d11d      	bne.n	8001c90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d016      	beq.n	8001c90 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	f043 0220 	orr.w	r2, r3, #32
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e007      	b.n	8001ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d1c3      	bne.n	8001c26 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cb4:	e049      	b.n	8001d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b10      	cmp	r3, #16
 8001cc2:	d119      	bne.n	8001cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0210 	mvn.w	r2, #16
 8001ccc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e030      	b.n	8001d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf8:	f7fe fcee 	bl	80006d8 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d302      	bcc.n	8001d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d11d      	bne.n	8001d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d18:	2b40      	cmp	r3, #64	@ 0x40
 8001d1a:	d016      	beq.n	8001d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2220      	movs	r2, #32
 8001d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f043 0220 	orr.w	r2, r3, #32
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e007      	b.n	8001d5a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d54:	2b40      	cmp	r3, #64	@ 0x40
 8001d56:	d1ae      	bne.n	8001cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d78:	d11b      	bne.n	8001db2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d82:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f043 0204 	orr.w	r2, r3, #4
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0e8      	b.n	8001fa2 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d106      	bne.n	8001dea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f006 fa99 	bl	800831c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2203      	movs	r2, #3
 8001dee:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f002 fa14 	bl	800422a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0c:	f002 f9ea 	bl	80041e4 <USB_CoreInit>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0bf      	b.n	8001fa2 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fa18 	bl	800425e <USB_SetCurrentMode>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0b0      	b.n	8001fa2 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]
 8001e44:	e03e      	b.n	8001ec4 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	3311      	adds	r3, #17
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	3310      	adds	r3, #16
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	3313      	adds	r3, #19
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e82:	7bfa      	ldrb	r2, [r7, #15]
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	440b      	add	r3, r1
 8001e90:	3320      	adds	r3, #32
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	440b      	add	r3, r1
 8001ea4:	3324      	adds	r3, #36	@ 0x24
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	791b      	ldrb	r3, [r3, #4]
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d3bb      	bcc.n	8001e46 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
 8001ed2:	e044      	b.n	8001f5e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	440b      	add	r3, r1
 8001ee2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001eea:	7bfa      	ldrb	r2, [r7, #15]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f16:	7bfa      	ldrb	r2, [r7, #15]
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	791b      	ldrb	r3, [r3, #4]
 8001f62:	7bfa      	ldrb	r2, [r7, #15]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d3b5      	bcc.n	8001ed4 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f72:	f002 f980 	bl	8004276 <USB_DevInit>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e00c      	b.n	8001fa2 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 fbff 	bl	800679e <USB_DevDisconnect>

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <HAL_PCD_Start+0x16>
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	e016      	b.n	8001fee <HAL_PCD_Start+0x44>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 f916 	bl	80041fe <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f006 fc14 	bl	8008802 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 fbd3 	bl	800678a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b088      	sub	sp, #32
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f004 fbd5 	bl	80067b2 <USB_ReadInterrupts>
 8002008:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fb1a 	bl	800264e <PCD_EP_ISR_Handler>

    return;
 800201a:	e119      	b.n	8002250 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002022:	2b00      	cmp	r3, #0
 8002024:	d013      	beq.n	800204e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800202e:	b29a      	uxth	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002038:	b292      	uxth	r2, r2
 800203a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f006 f9e7 	bl	8008412 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002044:	2100      	movs	r1, #0
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f905 	bl	8002256 <HAL_PCD_SetAddress>

    return;
 800204c:	e100      	b.n	8002250 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00c      	beq.n	8002072 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002060:	b29a      	uxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800206a:	b292      	uxth	r2, r2
 800206c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002070:	e0ee      	b.n	8002250 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00c      	beq.n	8002096 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002084:	b29a      	uxth	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800208e:	b292      	uxth	r2, r2
 8002090:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002094:	e0dc      	b.n	8002250 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d027      	beq.n	80020f0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0204 	bic.w	r2, r2, #4
 80020b2:	b292      	uxth	r2, r2
 80020b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0208 	bic.w	r2, r2, #8
 80020ca:	b292      	uxth	r2, r2
 80020cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f006 f9d7 	bl	8008484 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80020de:	b29a      	uxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020e8:	b292      	uxth	r2, r2
 80020ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80020ee:	e0af      	b.n	8002250 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 8083 	beq.w	8002202 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	77fb      	strb	r3, [r7, #31]
 8002100:	e010      	b.n	8002124 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	7ffb      	ldrb	r3, [r7, #31]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	441a      	add	r2, r3
 800210e:	7ffb      	ldrb	r3, [r7, #31]
 8002110:	8812      	ldrh	r2, [r2, #0]
 8002112:	b292      	uxth	r2, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	3320      	adds	r3, #32
 8002118:	443b      	add	r3, r7
 800211a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800211e:	7ffb      	ldrb	r3, [r7, #31]
 8002120:	3301      	adds	r3, #1
 8002122:	77fb      	strb	r3, [r7, #31]
 8002124:	7ffb      	ldrb	r3, [r7, #31]
 8002126:	2b07      	cmp	r3, #7
 8002128:	d9eb      	bls.n	8002102 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002132:	b29a      	uxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	b292      	uxth	r2, r2
 800213e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800214a:	b29a      	uxth	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	b292      	uxth	r2, r2
 8002156:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800215a:	bf00      	nop
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002164:	b29b      	uxth	r3, r3
 8002166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f6      	beq.n	800215c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002176:	b29a      	uxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002180:	b292      	uxth	r2, r2
 8002182:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002186:	2300      	movs	r3, #0
 8002188:	77fb      	strb	r3, [r7, #31]
 800218a:	e00f      	b.n	80021ac <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800218c:	7ffb      	ldrb	r3, [r7, #31]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	4611      	mov	r1, r2
 8002194:	7ffa      	ldrb	r2, [r7, #31]
 8002196:	0092      	lsls	r2, r2, #2
 8002198:	440a      	add	r2, r1
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	3320      	adds	r3, #32
 800219e:	443b      	add	r3, r7
 80021a0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80021a4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80021a6:	7ffb      	ldrb	r3, [r7, #31]
 80021a8:	3301      	adds	r3, #1
 80021aa:	77fb      	strb	r3, [r7, #31]
 80021ac:	7ffb      	ldrb	r3, [r7, #31]
 80021ae:	2b07      	cmp	r3, #7
 80021b0:	d9ec      	bls.n	800218c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0208 	orr.w	r2, r2, #8
 80021c4:	b292      	uxth	r2, r2
 80021c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021dc:	b292      	uxth	r2, r2
 80021de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0204 	orr.w	r2, r2, #4
 80021f4:	b292      	uxth	r2, r2
 80021f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f006 f928 	bl	8008450 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002200:	e026      	b.n	8002250 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00f      	beq.n	800222c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002214:	b29a      	uxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800221e:	b292      	uxth	r2, r2
 8002220:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f006 f8e6 	bl	80083f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800222a:	e011      	b.n	8002250 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00c      	beq.n	8002250 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800223e:	b29a      	uxth	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002248:	b292      	uxth	r2, r2
 800224a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800224e:	bf00      	nop
  }
}
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_PCD_SetAddress+0x1a>
 800226c:	2302      	movs	r3, #2
 800226e:	e012      	b.n	8002296 <HAL_PCD_SetAddress+0x40>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f004 fa6c 	bl	8006764 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	4608      	mov	r0, r1
 80022a8:	4611      	mov	r1, r2
 80022aa:	461a      	mov	r2, r3
 80022ac:	4603      	mov	r3, r0
 80022ae:	70fb      	strb	r3, [r7, #3]
 80022b0:	460b      	mov	r3, r1
 80022b2:	803b      	strh	r3, [r7, #0]
 80022b4:	4613      	mov	r3, r2
 80022b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	da0e      	bge.n	80022e2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	f003 0207 	and.w	r2, r3, #7
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	3310      	adds	r3, #16
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2201      	movs	r2, #1
 80022de:	705a      	strb	r2, [r3, #1]
 80022e0:	e00e      	b.n	8002300 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022e2:	78fb      	ldrb	r3, [r7, #3]
 80022e4:	f003 0207 	and.w	r2, r3, #7
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4413      	add	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	b2da      	uxtb	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800230c:	883a      	ldrh	r2, [r7, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	78ba      	ldrb	r2, [r7, #2]
 8002316:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002318:	78bb      	ldrb	r3, [r7, #2]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d102      	bne.n	8002324 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_PCD_EP_Open+0x94>
 800232e:	2302      	movs	r3, #2
 8002330:	e00e      	b.n	8002350 <HAL_PCD_EP_Open+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68f9      	ldr	r1, [r7, #12]
 8002340:	4618      	mov	r0, r3
 8002342:	f001 ffb5 	bl	80042b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800234e:	7afb      	ldrb	r3, [r7, #11]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002368:	2b00      	cmp	r3, #0
 800236a:	da0e      	bge.n	800238a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	f003 0207 	and.w	r2, r3, #7
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	3310      	adds	r3, #16
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	705a      	strb	r2, [r3, #1]
 8002388:	e00e      	b.n	80023a8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	f003 0207 	and.w	r2, r3, #7
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_PCD_EP_Close+0x6a>
 80023be:	2302      	movs	r3, #2
 80023c0:	e00e      	b.n	80023e0 <HAL_PCD_EP_Close+0x88>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68f9      	ldr	r1, [r7, #12]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f002 fb2d 	bl	8004a30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	460b      	mov	r3, r1
 80023f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f8:	7afb      	ldrb	r3, [r7, #11]
 80023fa:	f003 0207 	and.w	r2, r3, #7
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4413      	add	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2200      	movs	r2, #0
 8002426:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002428:	7afb      	ldrb	r3, [r7, #11]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	b2da      	uxtb	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6979      	ldr	r1, [r7, #20]
 800243a:	4618      	mov	r0, r3
 800243c:	f002 fce4 	bl	8004e08 <USB_EPStartXfer>

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	460b      	mov	r3, r1
 8002454:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	f003 0207 	and.w	r2, r3, #7
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	440b      	add	r3, r1
 8002468:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800246c:	681b      	ldr	r3, [r3, #0]
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	460b      	mov	r3, r1
 8002486:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002488:	7afb      	ldrb	r3, [r7, #11]
 800248a:	f003 0207 	and.w	r2, r3, #7
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	3310      	adds	r3, #16
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4413      	add	r3, r2
 800249c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2201      	movs	r2, #1
 80024c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024c4:	7afb      	ldrb	r3, [r7, #11]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6979      	ldr	r1, [r7, #20]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 fc96 	bl	8004e08 <USB_EPStartXfer>

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	460b      	mov	r3, r1
 80024f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	7912      	ldrb	r2, [r2, #4]
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e04c      	b.n	800259e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002504:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002508:	2b00      	cmp	r3, #0
 800250a:	da0e      	bge.n	800252a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	f003 0207 	and.w	r2, r3, #7
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	3310      	adds	r3, #16
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	705a      	strb	r2, [r3, #1]
 8002528:	e00c      	b.n	8002544 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4413      	add	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	b2da      	uxtb	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_PCD_EP_SetStall+0x7e>
 8002560:	2302      	movs	r3, #2
 8002562:	e01c      	b.n	800259e <HAL_PCD_EP_SetStall+0xb8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68f9      	ldr	r1, [r7, #12]
 8002572:	4618      	mov	r0, r3
 8002574:	f003 fff9 	bl	800656a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800258c:	4619      	mov	r1, r3
 800258e:	4610      	mov	r0, r2
 8002590:	f004 f91e 	bl	80067d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	7912      	ldrb	r2, [r2, #4]
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e040      	b.n	8002646 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	da0e      	bge.n	80025ea <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025cc:	78fb      	ldrb	r3, [r7, #3]
 80025ce:	f003 0207 	and.w	r2, r3, #7
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	3310      	adds	r3, #16
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	4413      	add	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2201      	movs	r2, #1
 80025e6:	705a      	strb	r2, [r3, #1]
 80025e8:	e00e      	b.n	8002608 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	f003 0207 	and.w	r2, r3, #7
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4413      	add	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	b2da      	uxtb	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_PCD_EP_ClrStall+0x82>
 8002624:	2302      	movs	r3, #2
 8002626:	e00e      	b.n	8002646 <HAL_PCD_EP_ClrStall+0xa0>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68f9      	ldr	r1, [r7, #12]
 8002636:	4618      	mov	r0, r3
 8002638:	f003 ffe7 	bl	800660a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b096      	sub	sp, #88	@ 0x58
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002656:	e3bb      	b.n	8002dd0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002660:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002664:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002668:	b2db      	uxtb	r3, r3
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8002672:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 8175 	bne.w	8002966 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800267c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	d14e      	bne.n	8002726 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002698:	81fb      	strh	r3, [r7, #14]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	89fb      	ldrh	r3, [r7, #14]
 80026a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3310      	adds	r3, #16
 80026b0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	3302      	adds	r3, #2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	441a      	add	r2, r3
 80026e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80026ec:	2100      	movs	r1, #0
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f005 fe67 	bl	80083c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7b5b      	ldrb	r3, [r3, #13]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8368 	beq.w	8002dd0 <PCD_EP_ISR_Handler+0x782>
 8002700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f040 8363 	bne.w	8002dd0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7b5b      	ldrb	r3, [r3, #13]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002714:	b2da      	uxtb	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	735a      	strb	r2, [r3, #13]
 8002724:	e354      	b.n	8002dd0 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800272c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002738:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800273c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002740:	2b00      	cmp	r3, #0
 8002742:	d034      	beq.n	80027ae <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800274c:	b29b      	uxth	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	3306      	adds	r3, #6
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	4413      	add	r3, r2
 8002762:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800276c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800276e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800277a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800277c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800277e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002780:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002782:	b29b      	uxth	r3, r3
 8002784:	f004 f874 	bl	8006870 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b29a      	uxth	r2, r3
 8002790:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002794:	4013      	ands	r3, r2
 8002796:	823b      	strh	r3, [r7, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	8a3a      	ldrh	r2, [r7, #16]
 800279e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027a2:	b292      	uxth	r2, r2
 80027a4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f005 fdde 	bl	8008368 <HAL_PCD_SetupStageCallback>
 80027ac:	e310      	b.n	8002dd0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027ae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f280 830c 	bge.w	8002dd0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80027c4:	4013      	ands	r3, r2
 80027c6:	83fb      	strh	r3, [r7, #30]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	8bfa      	ldrh	r2, [r7, #30]
 80027ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027d2:	b292      	uxth	r2, r2
 80027d4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027de:	b29b      	uxth	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	3306      	adds	r3, #6
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002800:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d019      	beq.n	800283e <PCD_EP_ISR_Handler+0x1f0>
 800280a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002818:	6959      	ldr	r1, [r3, #20]
 800281a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800281c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800281e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002820:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002822:	b29b      	uxth	r3, r3
 8002824:	f004 f824 	bl	8006870 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	441a      	add	r2, r3
 8002832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002834:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002836:	2100      	movs	r1, #0
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f005 fda7 	bl	800838c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002848:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800284c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002850:	2b00      	cmp	r3, #0
 8002852:	f040 82bd 	bne.w	8002dd0 <PCD_EP_ISR_Handler+0x782>
 8002856:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800285a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800285e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002862:	f000 82b5 	beq.w	8002dd0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002874:	b29b      	uxth	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	4413      	add	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002890:	b29a      	uxth	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	801a      	strh	r2, [r3, #0]
 8002896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b3e      	cmp	r3, #62	@ 0x3e
 800289c:	d91d      	bls.n	80028da <PCD_EP_ISR_Handler+0x28c>
 800289e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80028a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d102      	bne.n	80028b8 <PCD_EP_ISR_Handler+0x26a>
 80028b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028b4:	3b01      	subs	r3, #1
 80028b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29a      	uxth	r2, r3
 80028be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	029b      	lsls	r3, r3, #10
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	4313      	orrs	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	801a      	strh	r2, [r3, #0]
 80028d8:	e026      	b.n	8002928 <PCD_EP_ISR_Handler+0x2da>
 80028da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <PCD_EP_ISR_Handler+0x2aa>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	801a      	strh	r2, [r3, #0]
 80028f6:	e017      	b.n	8002928 <PCD_EP_ISR_Handler+0x2da>
 80028f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	085b      	lsrs	r3, r3, #1
 80028fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <PCD_EP_ISR_Handler+0x2c4>
 800290c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800290e:	3301      	adds	r3, #1
 8002910:	647b      	str	r3, [r7, #68]	@ 0x44
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	b29a      	uxth	r2, r3
 8002918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800291a:	b29b      	uxth	r3, r3
 800291c:	029b      	lsls	r3, r3, #10
 800291e:	b29b      	uxth	r3, r3
 8002920:	4313      	orrs	r3, r2
 8002922:	b29a      	uxth	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002938:	827b      	strh	r3, [r7, #18]
 800293a:	8a7b      	ldrh	r3, [r7, #18]
 800293c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002940:	827b      	strh	r3, [r7, #18]
 8002942:	8a7b      	ldrh	r3, [r7, #18]
 8002944:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002948:	827b      	strh	r3, [r7, #18]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	8a7b      	ldrh	r3, [r7, #18]
 8002950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800295c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002960:	b29b      	uxth	r3, r3
 8002962:	8013      	strh	r3, [r2, #0]
 8002964:	e234      	b.n	8002dd0 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800297a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800297e:	2b00      	cmp	r3, #0
 8002980:	f280 80fc 	bge.w	8002b7c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29a      	uxth	r2, r3
 8002996:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800299a:	4013      	ands	r3, r2
 800299c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80029b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80029b6:	b292      	uxth	r2, r2
 80029b8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80029ba:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80029d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d2:	7b1b      	ldrb	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d125      	bne.n	8002a24 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	3306      	adds	r3, #6
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a00:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002a04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8092 	beq.w	8002b32 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a14:	6959      	ldr	r1, [r3, #20]
 8002a16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a18:	88da      	ldrh	r2, [r3, #6]
 8002a1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002a1e:	f003 ff27 	bl	8006870 <USB_ReadPMA>
 8002a22:	e086      	b.n	8002b32 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a26:	78db      	ldrb	r3, [r3, #3]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d10a      	bne.n	8002a42 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002a2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a30:	461a      	mov	r2, r3
 8002a32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f9d9 	bl	8002dec <HAL_PCD_EP_DB_Receive>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002a40:	e077      	b.n	8002b32 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a5c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	441a      	add	r2, r3
 8002a6e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002a72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d024      	beq.n	8002aea <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002acc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02e      	beq.n	8002b32 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ada:	6959      	ldr	r1, [r3, #20]
 8002adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ade:	891a      	ldrh	r2, [r3, #8]
 8002ae0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002ae4:	f003 fec4 	bl	8006870 <USB_ReadPMA>
 8002ae8:	e023      	b.n	8002b32 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	3306      	adds	r3, #6
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b12:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002b16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b24:	6959      	ldr	r1, [r3, #20]
 8002b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b28:	895a      	ldrh	r2, [r3, #10]
 8002b2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b2e:	f003 fe9f 	bl	8006870 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b34:	69da      	ldr	r2, [r3, #28]
 8002b36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b3a:	441a      	add	r2, r3
 8002b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002b48:	441a      	add	r2, r3
 8002b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <PCD_EP_ISR_Handler+0x514>
 8002b56:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d206      	bcs.n	8002b70 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f005 fc0f 	bl	800838c <HAL_PCD_DataOutStageCallback>
 8002b6e:	e005      	b.n	8002b7c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 f946 	bl	8004e08 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 8123 	beq.w	8002dd0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b8a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	3310      	adds	r3, #16
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bb8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	441a      	add	r2, r3
 8002bca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bdc:	78db      	ldrb	r3, [r3, #3]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	f040 80a2 	bne.w	8002d28 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be6:	2200      	movs	r2, #0
 8002be8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bec:	7b1b      	ldrb	r3, [r3, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8093 	beq.w	8002d1a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bf4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d046      	beq.n	8002c8e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c02:	785b      	ldrb	r3, [r3, #1]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d126      	bne.n	8002c56 <PCD_EP_ISR_Handler+0x608>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	4413      	add	r3, r2
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	011a      	lsls	r2, r3, #4
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	4413      	add	r3, r2
 8002c2a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c2e:	623b      	str	r3, [r7, #32]
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	801a      	strh	r2, [r3, #0]
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	801a      	strh	r2, [r3, #0]
 8002c54:	e061      	b.n	8002d1a <PCD_EP_ISR_Handler+0x6cc>
 8002c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c58:	785b      	ldrb	r3, [r3, #1]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d15d      	bne.n	8002d1a <PCD_EP_ISR_Handler+0x6cc>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c72:	4413      	add	r3, r2
 8002c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	011a      	lsls	r2, r3, #4
 8002c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7e:	4413      	add	r3, r2
 8002c80:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c88:	2200      	movs	r2, #0
 8002c8a:	801a      	strh	r2, [r3, #0]
 8002c8c:	e045      	b.n	8002d1a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c96:	785b      	ldrb	r3, [r3, #1]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d126      	bne.n	8002cea <PCD_EP_ISR_Handler+0x69c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb0:	4413      	add	r3, r2
 8002cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	011a      	lsls	r2, r3, #4
 8002cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd2:	801a      	strh	r2, [r3, #0]
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce6:	801a      	strh	r2, [r3, #0]
 8002ce8:	e017      	b.n	8002d1a <PCD_EP_ISR_Handler+0x6cc>
 8002cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cec:	785b      	ldrb	r3, [r3, #1]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d113      	bne.n	8002d1a <PCD_EP_ISR_Handler+0x6cc>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d00:	4413      	add	r3, r2
 8002d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	011a      	lsls	r2, r3, #4
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d16:	2200      	movs	r2, #0
 8002d18:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f005 fb4e 	bl	80083c2 <HAL_PCD_DataInStageCallback>
 8002d26:	e053      	b.n	8002dd0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002d28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d146      	bne.n	8002dc2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	461a      	mov	r2, r3
 8002d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	4413      	add	r3, r2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d5c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002d60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d907      	bls.n	8002d7c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d6e:	699a      	ldr	r2, [r3, #24]
 8002d70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002d74:	1ad2      	subs	r2, r2, r3
 8002d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d78:	619a      	str	r2, [r3, #24]
 8002d7a:	e002      	b.n	8002d82 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7e:	2200      	movs	r2, #0
 8002d80:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f005 fb16 	bl	80083c2 <HAL_PCD_DataInStageCallback>
 8002d96:	e01b      	b.n	8002dd0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002da0:	441a      	add	r2, r3
 8002da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002dae:	441a      	add	r2, r3
 8002db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f002 f824 	bl	8004e08 <USB_EPStartXfer>
 8002dc0:	e006      	b.n	8002dd0 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002dc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f91b 	bl	8003006 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	b21b      	sxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f6ff ac3b 	blt.w	8002658 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3758      	adds	r7, #88	@ 0x58
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d07e      	beq.n	8002f02 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4413      	add	r3, r2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e2c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	8b7b      	ldrh	r3, [r7, #26]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d306      	bcc.n	8002e46 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	8b7b      	ldrh	r3, [r7, #26]
 8002e3e:	1ad2      	subs	r2, r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	619a      	str	r2, [r3, #24]
 8002e44:	e002      	b.n	8002e4c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d123      	bne.n	8002e9c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e6e:	833b      	strh	r3, [r7, #24]
 8002e70:	8b3b      	ldrh	r3, [r7, #24]
 8002e72:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002e76:	833b      	strh	r3, [r7, #24]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	441a      	add	r2, r3
 8002e86:	8b3b      	ldrh	r3, [r7, #24]
 8002e88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01f      	beq.n	8002ee6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ebc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ec0:	82fb      	strh	r3, [r7, #22]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	441a      	add	r2, r3
 8002ed0:	8afb      	ldrh	r3, [r7, #22]
 8002ed2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ed6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ede:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ee6:	8b7b      	ldrh	r3, [r7, #26]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8087 	beq.w	8002ffc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	6959      	ldr	r1, [r3, #20]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	891a      	ldrh	r2, [r3, #8]
 8002efa:	8b7b      	ldrh	r3, [r7, #26]
 8002efc:	f003 fcb8 	bl	8006870 <USB_ReadPMA>
 8002f00:	e07c      	b.n	8002ffc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	3306      	adds	r3, #6
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	8b7b      	ldrh	r3, [r7, #26]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d306      	bcc.n	8002f44 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	8b7b      	ldrh	r3, [r7, #26]
 8002f3c:	1ad2      	subs	r2, r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	619a      	str	r2, [r3, #24]
 8002f42:	e002      	b.n	8002f4a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2200      	movs	r2, #0
 8002f48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d123      	bne.n	8002f9a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f6c:	83fb      	strh	r3, [r7, #30]
 8002f6e:	8bfb      	ldrh	r3, [r7, #30]
 8002f70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f74:	83fb      	strh	r3, [r7, #30]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	441a      	add	r2, r3
 8002f84:	8bfb      	ldrh	r3, [r7, #30]
 8002f86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002f8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d11f      	bne.n	8002fe4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fbe:	83bb      	strh	r3, [r7, #28]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	441a      	add	r2, r3
 8002fce:	8bbb      	ldrh	r3, [r7, #28]
 8002fd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fdc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fe4:	8b7b      	ldrh	r3, [r7, #26]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6959      	ldr	r1, [r3, #20]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	895a      	ldrh	r2, [r3, #10]
 8002ff6:	8b7b      	ldrh	r3, [r7, #26]
 8002ff8:	f003 fc3a 	bl	8006870 <USB_ReadPMA>
    }
  }

  return count;
 8002ffc:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b0a4      	sub	sp, #144	@ 0x90
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	4613      	mov	r3, r2
 8003012:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 81dd 	beq.w	80033da <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003028:	b29b      	uxth	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	3302      	adds	r3, #2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003048:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	699a      	ldr	r2, [r3, #24]
 8003050:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003054:	429a      	cmp	r2, r3
 8003056:	d907      	bls.n	8003068 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	699a      	ldr	r2, [r3, #24]
 800305c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003060:	1ad2      	subs	r2, r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	619a      	str	r2, [r3, #24]
 8003066:	e002      	b.n	800306e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2200      	movs	r2, #0
 800306c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	f040 80b9 	bne.w	80031ea <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	785b      	ldrb	r3, [r3, #1]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d126      	bne.n	80030ce <HAL_PCD_EP_DB_Transmit+0xc8>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003094:	4413      	add	r3, r2
 8003096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	011a      	lsls	r2, r3, #4
 800309e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a0:	4413      	add	r3, r2
 80030a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b6:	801a      	strh	r2, [r3, #0]
 80030b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ca:	801a      	strh	r2, [r3, #0]
 80030cc:	e01a      	b.n	8003104 <HAL_PCD_EP_DB_Transmit+0xfe>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	785b      	ldrb	r3, [r3, #1]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d116      	bne.n	8003104 <HAL_PCD_EP_DB_Transmit+0xfe>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	637b      	str	r3, [r7, #52]	@ 0x34
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ea:	4413      	add	r3, r2
 80030ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	011a      	lsls	r2, r3, #4
 80030f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f6:	4413      	add	r3, r2
 80030f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80030fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80030fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003100:	2200      	movs	r2, #0
 8003102:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	785b      	ldrb	r3, [r3, #1]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d126      	bne.n	8003160 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003120:	b29b      	uxth	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	011a      	lsls	r2, r3, #4
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	4413      	add	r3, r2
 8003134:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003144:	b29a      	uxth	r2, r3
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	801a      	strh	r2, [r3, #0]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003158:	b29a      	uxth	r2, r3
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	e017      	b.n	8003190 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d113      	bne.n	8003190 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003170:	b29b      	uxth	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	4413      	add	r3, r2
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	011a      	lsls	r2, r3, #4
 8003180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003182:	4413      	add	r3, r2
 8003184:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003188:	623b      	str	r3, [r7, #32]
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	2200      	movs	r2, #0
 800318e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f005 f913 	bl	80083c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800319c:	88fb      	ldrh	r3, [r7, #6]
 800319e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 82fc 	beq.w	80037a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031c2:	82fb      	strh	r3, [r7, #22]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	441a      	add	r2, r3
 80031d2:	8afb      	ldrh	r3, [r7, #22]
 80031d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	8013      	strh	r3, [r2, #0]
 80031e8:	e2da      	b.n	80037a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d021      	beq.n	8003238 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	b29b      	uxth	r3, r3
 8003206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800320a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800320e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	441a      	add	r2, r3
 8003220:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003224:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003228:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800322c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003234:	b29b      	uxth	r3, r3
 8003236:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800323e:	2b01      	cmp	r3, #1
 8003240:	f040 82ae 	bne.w	80037a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800324c:	441a      	add	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800325a:	441a      	add	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	6a1a      	ldr	r2, [r3, #32]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	429a      	cmp	r2, r3
 800326a:	d30b      	bcc.n	8003284 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6a1a      	ldr	r2, [r3, #32]
 8003278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800327c:	1ad2      	subs	r2, r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	621a      	str	r2, [r3, #32]
 8003282:	e017      	b.n	80032b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d108      	bne.n	800329e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800328c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003290:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800329c:	e00a      	b.n	80032b4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2200      	movs	r2, #0
 80032b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	785b      	ldrb	r3, [r3, #1]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d165      	bne.n	8003388 <HAL_PCD_EP_DB_Transmit+0x382>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032d0:	4413      	add	r3, r2
 80032d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	011a      	lsls	r2, r3, #4
 80032da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032dc:	4413      	add	r3, r2
 80032de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f2:	801a      	strh	r2, [r3, #0]
 80032f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80032fa:	d91d      	bls.n	8003338 <HAL_PCD_EP_DB_Transmit+0x332>
 80032fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003304:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <HAL_PCD_EP_DB_Transmit+0x310>
 8003310:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003312:	3b01      	subs	r3, #1
 8003314:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b29a      	uxth	r2, r3
 800331c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800331e:	b29b      	uxth	r3, r3
 8003320:	029b      	lsls	r3, r3, #10
 8003322:	b29b      	uxth	r3, r3
 8003324:	4313      	orrs	r3, r2
 8003326:	b29b      	uxth	r3, r3
 8003328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800332c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003330:	b29a      	uxth	r2, r3
 8003332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003334:	801a      	strh	r2, [r3, #0]
 8003336:	e044      	b.n	80033c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003338:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <HAL_PCD_EP_DB_Transmit+0x350>
 8003340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	b29b      	uxth	r3, r3
 8003346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800334a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800334e:	b29a      	uxth	r2, r3
 8003350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003352:	801a      	strh	r2, [r3, #0]
 8003354:	e035      	b.n	80033c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003356:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800335e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_PCD_EP_DB_Transmit+0x36a>
 800336a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800336c:	3301      	adds	r3, #1
 800336e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29a      	uxth	r2, r3
 8003376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003378:	b29b      	uxth	r3, r3
 800337a:	029b      	lsls	r3, r3, #10
 800337c:	b29b      	uxth	r3, r3
 800337e:	4313      	orrs	r3, r2
 8003380:	b29a      	uxth	r2, r3
 8003382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	e01c      	b.n	80033c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d118      	bne.n	80033c2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	647b      	str	r3, [r7, #68]	@ 0x44
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800339e:	b29b      	uxth	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033a4:	4413      	add	r3, r2
 80033a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	011a      	lsls	r2, r3, #4
 80033ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033b0:	4413      	add	r3, r2
 80033b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80033b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033bc:	b29a      	uxth	r2, r3
 80033be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6959      	ldr	r1, [r3, #20]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	891a      	ldrh	r2, [r3, #8]
 80033ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	f003 fa07 	bl	80067e6 <USB_WritePMA>
 80033d8:	e1e2      	b.n	80037a0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	3306      	adds	r3, #6
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	6812      	ldr	r2, [r2, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003402:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800340e:	429a      	cmp	r2, r3
 8003410:	d307      	bcc.n	8003422 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800341a:	1ad2      	subs	r2, r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	619a      	str	r2, [r3, #24]
 8003420:	e002      	b.n	8003428 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	2b00      	cmp	r3, #0
 800342e:	f040 80c0 	bne.w	80035b2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	785b      	ldrb	r3, [r3, #1]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d126      	bne.n	8003488 <HAL_PCD_EP_DB_Transmit+0x482>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003448:	b29b      	uxth	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800344e:	4413      	add	r3, r2
 8003450:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	011a      	lsls	r2, r3, #4
 8003458:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800345a:	4413      	add	r3, r2
 800345c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003460:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003462:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800346c:	b29a      	uxth	r2, r3
 800346e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003470:	801a      	strh	r2, [r3, #0]
 8003472:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800347c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003480:	b29a      	uxth	r2, r3
 8003482:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003484:	801a      	strh	r2, [r3, #0]
 8003486:	e01a      	b.n	80034be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	785b      	ldrb	r3, [r3, #1]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d116      	bne.n	80034be <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	667b      	str	r3, [r7, #100]	@ 0x64
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800349e:	b29b      	uxth	r3, r3
 80034a0:	461a      	mov	r2, r3
 80034a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034a4:	4413      	add	r3, r2
 80034a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	011a      	lsls	r2, r3, #4
 80034ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034b0:	4413      	add	r3, r2
 80034b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80034b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80034b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ba:	2200      	movs	r2, #0
 80034bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	785b      	ldrb	r3, [r3, #1]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d12b      	bne.n	8003524 <HAL_PCD_EP_DB_Transmit+0x51e>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034da:	b29b      	uxth	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034e0:	4413      	add	r3, r2
 80034e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	011a      	lsls	r2, r3, #4
 80034ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034ec:	4413      	add	r3, r2
 80034ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80034f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003502:	b29a      	uxth	r2, r3
 8003504:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003508:	801a      	strh	r2, [r3, #0]
 800350a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800351a:	b29a      	uxth	r2, r3
 800351c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003520:	801a      	strh	r2, [r3, #0]
 8003522:	e017      	b.n	8003554 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	785b      	ldrb	r3, [r3, #1]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d113      	bne.n	8003554 <HAL_PCD_EP_DB_Transmit+0x54e>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003534:	b29b      	uxth	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800353a:	4413      	add	r3, r2
 800353c:	677b      	str	r3, [r7, #116]	@ 0x74
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	011a      	lsls	r2, r3, #4
 8003544:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003546:	4413      	add	r3, r2
 8003548:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800354c:	673b      	str	r3, [r7, #112]	@ 0x70
 800354e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003550:	2200      	movs	r2, #0
 8003552:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f004 ff31 	bl	80083c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003560:	88fb      	ldrh	r3, [r7, #6]
 8003562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003566:	2b00      	cmp	r3, #0
 8003568:	f040 811a 	bne.w	80037a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29b      	uxth	r3, r3
 800357e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003586:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	441a      	add	r2, r3
 8003598:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800359c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	8013      	strh	r3, [r2, #0]
 80035b0:	e0f6      	b.n	80037a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d121      	bne.n	8003600 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	441a      	add	r2, r3
 80035e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80035ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80035f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80035f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003606:	2b01      	cmp	r3, #1
 8003608:	f040 80ca 	bne.w	80037a0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003614:	441a      	add	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	69da      	ldr	r2, [r3, #28]
 800361e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003622:	441a      	add	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	429a      	cmp	r2, r3
 8003632:	d30b      	bcc.n	800364c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	6a1a      	ldr	r2, [r3, #32]
 8003640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003644:	1ad2      	subs	r2, r2, r3
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	621a      	str	r2, [r3, #32]
 800364a:	e017      	b.n	800367c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d108      	bne.n	8003666 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003654:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003658:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003664:	e00a      	b.n	800367c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2200      	movs	r2, #0
 8003672:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	657b      	str	r3, [r7, #84]	@ 0x54
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	785b      	ldrb	r3, [r3, #1]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d165      	bne.n	8003756 <HAL_PCD_EP_DB_Transmit+0x750>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003698:	b29b      	uxth	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800369e:	4413      	add	r3, r2
 80036a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	011a      	lsls	r2, r3, #4
 80036a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036aa:	4413      	add	r3, r2
 80036ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036bc:	b29a      	uxth	r2, r3
 80036be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036c0:	801a      	strh	r2, [r3, #0]
 80036c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80036c8:	d91d      	bls.n	8003706 <HAL_PCD_EP_DB_Transmit+0x700>
 80036ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d102      	bne.n	80036e4 <HAL_PCD_EP_DB_Transmit+0x6de>
 80036de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036e0:	3b01      	subs	r3, #1
 80036e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	029b      	lsls	r3, r3, #10
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	4313      	orrs	r3, r2
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036fe:	b29a      	uxth	r2, r3
 8003700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003702:	801a      	strh	r2, [r3, #0]
 8003704:	e041      	b.n	800378a <HAL_PCD_EP_DB_Transmit+0x784>
 8003706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <HAL_PCD_EP_DB_Transmit+0x71e>
 800370e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	b29b      	uxth	r3, r3
 8003714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800371c:	b29a      	uxth	r2, r3
 800371e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	e032      	b.n	800378a <HAL_PCD_EP_DB_Transmit+0x784>
 8003724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003728:	085b      	lsrs	r3, r3, #1
 800372a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800372c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <HAL_PCD_EP_DB_Transmit+0x738>
 8003738:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800373a:	3301      	adds	r3, #1
 800373c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800373e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b29a      	uxth	r2, r3
 8003744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003746:	b29b      	uxth	r3, r3
 8003748:	029b      	lsls	r3, r3, #10
 800374a:	b29b      	uxth	r3, r3
 800374c:	4313      	orrs	r3, r2
 800374e:	b29a      	uxth	r2, r3
 8003750:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003752:	801a      	strh	r2, [r3, #0]
 8003754:	e019      	b.n	800378a <HAL_PCD_EP_DB_Transmit+0x784>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	785b      	ldrb	r3, [r3, #1]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d115      	bne.n	800378a <HAL_PCD_EP_DB_Transmit+0x784>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003766:	b29b      	uxth	r3, r3
 8003768:	461a      	mov	r2, r3
 800376a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376c:	4413      	add	r3, r2
 800376e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	011a      	lsls	r2, r3, #4
 8003776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003778:	4413      	add	r3, r2
 800377a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800377e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003780:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003784:	b29a      	uxth	r2, r3
 8003786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003788:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	6959      	ldr	r1, [r3, #20]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	895a      	ldrh	r2, [r3, #10]
 8003796:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800379a:	b29b      	uxth	r3, r3
 800379c:	f003 f823 	bl	80067e6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037ba:	82bb      	strh	r3, [r7, #20]
 80037bc:	8abb      	ldrh	r3, [r7, #20]
 80037be:	f083 0310 	eor.w	r3, r3, #16
 80037c2:	82bb      	strh	r3, [r7, #20]
 80037c4:	8abb      	ldrh	r3, [r7, #20]
 80037c6:	f083 0320 	eor.w	r3, r3, #32
 80037ca:	82bb      	strh	r3, [r7, #20]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	8abb      	ldrh	r3, [r7, #20]
 80037dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3790      	adds	r7, #144	@ 0x90
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b087      	sub	sp, #28
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	817b      	strh	r3, [r7, #10]
 8003808:	4613      	mov	r3, r2
 800380a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800380c:	897b      	ldrh	r3, [r7, #10]
 800380e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00b      	beq.n	8003830 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003818:	897b      	ldrh	r3, [r7, #10]
 800381a:	f003 0207 	and.w	r2, r3, #7
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	3310      	adds	r3, #16
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e009      	b.n	8003844 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003830:	897a      	ldrh	r2, [r7, #10]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4413      	add	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003844:	893b      	ldrh	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	b29a      	uxth	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	80da      	strh	r2, [r3, #6]
 8003858:	e00b      	b.n	8003872 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2201      	movs	r2, #1
 800385e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	b29a      	uxth	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	0c1b      	lsrs	r3, r3, #16
 800386c:	b29a      	uxth	r2, r3
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	bc80      	pop	{r7}
 800387c:	4770      	bx	lr
	...

08003880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e272      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8087 	beq.w	80039ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038a0:	4b92      	ldr	r3, [pc, #584]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d00c      	beq.n	80038c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038ac:	4b8f      	ldr	r3, [pc, #572]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d112      	bne.n	80038de <HAL_RCC_OscConfig+0x5e>
 80038b8:	4b8c      	ldr	r3, [pc, #560]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038c4:	d10b      	bne.n	80038de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c6:	4b89      	ldr	r3, [pc, #548]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d06c      	beq.n	80039ac <HAL_RCC_OscConfig+0x12c>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d168      	bne.n	80039ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e24c      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e6:	d106      	bne.n	80038f6 <HAL_RCC_OscConfig+0x76>
 80038e8:	4b80      	ldr	r3, [pc, #512]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a7f      	ldr	r2, [pc, #508]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 80038ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	e02e      	b.n	8003954 <HAL_RCC_OscConfig+0xd4>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10c      	bne.n	8003918 <HAL_RCC_OscConfig+0x98>
 80038fe:	4b7b      	ldr	r3, [pc, #492]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a7a      	ldr	r2, [pc, #488]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	4b78      	ldr	r3, [pc, #480]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a77      	ldr	r2, [pc, #476]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003910:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e01d      	b.n	8003954 <HAL_RCC_OscConfig+0xd4>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003920:	d10c      	bne.n	800393c <HAL_RCC_OscConfig+0xbc>
 8003922:	4b72      	ldr	r3, [pc, #456]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a71      	ldr	r2, [pc, #452]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	4b6f      	ldr	r3, [pc, #444]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a6e      	ldr	r2, [pc, #440]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e00b      	b.n	8003954 <HAL_RCC_OscConfig+0xd4>
 800393c:	4b6b      	ldr	r3, [pc, #428]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a6a      	ldr	r2, [pc, #424]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b68      	ldr	r3, [pc, #416]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a67      	ldr	r2, [pc, #412]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 800394e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003952:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fc febc 	bl	80006d8 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003964:	f7fc feb8 	bl	80006d8 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b64      	cmp	r3, #100	@ 0x64
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e200      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b5d      	ldr	r3, [pc, #372]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0xe4>
 8003982:	e014      	b.n	80039ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fc fea8 	bl	80006d8 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800398c:	f7fc fea4 	bl	80006d8 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	@ 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e1ec      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399e:	4b53      	ldr	r3, [pc, #332]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x10c>
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d063      	beq.n	8003a82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ba:	4b4c      	ldr	r3, [pc, #304]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039c6:	4b49      	ldr	r3, [pc, #292]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d11c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x18c>
 80039d2:	4b46      	ldr	r3, [pc, #280]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d116      	bne.n	8003a0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039de:	4b43      	ldr	r3, [pc, #268]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_RCC_OscConfig+0x176>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e1c0      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f6:	4b3d      	ldr	r3, [pc, #244]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4939      	ldr	r1, [pc, #228]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0a:	e03a      	b.n	8003a82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a14:	4b36      	ldr	r3, [pc, #216]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1a:	f7fc fe5d 	bl	80006d8 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a22:	f7fc fe59 	bl	80006d8 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e1a1      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a34:	4b2d      	ldr	r3, [pc, #180]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a40:	4b2a      	ldr	r3, [pc, #168]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4927      	ldr	r1, [pc, #156]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]
 8003a54:	e015      	b.n	8003a82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a56:	4b26      	ldr	r3, [pc, #152]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fc fe3c 	bl	80006d8 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a64:	f7fc fe38 	bl	80006d8 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e180      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a76:	4b1d      	ldr	r3, [pc, #116]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d03a      	beq.n	8003b04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d019      	beq.n	8003aca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a96:	4b17      	ldr	r3, [pc, #92]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9c:	f7fc fe1c 	bl	80006d8 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7fc fe18 	bl	80006d8 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e160      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8003aec <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f000 faba 	bl	800403c <RCC_Delay>
 8003ac8:	e01c      	b.n	8003b04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aca:	4b0a      	ldr	r3, [pc, #40]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad0:	f7fc fe02 	bl	80006d8 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad6:	e00f      	b.n	8003af8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad8:	f7fc fdfe 	bl	80006d8 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d908      	bls.n	8003af8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e146      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
 8003af0:	42420000 	.word	0x42420000
 8003af4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	4b92      	ldr	r3, [pc, #584]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e9      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80a6 	beq.w	8003c5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b16:	4b8b      	ldr	r3, [pc, #556]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10d      	bne.n	8003b3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b22:	4b88      	ldr	r3, [pc, #544]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	4a87      	ldr	r2, [pc, #540]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b2c:	61d3      	str	r3, [r2, #28]
 8003b2e:	4b85      	ldr	r3, [pc, #532]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3e:	4b82      	ldr	r3, [pc, #520]	@ (8003d48 <HAL_RCC_OscConfig+0x4c8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d118      	bne.n	8003b7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d48 <HAL_RCC_OscConfig+0x4c8>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d48 <HAL_RCC_OscConfig+0x4c8>)
 8003b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b56:	f7fc fdbf 	bl	80006d8 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5e:	f7fc fdbb 	bl	80006d8 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b64      	cmp	r3, #100	@ 0x64
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e103      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	4b75      	ldr	r3, [pc, #468]	@ (8003d48 <HAL_RCC_OscConfig+0x4c8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d106      	bne.n	8003b92 <HAL_RCC_OscConfig+0x312>
 8003b84:	4b6f      	ldr	r3, [pc, #444]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	4a6e      	ldr	r2, [pc, #440]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	f043 0301 	orr.w	r3, r3, #1
 8003b8e:	6213      	str	r3, [r2, #32]
 8003b90:	e02d      	b.n	8003bee <HAL_RCC_OscConfig+0x36e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x334>
 8003b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	4a69      	ldr	r2, [pc, #420]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6213      	str	r3, [r2, #32]
 8003ba6:	4b67      	ldr	r3, [pc, #412]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	4a66      	ldr	r2, [pc, #408]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	f023 0304 	bic.w	r3, r3, #4
 8003bb0:	6213      	str	r3, [r2, #32]
 8003bb2:	e01c      	b.n	8003bee <HAL_RCC_OscConfig+0x36e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b05      	cmp	r3, #5
 8003bba:	d10c      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x356>
 8003bbc:	4b61      	ldr	r3, [pc, #388]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4a60      	ldr	r2, [pc, #384]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003bc2:	f043 0304 	orr.w	r3, r3, #4
 8003bc6:	6213      	str	r3, [r2, #32]
 8003bc8:	4b5e      	ldr	r3, [pc, #376]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4a5d      	ldr	r2, [pc, #372]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6213      	str	r3, [r2, #32]
 8003bd4:	e00b      	b.n	8003bee <HAL_RCC_OscConfig+0x36e>
 8003bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4a5a      	ldr	r2, [pc, #360]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	6213      	str	r3, [r2, #32]
 8003be2:	4b58      	ldr	r3, [pc, #352]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	4a57      	ldr	r2, [pc, #348]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	f023 0304 	bic.w	r3, r3, #4
 8003bec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d015      	beq.n	8003c22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf6:	f7fc fd6f 	bl	80006d8 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fc fd6b 	bl	80006d8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e0b1      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c14:	4b4b      	ldr	r3, [pc, #300]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d0ee      	beq.n	8003bfe <HAL_RCC_OscConfig+0x37e>
 8003c20:	e014      	b.n	8003c4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c22:	f7fc fd59 	bl	80006d8 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c28:	e00a      	b.n	8003c40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2a:	f7fc fd55 	bl	80006d8 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e09b      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c40:	4b40      	ldr	r3, [pc, #256]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1ee      	bne.n	8003c2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c52:	4b3c      	ldr	r3, [pc, #240]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	4a3b      	ldr	r2, [pc, #236]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8087 	beq.w	8003d76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c68:	4b36      	ldr	r3, [pc, #216]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d061      	beq.n	8003d38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d146      	bne.n	8003d0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7c:	4b33      	ldr	r3, [pc, #204]	@ (8003d4c <HAL_RCC_OscConfig+0x4cc>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c82:	f7fc fd29 	bl	80006d8 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8a:	f7fc fd25 	bl	80006d8 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e06d      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c9c:	4b29      	ldr	r3, [pc, #164]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb0:	d108      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cb2:	4b24      	ldr	r3, [pc, #144]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	4921      	ldr	r1, [pc, #132]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a19      	ldr	r1, [r3, #32]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	491b      	ldr	r1, [pc, #108]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d4c <HAL_RCC_OscConfig+0x4cc>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce2:	f7fc fcf9 	bl	80006d8 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cea:	f7fc fcf5 	bl	80006d8 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e03d      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x46a>
 8003d08:	e035      	b.n	8003d76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0a:	4b10      	ldr	r3, [pc, #64]	@ (8003d4c <HAL_RCC_OscConfig+0x4cc>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fc fce2 	bl	80006d8 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d18:	f7fc fcde 	bl	80006d8 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e026      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d2a:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_RCC_OscConfig+0x4c4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x498>
 8003d36:	e01e      	b.n	8003d76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e019      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40007000 	.word	0x40007000
 8003d4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d50:	4b0b      	ldr	r3, [pc, #44]	@ (8003d80 <HAL_RCC_OscConfig+0x500>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d001      	beq.n	8003d76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40021000 	.word	0x40021000

08003d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0d0      	b.n	8003f3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b6a      	ldr	r3, [pc, #424]	@ (8003f44 <HAL_RCC_ClockConfig+0x1c0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d910      	bls.n	8003dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b67      	ldr	r3, [pc, #412]	@ (8003f44 <HAL_RCC_ClockConfig+0x1c0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 0207 	bic.w	r2, r3, #7
 8003dae:	4965      	ldr	r1, [pc, #404]	@ (8003f44 <HAL_RCC_ClockConfig+0x1c0>)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	4b63      	ldr	r3, [pc, #396]	@ (8003f44 <HAL_RCC_ClockConfig+0x1c0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0b8      	b.n	8003f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d020      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003de0:	4b59      	ldr	r3, [pc, #356]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4a58      	ldr	r2, [pc, #352]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003de6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003dea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0308 	and.w	r3, r3, #8
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003df8:	4b53      	ldr	r3, [pc, #332]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4a52      	ldr	r2, [pc, #328]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003e02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e04:	4b50      	ldr	r3, [pc, #320]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	494d      	ldr	r1, [pc, #308]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d040      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d107      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2a:	4b47      	ldr	r3, [pc, #284]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d115      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e07f      	b.n	8003f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e42:	4b41      	ldr	r3, [pc, #260]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e073      	b.n	8003f3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e52:	4b3d      	ldr	r3, [pc, #244]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e06b      	b.n	8003f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e62:	4b39      	ldr	r3, [pc, #228]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f023 0203 	bic.w	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4936      	ldr	r1, [pc, #216]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e74:	f7fc fc30 	bl	80006d8 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7c:	f7fc fc2c 	bl	80006d8 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e053      	b.n	8003f3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	4b2d      	ldr	r3, [pc, #180]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 020c 	and.w	r2, r3, #12
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d1eb      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b27      	ldr	r3, [pc, #156]	@ (8003f44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d210      	bcs.n	8003ed4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b24      	ldr	r3, [pc, #144]	@ (8003f44 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f023 0207 	bic.w	r2, r3, #7
 8003eba:	4922      	ldr	r1, [pc, #136]	@ (8003f44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec2:	4b20      	ldr	r3, [pc, #128]	@ (8003f44 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e032      	b.n	8003f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d008      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee0:	4b19      	ldr	r3, [pc, #100]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	4916      	ldr	r1, [pc, #88]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003efe:	4b12      	ldr	r3, [pc, #72]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	490e      	ldr	r1, [pc, #56]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f12:	f000 f821 	bl	8003f58 <HAL_RCC_GetSysClockFreq>
 8003f16:	4602      	mov	r2, r0
 8003f18:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	091b      	lsrs	r3, r3, #4
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	490a      	ldr	r1, [pc, #40]	@ (8003f4c <HAL_RCC_ClockConfig+0x1c8>)
 8003f24:	5ccb      	ldrb	r3, [r1, r3]
 8003f26:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2a:	4a09      	ldr	r2, [pc, #36]	@ (8003f50 <HAL_RCC_ClockConfig+0x1cc>)
 8003f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f2e:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <HAL_RCC_ClockConfig+0x1d0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fc fb8e 	bl	8000654 <HAL_InitTick>

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40022000 	.word	0x40022000
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	08008928 	.word	0x08008928
 8003f50:	20000000 	.word	0x20000000
 8003f54:	20000004 	.word	0x20000004

08003f58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	2300      	movs	r3, #0
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f72:	4b1e      	ldr	r3, [pc, #120]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x94>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d002      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x30>
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d003      	beq.n	8003f8e <HAL_RCC_GetSysClockFreq+0x36>
 8003f86:	e027      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f88:	4b19      	ldr	r3, [pc, #100]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f8a:	613b      	str	r3, [r7, #16]
      break;
 8003f8c:	e027      	b.n	8003fde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	0c9b      	lsrs	r3, r3, #18
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	4a17      	ldr	r2, [pc, #92]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f98:	5cd3      	ldrb	r3, [r2, r3]
 8003f9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d010      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fa6:	4b11      	ldr	r3, [pc, #68]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x94>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	0c5b      	lsrs	r3, r3, #17
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	4a11      	ldr	r2, [pc, #68]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fb2:	5cd3      	ldrb	r3, [r2, r3]
 8003fb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fba:	fb03 f202 	mul.w	r2, r3, r2
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	e004      	b.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a0c      	ldr	r2, [pc, #48]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fcc:	fb02 f303 	mul.w	r3, r2, r3
 8003fd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	613b      	str	r3, [r7, #16]
      break;
 8003fd6:	e002      	b.n	8003fde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fd8:	4b05      	ldr	r3, [pc, #20]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fda:	613b      	str	r3, [r7, #16]
      break;
 8003fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fde:	693b      	ldr	r3, [r7, #16]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	371c      	adds	r7, #28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	007a1200 	.word	0x007a1200
 8003ff4:	08008940 	.word	0x08008940
 8003ff8:	08008950 	.word	0x08008950
 8003ffc:	003d0900 	.word	0x003d0900

08004000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004004:	4b02      	ldr	r3, [pc, #8]	@ (8004010 <HAL_RCC_GetHCLKFreq+0x10>)
 8004006:	681b      	ldr	r3, [r3, #0]
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	20000000 	.word	0x20000000

08004014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004018:	f7ff fff2 	bl	8004000 <HAL_RCC_GetHCLKFreq>
 800401c:	4602      	mov	r2, r0
 800401e:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	4903      	ldr	r1, [pc, #12]	@ (8004038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800402a:	5ccb      	ldrb	r3, [r1, r3]
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004030:	4618      	mov	r0, r3
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000
 8004038:	08008938 	.word	0x08008938

0800403c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004044:	4b0a      	ldr	r3, [pc, #40]	@ (8004070 <RCC_Delay+0x34>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0a      	ldr	r2, [pc, #40]	@ (8004074 <RCC_Delay+0x38>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0a5b      	lsrs	r3, r3, #9
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004058:	bf00      	nop
  }
  while (Delay --);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1e5a      	subs	r2, r3, #1
 800405e:	60fa      	str	r2, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f9      	bne.n	8004058 <RCC_Delay+0x1c>
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr
 8004070:	20000000 	.word	0x20000000
 8004074:	10624dd3 	.word	0x10624dd3

08004078 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d07d      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004094:	2300      	movs	r3, #0
 8004096:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004098:	4b4f      	ldr	r3, [pc, #316]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10d      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a4:	4b4c      	ldr	r3, [pc, #304]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	4a4b      	ldr	r2, [pc, #300]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ae:	61d3      	str	r3, [r2, #28]
 80040b0:	4b49      	ldr	r3, [pc, #292]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040bc:	2301      	movs	r3, #1
 80040be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c0:	4b46      	ldr	r3, [pc, #280]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d118      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040cc:	4b43      	ldr	r3, [pc, #268]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a42      	ldr	r2, [pc, #264]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d8:	f7fc fafe 	bl	80006d8 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040de:	e008      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e0:	f7fc fafa 	bl	80006d8 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	@ 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e06d      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f2:	4b3a      	ldr	r3, [pc, #232]	@ (80041dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040fe:	4b36      	ldr	r3, [pc, #216]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004106:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d02e      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	429a      	cmp	r2, r3
 800411a:	d027      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800411c:	4b2e      	ldr	r3, [pc, #184]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004124:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004126:	4b2e      	ldr	r3, [pc, #184]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800412c:	4b2c      	ldr	r3, [pc, #176]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004132:	4a29      	ldr	r2, [pc, #164]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d014      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004142:	f7fc fac9 	bl	80006d8 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004148:	e00a      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414a:	f7fc fac5 	bl	80006d8 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004158:	4293      	cmp	r3, r2
 800415a:	d901      	bls.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e036      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004160:	4b1d      	ldr	r3, [pc, #116]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ee      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800416c:	4b1a      	ldr	r3, [pc, #104]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4917      	ldr	r1, [pc, #92]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417a:	4313      	orrs	r3, r2
 800417c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d105      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004184:	4b14      	ldr	r3, [pc, #80]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	4a13      	ldr	r2, [pc, #76]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800418e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800419c:	4b0e      	ldr	r3, [pc, #56]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	490b      	ldr	r1, [pc, #44]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041ba:	4b07      	ldr	r3, [pc, #28]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	4904      	ldr	r1, [pc, #16]	@ (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40007000 	.word	0x40007000
 80041e0:	42420440 	.word	0x42420440

080041e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	4638      	mov	r0, r7
 80041ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr

080041fe <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800420e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004212:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr

0800422a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004232:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004236:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	b29b      	uxth	r3, r3
 8004244:	43db      	mvns	r3, r3
 8004246:	b29b      	uxth	r3, r3
 8004248:	4013      	ands	r3, r2
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr

0800425e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	460b      	mov	r3, r1
 8004268:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr

08004276 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004276:	b480      	push	{r7}
 8004278:	b085      	sub	sp, #20
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	4638      	mov	r0, r7
 8004280:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b09d      	sub	sp, #116	@ 0x74
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80042d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042d6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	78db      	ldrb	r3, [r3, #3]
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d81f      	bhi.n	8004322 <USB_ActivateEndpoint+0x72>
 80042e2:	a201      	add	r2, pc, #4	@ (adr r2, 80042e8 <USB_ActivateEndpoint+0x38>)
 80042e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e8:	080042f9 	.word	0x080042f9
 80042ec:	08004315 	.word	0x08004315
 80042f0:	0800432b 	.word	0x0800432b
 80042f4:	08004307 	.word	0x08004307
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80042f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80042fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004300:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004304:	e012      	b.n	800432c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004306:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800430a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800430e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004312:	e00b      	b.n	800432c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004314:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004318:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800431c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004320:	e004      	b.n	800432c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8004328:	e000      	b.n	800432c <USB_ActivateEndpoint+0x7c>
      break;
 800432a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	441a      	add	r2, r3
 8004336:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800433a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800433e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800434a:	b29b      	uxth	r3, r3
 800434c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29b      	uxth	r3, r3
 800435c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004364:	b29b      	uxth	r3, r3
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	7812      	ldrb	r2, [r2, #0]
 800436a:	4313      	orrs	r3, r2
 800436c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	441a      	add	r2, r3
 800437a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800437e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800438a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800438e:	b29b      	uxth	r3, r3
 8004390:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	7b1b      	ldrb	r3, [r3, #12]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f040 8178 	bne.w	800468c <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	785b      	ldrb	r3, [r3, #1]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8084 	beq.w	80044ae <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	461a      	mov	r2, r3
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	4413      	add	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	011a      	lsls	r2, r3, #4
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	88db      	ldrh	r3, [r3, #6]
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	827b      	strh	r3, [r7, #18]
 80043e8:	8a7b      	ldrh	r3, [r7, #18]
 80043ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01b      	beq.n	800442a <USB_ActivateEndpoint+0x17a>
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004408:	823b      	strh	r3, [r7, #16]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	441a      	add	r2, r3
 8004414:	8a3b      	ldrh	r3, [r7, #16]
 8004416:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800441a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800441e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004422:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004426:	b29b      	uxth	r3, r3
 8004428:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	78db      	ldrb	r3, [r3, #3]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d020      	beq.n	8004474 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004448:	81bb      	strh	r3, [r7, #12]
 800444a:	89bb      	ldrh	r3, [r7, #12]
 800444c:	f083 0320 	eor.w	r3, r3, #32
 8004450:	81bb      	strh	r3, [r7, #12]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	441a      	add	r2, r3
 800445c:	89bb      	ldrh	r3, [r7, #12]
 800445e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800446a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800446e:	b29b      	uxth	r3, r3
 8004470:	8013      	strh	r3, [r2, #0]
 8004472:	e2d5      	b.n	8004a20 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800448a:	81fb      	strh	r3, [r7, #14]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	441a      	add	r2, r3
 8004496:	89fb      	ldrh	r3, [r7, #14]
 8004498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800449c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	8013      	strh	r3, [r2, #0]
 80044ac:	e2b8      	b.n	8004a20 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	4413      	add	r3, r2
 80044c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	011a      	lsls	r2, r3, #4
 80044c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80044d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	88db      	ldrh	r3, [r3, #6]
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	b29b      	uxth	r3, r3
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e0:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f2:	4413      	add	r3, r2
 80044f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	011a      	lsls	r2, r3, #4
 80044fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fe:	4413      	add	r3, r2
 8004500:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004510:	b29a      	uxth	r2, r3
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	801a      	strh	r2, [r3, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b3e      	cmp	r3, #62	@ 0x3e
 800451c:	d91d      	bls.n	800455a <USB_ActivateEndpoint+0x2aa>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <USB_ActivateEndpoint+0x288>
 8004532:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004534:	3b01      	subs	r3, #1
 8004536:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29a      	uxth	r2, r3
 800453e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004540:	b29b      	uxth	r3, r3
 8004542:	029b      	lsls	r3, r3, #10
 8004544:	b29b      	uxth	r3, r3
 8004546:	4313      	orrs	r3, r2
 8004548:	b29b      	uxth	r3, r3
 800454a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800454e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004552:	b29a      	uxth	r2, r3
 8004554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004556:	801a      	strh	r2, [r3, #0]
 8004558:	e026      	b.n	80045a8 <USB_ActivateEndpoint+0x2f8>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <USB_ActivateEndpoint+0x2c8>
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800456c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004570:	b29a      	uxth	r2, r3
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	e017      	b.n	80045a8 <USB_ActivateEndpoint+0x2f8>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <USB_ActivateEndpoint+0x2e2>
 800458c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800458e:	3301      	adds	r3, #1
 8004590:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29a      	uxth	r2, r3
 8004598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800459a:	b29b      	uxth	r3, r3
 800459c:	029b      	lsls	r3, r3, #10
 800459e:	b29b      	uxth	r3, r3
 80045a0:	4313      	orrs	r3, r2
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80045b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80045b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01b      	beq.n	80045f8 <USB_ActivateEndpoint+0x348>
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d6:	843b      	strh	r3, [r7, #32]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	441a      	add	r2, r3
 80045e2:	8c3b      	ldrh	r3, [r7, #32]
 80045e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d124      	bne.n	800464a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004616:	83bb      	strh	r3, [r7, #28]
 8004618:	8bbb      	ldrh	r3, [r7, #28]
 800461a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800461e:	83bb      	strh	r3, [r7, #28]
 8004620:	8bbb      	ldrh	r3, [r7, #28]
 8004622:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004626:	83bb      	strh	r3, [r7, #28]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	441a      	add	r2, r3
 8004632:	8bbb      	ldrh	r3, [r7, #28]
 8004634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800463c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004644:	b29b      	uxth	r3, r3
 8004646:	8013      	strh	r3, [r2, #0]
 8004648:	e1ea      	b.n	8004a20 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800465c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004660:	83fb      	strh	r3, [r7, #30]
 8004662:	8bfb      	ldrh	r3, [r7, #30]
 8004664:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004668:	83fb      	strh	r3, [r7, #30]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	441a      	add	r2, r3
 8004674:	8bfb      	ldrh	r3, [r7, #30]
 8004676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800467a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800467e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004686:	b29b      	uxth	r3, r3
 8004688:	8013      	strh	r3, [r2, #0]
 800468a:	e1c9      	b.n	8004a20 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	78db      	ldrb	r3, [r3, #3]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d11e      	bne.n	80046d2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046aa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	441a      	add	r2, r3
 80046b8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80046bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046c4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80046c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	8013      	strh	r3, [r2, #0]
 80046d0:	e01d      	b.n	800470e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80046e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	441a      	add	r2, r3
 80046f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80046fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470a:	b29b      	uxth	r3, r3
 800470c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004718:	b29b      	uxth	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800471e:	4413      	add	r3, r2
 8004720:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	011a      	lsls	r2, r3, #4
 8004728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800472a:	4413      	add	r3, r2
 800472c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004730:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	891b      	ldrh	r3, [r3, #8]
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	b29b      	uxth	r3, r3
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004740:	801a      	strh	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	657b      	str	r3, [r7, #84]	@ 0x54
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800474c:	b29b      	uxth	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004752:	4413      	add	r3, r2
 8004754:	657b      	str	r3, [r7, #84]	@ 0x54
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	011a      	lsls	r2, r3, #4
 800475c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800475e:	4413      	add	r3, r2
 8004760:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004764:	653b      	str	r3, [r7, #80]	@ 0x50
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	895b      	ldrh	r3, [r3, #10]
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	b29b      	uxth	r3, r3
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004774:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 8093 	bne.w	80048a6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004790:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01b      	beq.n	80047d4 <USB_ActivateEndpoint+0x524>
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	441a      	add	r2, r3
 80047be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80047c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80047e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80047e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01b      	beq.n	8004824 <USB_ActivateEndpoint+0x574>
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004802:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004810:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004814:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004818:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800481c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004820:	b29b      	uxth	r3, r3
 8004822:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800483c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800483e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004842:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004844:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004846:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800484a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004858:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800485c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004868:	b29b      	uxth	r3, r3
 800486a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	b29b      	uxth	r3, r3
 800487a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800487e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004882:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	441a      	add	r2, r3
 800488e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004890:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004894:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004898:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800489c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	8013      	strh	r3, [r2, #0]
 80048a4:	e0bc      	b.n	8004a20 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80048b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80048ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d01d      	beq.n	80048fe <USB_ActivateEndpoint+0x64e>
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	441a      	add	r2, r3
 80048e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80048ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800490e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d01d      	beq.n	8004956 <USB_ActivateEndpoint+0x6a6>
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800492c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004930:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	441a      	add	r2, r3
 800493e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800494e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	78db      	ldrb	r3, [r3, #3]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d024      	beq.n	80049a8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004974:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004978:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800497c:	f083 0320 	eor.w	r3, r3, #32
 8004980:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	441a      	add	r2, r3
 800498e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800499a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800499e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	8013      	strh	r3, [r2, #0]
 80049a6:	e01d      	b.n	80049e4 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80049d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	441a      	add	r2, r3
 8004a08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004a0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004a20:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3774      	adds	r7, #116	@ 0x74
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop

08004a30 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b08d      	sub	sp, #52	@ 0x34
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	7b1b      	ldrb	r3, [r3, #12]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f040 808e 	bne.w	8004b60 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d044      	beq.n	8004ad6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	81bb      	strh	r3, [r7, #12]
 8004a5a:	89bb      	ldrh	r3, [r7, #12]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01b      	beq.n	8004a9c <USB_DeactivateEndpoint+0x6c>
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7a:	817b      	strh	r3, [r7, #10]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	441a      	add	r2, r3
 8004a86:	897b      	ldrh	r3, [r7, #10]
 8004a88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ab2:	813b      	strh	r3, [r7, #8]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	441a      	add	r2, r3
 8004abe:	893b      	ldrh	r3, [r7, #8]
 8004ac0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ac4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	8013      	strh	r3, [r2, #0]
 8004ad4:	e192      	b.n	8004dfc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	827b      	strh	r3, [r7, #18]
 8004ae4:	8a7b      	ldrh	r3, [r7, #18]
 8004ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01b      	beq.n	8004b26 <USB_DeactivateEndpoint+0xf6>
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b04:	823b      	strh	r3, [r7, #16]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	8a3b      	ldrh	r3, [r7, #16]
 8004b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3c:	81fb      	strh	r3, [r7, #14]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	441a      	add	r2, r3
 8004b48:	89fb      	ldrh	r3, [r7, #14]
 8004b4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	8013      	strh	r3, [r2, #0]
 8004b5e:	e14d      	b.n	8004dfc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f040 80a5 	bne.w	8004cb4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	843b      	strh	r3, [r7, #32]
 8004b78:	8c3b      	ldrh	r3, [r7, #32]
 8004b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01b      	beq.n	8004bba <USB_DeactivateEndpoint+0x18a>
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b98:	83fb      	strh	r3, [r7, #30]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	441a      	add	r2, r3
 8004ba4:	8bfb      	ldrh	r3, [r7, #30]
 8004ba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004baa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	83bb      	strh	r3, [r7, #28]
 8004bc8:	8bbb      	ldrh	r3, [r7, #28]
 8004bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01b      	beq.n	8004c0a <USB_DeactivateEndpoint+0x1da>
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004be8:	837b      	strh	r3, [r7, #26]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	441a      	add	r2, r3
 8004bf4:	8b7b      	ldrh	r3, [r7, #26]
 8004bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	4413      	add	r3, r2
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c20:	833b      	strh	r3, [r7, #24]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	441a      	add	r2, r3
 8004c2c:	8b3b      	ldrh	r3, [r7, #24]
 8004c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c58:	82fb      	strh	r3, [r7, #22]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	441a      	add	r2, r3
 8004c64:	8afb      	ldrh	r3, [r7, #22]
 8004c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c90:	82bb      	strh	r3, [r7, #20]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	441a      	add	r2, r3
 8004c9c:	8abb      	ldrh	r3, [r7, #20]
 8004c9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ca2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	8013      	strh	r3, [r2, #0]
 8004cb2:	e0a3      	b.n	8004dfc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004cc2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004cc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d01b      	beq.n	8004d04 <USB_DeactivateEndpoint+0x2d4>
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	441a      	add	r2, r3
 8004cee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004cf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004d12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01b      	beq.n	8004d54 <USB_DeactivateEndpoint+0x324>
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d32:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	441a      	add	r2, r3
 8004d3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004d40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d6a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	441a      	add	r2, r3
 8004d76:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004d78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004da2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	441a      	add	r2, r3
 8004dae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004db0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004db4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004db8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dda:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	441a      	add	r2, r3
 8004de6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004de8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004df0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3734      	adds	r7, #52	@ 0x34
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b0c2      	sub	sp, #264	@ 0x108
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e16:	6018      	str	r0, [r3, #0]
 8004e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e20:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	785b      	ldrb	r3, [r3, #1]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	f040 86b7 	bne.w	8005ba2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699a      	ldr	r2, [r3, #24]
 8004e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d908      	bls.n	8004e62 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004e60:	e007      	b.n	8004e72 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	7b1b      	ldrb	r3, [r3, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d13a      	bne.n	8004ef8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6959      	ldr	r1, [r3, #20]
 8004e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	88da      	ldrh	r2, [r3, #6]
 8004e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004ea4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004ea8:	6800      	ldr	r0, [r0, #0]
 8004eaa:	f001 fc9c 	bl	80067e6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ebe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4413      	add	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	011a      	lsls	r2, r3, #4
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	f000 be1f 	b.w	8005b36 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	78db      	ldrb	r3, [r3, #3]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	f040 8462 	bne.w	80057ce <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6a1a      	ldr	r2, [r3, #32]
 8004f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	f240 83df 	bls.w	80056e6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	441a      	add	r2, r3
 8004f6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004f70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f78:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6a1a      	ldr	r2, [r3, #32]
 8004f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f94:	1ad2      	subs	r2, r2, r3
 8004f96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 81c7 	beq.w	8005358 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	785b      	ldrb	r3, [r3, #1]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d177      	bne.n	80050d6 <USB_EPStartXfer+0x2ce>
 8004fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005000:	b29b      	uxth	r3, r3
 8005002:	461a      	mov	r2, r3
 8005004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005006:	4413      	add	r3, r2
 8005008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800500a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800500e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	011a      	lsls	r2, r3, #4
 8005018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501a:	4413      	add	r3, r2
 800501c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005020:	627b      	str	r3, [r7, #36]	@ 0x24
 8005022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29b      	uxth	r3, r3
 8005028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800502c:	b29a      	uxth	r2, r3
 800502e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005030:	801a      	strh	r2, [r3, #0]
 8005032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005036:	2b3e      	cmp	r3, #62	@ 0x3e
 8005038:	d921      	bls.n	800507e <USB_EPStartXfer+0x276>
 800503a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <USB_EPStartXfer+0x252>
 8005050:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005054:	3b01      	subs	r3, #1
 8005056:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29a      	uxth	r2, r3
 8005060:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005064:	b29b      	uxth	r3, r3
 8005066:	029b      	lsls	r3, r3, #10
 8005068:	b29b      	uxth	r3, r3
 800506a:	4313      	orrs	r3, r2
 800506c:	b29b      	uxth	r3, r3
 800506e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005076:	b29a      	uxth	r2, r3
 8005078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	e050      	b.n	8005120 <USB_EPStartXfer+0x318>
 800507e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10a      	bne.n	800509c <USB_EPStartXfer+0x294>
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005094:	b29a      	uxth	r2, r3
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	801a      	strh	r2, [r3, #0]
 800509a:	e041      	b.n	8005120 <USB_EPStartXfer+0x318>
 800509c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <USB_EPStartXfer+0x2b4>
 80050b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80050b6:	3301      	adds	r3, #1
 80050b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80050bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	029b      	lsls	r3, r3, #10
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	4313      	orrs	r3, r2
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	e024      	b.n	8005120 <USB_EPStartXfer+0x318>
 80050d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d11c      	bne.n	8005120 <USB_EPStartXfer+0x318>
 80050e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	4413      	add	r3, r2
 80050fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80050fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	011a      	lsls	r2, r3, #4
 800510c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510e:	4413      	add	r3, r2
 8005110:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800511a:	b29a      	uxth	r2, r3
 800511c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	895b      	ldrh	r3, [r3, #10]
 800512c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6959      	ldr	r1, [r3, #20]
 800513c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005140:	b29b      	uxth	r3, r3
 8005142:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005146:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800514a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800514e:	6800      	ldr	r0, [r0, #0]
 8005150:	f001 fb49 	bl	80067e6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005164:	441a      	add	r2, r3
 8005166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800516a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6a1a      	ldr	r2, [r3, #32]
 800517e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	429a      	cmp	r2, r3
 800518c:	d90f      	bls.n	80051ae <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800518e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6a1a      	ldr	r2, [r3, #32]
 800519a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800519e:	1ad2      	subs	r2, r2, r3
 80051a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	621a      	str	r2, [r3, #32]
 80051ac:	e00e      	b.n	80051cc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80051ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80051be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2200      	movs	r2, #0
 80051ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	785b      	ldrb	r3, [r3, #1]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d177      	bne.n	80052cc <USB_EPStartXfer+0x4c4>
 80051dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	4413      	add	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	011a      	lsls	r2, r3, #4
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	4413      	add	r3, r2
 8005212:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b29b      	uxth	r3, r3
 800521e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005222:	b29a      	uxth	r2, r3
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	801a      	strh	r2, [r3, #0]
 8005228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522c:	2b3e      	cmp	r3, #62	@ 0x3e
 800522e:	d921      	bls.n	8005274 <USB_EPStartXfer+0x46c>
 8005230:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800523a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2b00      	cmp	r3, #0
 8005244:	d104      	bne.n	8005250 <USB_EPStartXfer+0x448>
 8005246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800524a:	3b01      	subs	r3, #1
 800524c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29a      	uxth	r2, r3
 8005256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800525a:	b29b      	uxth	r3, r3
 800525c:	029b      	lsls	r3, r3, #10
 800525e:	b29b      	uxth	r3, r3
 8005260:	4313      	orrs	r3, r2
 8005262:	b29b      	uxth	r3, r3
 8005264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800526c:	b29a      	uxth	r2, r3
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	e056      	b.n	8005322 <USB_EPStartXfer+0x51a>
 8005274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <USB_EPStartXfer+0x48a>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b29b      	uxth	r3, r3
 8005282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800528a:	b29a      	uxth	r2, r3
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	e047      	b.n	8005322 <USB_EPStartXfer+0x51a>
 8005292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005296:	085b      	lsrs	r3, r3, #1
 8005298:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800529c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <USB_EPStartXfer+0x4aa>
 80052a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ac:	3301      	adds	r3, #1
 80052ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052bc:	b29b      	uxth	r3, r3
 80052be:	029b      	lsls	r3, r3, #10
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	4313      	orrs	r3, r2
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	e02a      	b.n	8005322 <USB_EPStartXfer+0x51a>
 80052cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	785b      	ldrb	r3, [r3, #1]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d122      	bne.n	8005322 <USB_EPStartXfer+0x51a>
 80052dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	623b      	str	r3, [r7, #32]
 80052e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	4413      	add	r3, r2
 80052fe:	623b      	str	r3, [r7, #32]
 8005300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	011a      	lsls	r2, r3, #4
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	4413      	add	r3, r2
 8005312:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800531c:	b29a      	uxth	r2, r3
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	891b      	ldrh	r3, [r3, #8]
 800532e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6959      	ldr	r1, [r3, #20]
 800533e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005342:	b29b      	uxth	r3, r3
 8005344:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005348:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800534c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005350:	6800      	ldr	r0, [r0, #0]
 8005352:	f001 fa48 	bl	80067e6 <USB_WritePMA>
 8005356:	e3ee      	b.n	8005b36 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	785b      	ldrb	r3, [r3, #1]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d177      	bne.n	8005458 <USB_EPStartXfer+0x650>
 8005368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005378:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005382:	b29b      	uxth	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005388:	4413      	add	r3, r2
 800538a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800538c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	011a      	lsls	r2, r3, #4
 800539a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800539c:	4413      	add	r3, r2
 800539e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80053a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80053ba:	d921      	bls.n	8005400 <USB_EPStartXfer+0x5f8>
 80053bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80053c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ca:	f003 031f 	and.w	r3, r3, #31
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d104      	bne.n	80053dc <USB_EPStartXfer+0x5d4>
 80053d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053d6:	3b01      	subs	r3, #1
 80053d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80053dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	029b      	lsls	r3, r3, #10
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	4313      	orrs	r3, r2
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	e056      	b.n	80054ae <USB_EPStartXfer+0x6a6>
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <USB_EPStartXfer+0x616>
 8005408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	b29b      	uxth	r3, r3
 800540e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005416:	b29a      	uxth	r2, r3
 8005418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800541a:	801a      	strh	r2, [r3, #0]
 800541c:	e047      	b.n	80054ae <USB_EPStartXfer+0x6a6>
 800541e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005422:	085b      	lsrs	r3, r3, #1
 8005424:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <USB_EPStartXfer+0x636>
 8005434:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005438:	3301      	adds	r3, #1
 800543a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800543e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29a      	uxth	r2, r3
 8005444:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005448:	b29b      	uxth	r3, r3
 800544a:	029b      	lsls	r3, r3, #10
 800544c:	b29b      	uxth	r3, r3
 800544e:	4313      	orrs	r3, r2
 8005450:	b29a      	uxth	r2, r3
 8005452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005454:	801a      	strh	r2, [r3, #0]
 8005456:	e02a      	b.n	80054ae <USB_EPStartXfer+0x6a6>
 8005458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800545c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d122      	bne.n	80054ae <USB_EPStartXfer+0x6a6>
 8005468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800546c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	653b      	str	r3, [r7, #80]	@ 0x50
 8005474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005488:	4413      	add	r3, r2
 800548a:	653b      	str	r3, [r7, #80]	@ 0x50
 800548c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	011a      	lsls	r2, r3, #4
 800549a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800549c:	4413      	add	r3, r2
 800549e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80054a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	891b      	ldrh	r3, [r3, #8]
 80054ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6959      	ldr	r1, [r3, #20]
 80054ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80054d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80054d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80054dc:	6800      	ldr	r0, [r0, #0]
 80054de:	f001 f982 	bl	80067e6 <USB_WritePMA>
            ep->xfer_buff += len;
 80054e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695a      	ldr	r2, [r3, #20]
 80054ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054f2:	441a      	add	r2, r3
 80054f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6a1a      	ldr	r2, [r3, #32]
 800550c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	429a      	cmp	r2, r3
 800551a:	d90f      	bls.n	800553c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800551c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6a1a      	ldr	r2, [r3, #32]
 8005528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552c:	1ad2      	subs	r2, r2, r3
 800552e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	621a      	str	r2, [r3, #32]
 800553a:	e00e      	b.n	800555a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800553c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800554c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2200      	movs	r2, #0
 8005558:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800555a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800555e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	643b      	str	r3, [r7, #64]	@ 0x40
 8005566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	785b      	ldrb	r3, [r3, #1]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d177      	bne.n	8005666 <USB_EPStartXfer+0x85e>
 8005576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800557a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005586:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005590:	b29b      	uxth	r3, r3
 8005592:	461a      	mov	r2, r3
 8005594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005596:	4413      	add	r3, r2
 8005598:	63bb      	str	r3, [r7, #56]	@ 0x38
 800559a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800559e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	011a      	lsls	r2, r3, #4
 80055a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055aa:	4413      	add	r3, r2
 80055ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80055b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80055c8:	d921      	bls.n	800560e <USB_EPStartXfer+0x806>
 80055ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80055d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d8:	f003 031f 	and.w	r3, r3, #31
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d104      	bne.n	80055ea <USB_EPStartXfer+0x7e2>
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e4:	3b01      	subs	r3, #1
 80055e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80055ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	029b      	lsls	r3, r3, #10
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	4313      	orrs	r3, r2
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005606:	b29a      	uxth	r2, r3
 8005608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560a:	801a      	strh	r2, [r3, #0]
 800560c:	e050      	b.n	80056b0 <USB_EPStartXfer+0x8a8>
 800560e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <USB_EPStartXfer+0x824>
 8005616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005624:	b29a      	uxth	r2, r3
 8005626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	e041      	b.n	80056b0 <USB_EPStartXfer+0x8a8>
 800562c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d004      	beq.n	800564c <USB_EPStartXfer+0x844>
 8005642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005646:	3301      	adds	r3, #1
 8005648:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800564c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29a      	uxth	r2, r3
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005656:	b29b      	uxth	r3, r3
 8005658:	029b      	lsls	r3, r3, #10
 800565a:	b29b      	uxth	r3, r3
 800565c:	4313      	orrs	r3, r2
 800565e:	b29a      	uxth	r2, r3
 8005660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005662:	801a      	strh	r2, [r3, #0]
 8005664:	e024      	b.n	80056b0 <USB_EPStartXfer+0x8a8>
 8005666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d11c      	bne.n	80056b0 <USB_EPStartXfer+0x8a8>
 8005676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800567a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005684:	b29b      	uxth	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800568a:	4413      	add	r3, r2
 800568c:	643b      	str	r3, [r7, #64]	@ 0x40
 800568e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	011a      	lsls	r2, r3, #4
 800569c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800569e:	4413      	add	r3, r2
 80056a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80056a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	895b      	ldrh	r3, [r3, #10]
 80056bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6959      	ldr	r1, [r3, #20]
 80056cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80056d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80056da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80056de:	6800      	ldr	r0, [r0, #0]
 80056e0:	f001 f881 	bl	80067e6 <USB_WritePMA>
 80056e4:	e227      	b.n	8005b36 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80056e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80056f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005724:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800572e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	441a      	add	r2, r3
 800573a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800573e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005742:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800574a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800574e:	b29b      	uxth	r3, r3
 8005750:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005756:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800575e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005762:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800576c:	b29b      	uxth	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005772:	4413      	add	r3, r2
 8005774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800577a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	011a      	lsls	r2, r3, #4
 8005784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005786:	4413      	add	r3, r2
 8005788:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800578c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800578e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005792:	b29a      	uxth	r2, r3
 8005794:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005796:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	891b      	ldrh	r3, [r3, #8]
 80057a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6959      	ldr	r1, [r3, #20]
 80057b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057be:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057c2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057c6:	6800      	ldr	r0, [r0, #0]
 80057c8:	f001 f80d 	bl	80067e6 <USB_WritePMA>
 80057cc:	e1b3      	b.n	8005b36 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80057ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6a1a      	ldr	r2, [r3, #32]
 80057da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29b      	uxth	r3, r3
 800580a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 80c6 	beq.w	80059a0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d177      	bne.n	8005920 <USB_EPStartXfer+0xb18>
 8005830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005834:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800583c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005840:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800584a:	b29b      	uxth	r3, r3
 800584c:	461a      	mov	r2, r3
 800584e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005850:	4413      	add	r3, r2
 8005852:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	011a      	lsls	r2, r3, #4
 8005862:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005864:	4413      	add	r3, r2
 8005866:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800586a:	667b      	str	r3, [r7, #100]	@ 0x64
 800586c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005876:	b29a      	uxth	r2, r3
 8005878:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005880:	2b3e      	cmp	r3, #62	@ 0x3e
 8005882:	d921      	bls.n	80058c8 <USB_EPStartXfer+0xac0>
 8005884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005888:	095b      	lsrs	r3, r3, #5
 800588a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800588e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <USB_EPStartXfer+0xa9c>
 800589a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800589e:	3b01      	subs	r3, #1
 80058a0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	029b      	lsls	r3, r3, #10
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	4313      	orrs	r3, r2
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	e050      	b.n	800596a <USB_EPStartXfer+0xb62>
 80058c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <USB_EPStartXfer+0xade>
 80058d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	e041      	b.n	800596a <USB_EPStartXfer+0xb62>
 80058e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d004      	beq.n	8005906 <USB_EPStartXfer+0xafe>
 80058fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005900:	3301      	adds	r3, #1
 8005902:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005906:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b29a      	uxth	r2, r3
 800590c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005910:	b29b      	uxth	r3, r3
 8005912:	029b      	lsls	r3, r3, #10
 8005914:	b29b      	uxth	r3, r3
 8005916:	4313      	orrs	r3, r2
 8005918:	b29a      	uxth	r2, r3
 800591a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800591c:	801a      	strh	r2, [r3, #0]
 800591e:	e024      	b.n	800596a <USB_EPStartXfer+0xb62>
 8005920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d11c      	bne.n	800596a <USB_EPStartXfer+0xb62>
 8005930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800593e:	b29b      	uxth	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005944:	4413      	add	r3, r2
 8005946:	673b      	str	r3, [r7, #112]	@ 0x70
 8005948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	011a      	lsls	r2, r3, #4
 8005956:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005958:	4413      	add	r3, r2
 800595a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800595e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005964:	b29a      	uxth	r2, r3
 8005966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005968:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800596a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800596e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	895b      	ldrh	r3, [r3, #10]
 8005976:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800597a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800597e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6959      	ldr	r1, [r3, #20]
 8005986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800598a:	b29b      	uxth	r3, r3
 800598c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005990:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005994:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005998:	6800      	ldr	r0, [r0, #0]
 800599a:	f000 ff24 	bl	80067e6 <USB_WritePMA>
 800599e:	e0ca      	b.n	8005b36 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d177      	bne.n	8005aa0 <USB_EPStartXfer+0xc98>
 80059b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80059d0:	4413      	add	r3, r2
 80059d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	011a      	lsls	r2, r3, #4
 80059e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80059e4:	4413      	add	r3, r2
 80059e6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80059ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a00:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a02:	d921      	bls.n	8005a48 <USB_EPStartXfer+0xc40>
 8005a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a12:	f003 031f 	and.w	r3, r3, #31
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d104      	bne.n	8005a24 <USB_EPStartXfer+0xc1c>
 8005a1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	029b      	lsls	r3, r3, #10
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	4313      	orrs	r3, r2
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	e05c      	b.n	8005b02 <USB_EPStartXfer+0xcfa>
 8005a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <USB_EPStartXfer+0xc5e>
 8005a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a62:	801a      	strh	r2, [r3, #0]
 8005a64:	e04d      	b.n	8005b02 <USB_EPStartXfer+0xcfa>
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d004      	beq.n	8005a86 <USB_EPStartXfer+0xc7e>
 8005a7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a80:	3301      	adds	r3, #1
 8005a82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	029b      	lsls	r3, r3, #10
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	4313      	orrs	r3, r2
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	e030      	b.n	8005b02 <USB_EPStartXfer+0xcfa>
 8005aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d128      	bne.n	8005b02 <USB_EPStartXfer+0xcfa>
 8005ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	011a      	lsls	r2, r3, #4
 8005ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005aec:	4413      	add	r3, r2
 8005aee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005af2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005b00:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	891b      	ldrh	r3, [r3, #8]
 8005b0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6959      	ldr	r1, [r3, #20]
 8005b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b30:	6800      	ldr	r0, [r0, #0]
 8005b32:	f000 fe58 	bl	80067e6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b5c:	817b      	strh	r3, [r7, #10]
 8005b5e:	897b      	ldrh	r3, [r7, #10]
 8005b60:	f083 0310 	eor.w	r3, r3, #16
 8005b64:	817b      	strh	r3, [r7, #10]
 8005b66:	897b      	ldrh	r3, [r7, #10]
 8005b68:	f083 0320 	eor.w	r3, r3, #32
 8005b6c:	817b      	strh	r3, [r7, #10]
 8005b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	441a      	add	r2, r3
 8005b88:	897b      	ldrh	r3, [r7, #10]
 8005b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	8013      	strh	r3, [r2, #0]
 8005b9e:	f000 bcde 	b.w	800655e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	7b1b      	ldrb	r3, [r3, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f040 80bb 	bne.w	8005d2a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d917      	bls.n	8005c00 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	699a      	ldr	r2, [r3, #24]
 8005bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf0:	1ad2      	subs	r2, r2, r3
 8005bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	619a      	str	r2, [r3, #24]
 8005bfe:	e00e      	b.n	8005c1e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c42:	4413      	add	r3, r2
 8005c44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	011a      	lsls	r2, r3, #4
 8005c56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c76:	801a      	strh	r2, [r3, #0]
 8005c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c7e:	d924      	bls.n	8005cca <USB_EPStartXfer+0xec2>
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d104      	bne.n	8005ca0 <USB_EPStartXfer+0xe98>
 8005c96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	029b      	lsls	r3, r3, #10
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cc4:	801a      	strh	r2, [r3, #0]
 8005cc6:	f000 bc10 	b.w	80064ea <USB_EPStartXfer+0x16e2>
 8005cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10c      	bne.n	8005cec <USB_EPStartXfer+0xee4>
 8005cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ce8:	801a      	strh	r2, [r3, #0]
 8005cea:	e3fe      	b.n	80064ea <USB_EPStartXfer+0x16e2>
 8005cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf0:	085b      	lsrs	r3, r3, #1
 8005cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <USB_EPStartXfer+0xf04>
 8005d02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d06:	3301      	adds	r3, #1
 8005d08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	029b      	lsls	r3, r3, #10
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d26:	801a      	strh	r2, [r3, #0]
 8005d28:	e3df      	b.n	80064ea <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	78db      	ldrb	r3, [r3, #3]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	f040 8218 	bne.w	800616c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f040 809d 	bne.w	8005e88 <USB_EPStartXfer+0x1080>
 8005d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d72:	4413      	add	r3, r2
 8005d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	011a      	lsls	r2, r3, #4
 8005d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005da6:	801a      	strh	r2, [r3, #0]
 8005da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005db6:	d92b      	bls.n	8005e10 <USB_EPStartXfer+0x1008>
 8005db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d104      	bne.n	8005de8 <USB_EPStartXfer+0xfe0>
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de2:	3b01      	subs	r3, #1
 8005de4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005de8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	029b      	lsls	r3, r3, #10
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	e070      	b.n	8005ef2 <USB_EPStartXfer+0x10ea>
 8005e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10c      	bne.n	8005e3a <USB_EPStartXfer+0x1032>
 8005e20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e36:	801a      	strh	r2, [r3, #0]
 8005e38:	e05b      	b.n	8005ef2 <USB_EPStartXfer+0x10ea>
 8005e3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	085b      	lsrs	r3, r3, #1
 8005e48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <USB_EPStartXfer+0x1062>
 8005e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e64:	3301      	adds	r3, #1
 8005e66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	029b      	lsls	r3, r3, #10
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	e034      	b.n	8005ef2 <USB_EPStartXfer+0x10ea>
 8005e88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d12c      	bne.n	8005ef2 <USB_EPStartXfer+0x10ea>
 8005e98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	011a      	lsls	r2, r3, #4
 8005ed0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005eda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ede:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005ef0:	801a      	strh	r2, [r3, #0]
 8005ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 809d 	bne.w	800604c <USB_EPStartXfer+0x1244>
 8005f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f36:	4413      	add	r3, r2
 8005f38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	011a      	lsls	r2, r3, #4
 8005f4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f4e:	4413      	add	r3, r2
 8005f50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f6a:	801a      	strh	r2, [r3, #0]
 8005f6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f7a:	d92b      	bls.n	8005fd4 <USB_EPStartXfer+0x11cc>
 8005f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d104      	bne.n	8005fac <USB_EPStartXfer+0x11a4>
 8005fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	029b      	lsls	r3, r3, #10
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fd0:	801a      	strh	r2, [r3, #0]
 8005fd2:	e069      	b.n	80060a8 <USB_EPStartXfer+0x12a0>
 8005fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10c      	bne.n	8005ffe <USB_EPStartXfer+0x11f6>
 8005fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	e054      	b.n	80060a8 <USB_EPStartXfer+0x12a0>
 8005ffe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <USB_EPStartXfer+0x1226>
 8006024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006028:	3301      	adds	r3, #1
 800602a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800602e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29a      	uxth	r2, r3
 8006036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800603a:	b29b      	uxth	r3, r3
 800603c:	029b      	lsls	r3, r3, #10
 800603e:	b29b      	uxth	r3, r3
 8006040:	4313      	orrs	r3, r2
 8006042:	b29a      	uxth	r2, r3
 8006044:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	e02d      	b.n	80060a8 <USB_EPStartXfer+0x12a0>
 800604c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d125      	bne.n	80060a8 <USB_EPStartXfer+0x12a0>
 800605c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006060:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800606a:	b29b      	uxth	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006072:	4413      	add	r3, r2
 8006074:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800607c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	011a      	lsls	r2, r3, #4
 8006086:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800608a:	4413      	add	r3, r2
 800608c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006090:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060a6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80060a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8218 	beq.w	80064ea <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80060ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80060de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <USB_EPStartXfer+0x12ea>
 80060e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80060ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10d      	bne.n	800610e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80060f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80060f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f040 81f5 	bne.w	80064ea <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006100:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006108:	2b00      	cmp	r3, #0
 800610a:	f040 81ee 	bne.w	80064ea <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800610e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006112:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	b29b      	uxth	r3, r3
 800612c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006134:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8006138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	441a      	add	r2, r3
 8006152:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8006156:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800615a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800615e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006162:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006166:	b29b      	uxth	r3, r3
 8006168:	8013      	strh	r3, [r2, #0]
 800616a:	e1be      	b.n	80064ea <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800616c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	78db      	ldrb	r3, [r3, #3]
 8006178:	2b01      	cmp	r3, #1
 800617a:	f040 81b4 	bne.w	80064e6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800617e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699a      	ldr	r2, [r3, #24]
 800618a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	429a      	cmp	r2, r3
 8006198:	d917      	bls.n	80061ca <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800619a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80061aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ba:	1ad2      	subs	r2, r2, r3
 80061bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	619a      	str	r2, [r3, #24]
 80061c8:	e00e      	b.n	80061e8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80061ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80061da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2200      	movs	r2, #0
 80061e6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80061e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f040 8085 	bne.w	8006304 <USB_EPStartXfer+0x14fc>
 80061fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006208:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800620c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006216:	b29b      	uxth	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800621e:	4413      	add	r3, r2
 8006220:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	011a      	lsls	r2, r3, #4
 8006232:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006236:	4413      	add	r3, r2
 8006238:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800623c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800624c:	b29a      	uxth	r2, r3
 800624e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006252:	801a      	strh	r2, [r3, #0]
 8006254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006258:	2b3e      	cmp	r3, #62	@ 0x3e
 800625a:	d923      	bls.n	80062a4 <USB_EPStartXfer+0x149c>
 800625c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	2b00      	cmp	r3, #0
 8006270:	d104      	bne.n	800627c <USB_EPStartXfer+0x1474>
 8006272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006276:	3b01      	subs	r3, #1
 8006278:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800627c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29a      	uxth	r2, r3
 8006284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006288:	b29b      	uxth	r3, r3
 800628a:	029b      	lsls	r3, r3, #10
 800628c:	b29b      	uxth	r3, r3
 800628e:	4313      	orrs	r3, r2
 8006290:	b29b      	uxth	r3, r3
 8006292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800629a:	b29a      	uxth	r2, r3
 800629c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062a0:	801a      	strh	r2, [r3, #0]
 80062a2:	e060      	b.n	8006366 <USB_EPStartXfer+0x155e>
 80062a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10c      	bne.n	80062c6 <USB_EPStartXfer+0x14be>
 80062ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062bc:	b29a      	uxth	r2, r3
 80062be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062c2:	801a      	strh	r2, [r3, #0]
 80062c4:	e04f      	b.n	8006366 <USB_EPStartXfer+0x155e>
 80062c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d004      	beq.n	80062e6 <USB_EPStartXfer+0x14de>
 80062dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062e0:	3301      	adds	r3, #1
 80062e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80062e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	029b      	lsls	r3, r3, #10
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	4313      	orrs	r3, r2
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006300:	801a      	strh	r2, [r3, #0]
 8006302:	e030      	b.n	8006366 <USB_EPStartXfer+0x155e>
 8006304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	785b      	ldrb	r3, [r3, #1]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d128      	bne.n	8006366 <USB_EPStartXfer+0x155e>
 8006314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006318:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006330:	b29b      	uxth	r3, r3
 8006332:	461a      	mov	r2, r3
 8006334:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006338:	4413      	add	r3, r2
 800633a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800633e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	011a      	lsls	r2, r3, #4
 800634c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006350:	4413      	add	r3, r2
 8006352:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006356:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800635a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635e:	b29a      	uxth	r2, r3
 8006360:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800636a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	2b00      	cmp	r3, #0
 8006382:	f040 8085 	bne.w	8006490 <USB_EPStartXfer+0x1688>
 8006386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80063aa:	4413      	add	r3, r2
 80063ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	011a      	lsls	r2, r3, #4
 80063be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80063c2:	4413      	add	r3, r2
 80063c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80063c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063de:	801a      	strh	r2, [r3, #0]
 80063e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80063e6:	d923      	bls.n	8006430 <USB_EPStartXfer+0x1628>
 80063e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <USB_EPStartXfer+0x1600>
 80063fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006402:	3b01      	subs	r3, #1
 8006404:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006408:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b29a      	uxth	r2, r3
 8006410:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006414:	b29b      	uxth	r3, r3
 8006416:	029b      	lsls	r3, r3, #10
 8006418:	b29b      	uxth	r3, r3
 800641a:	4313      	orrs	r3, r2
 800641c:	b29b      	uxth	r3, r3
 800641e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006426:	b29a      	uxth	r2, r3
 8006428:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	e05c      	b.n	80064ea <USB_EPStartXfer+0x16e2>
 8006430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10c      	bne.n	8006452 <USB_EPStartXfer+0x164a>
 8006438:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	b29b      	uxth	r3, r3
 8006440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006448:	b29a      	uxth	r2, r3
 800644a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	e04b      	b.n	80064ea <USB_EPStartXfer+0x16e2>
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <USB_EPStartXfer+0x166a>
 8006468:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800646c:	3301      	adds	r3, #1
 800646e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006472:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29a      	uxth	r2, r3
 800647a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800647e:	b29b      	uxth	r3, r3
 8006480:	029b      	lsls	r3, r3, #10
 8006482:	b29b      	uxth	r3, r3
 8006484:	4313      	orrs	r3, r2
 8006486:	b29a      	uxth	r2, r3
 8006488:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800648c:	801a      	strh	r2, [r3, #0]
 800648e:	e02c      	b.n	80064ea <USB_EPStartXfer+0x16e2>
 8006490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	785b      	ldrb	r3, [r3, #1]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d124      	bne.n	80064ea <USB_EPStartXfer+0x16e2>
 80064a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064b6:	4413      	add	r3, r2
 80064b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	011a      	lsls	r2, r3, #4
 80064ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064ce:	4413      	add	r3, r2
 80064d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80064d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064dc:	b29a      	uxth	r2, r3
 80064de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80064e2:	801a      	strh	r2, [r3, #0]
 80064e4:	e001      	b.n	80064ea <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e03a      	b.n	8006560 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800650c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006510:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006514:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006518:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800651c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006520:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006524:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006528:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800652c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	441a      	add	r2, r3
 8006546:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800654a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800654e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800655a:	b29b      	uxth	r3, r3
 800655c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d020      	beq.n	80065be <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800658e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006592:	81bb      	strh	r3, [r7, #12]
 8006594:	89bb      	ldrh	r3, [r7, #12]
 8006596:	f083 0310 	eor.w	r3, r3, #16
 800659a:	81bb      	strh	r3, [r7, #12]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	441a      	add	r2, r3
 80065a6:	89bb      	ldrh	r3, [r7, #12]
 80065a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	8013      	strh	r3, [r2, #0]
 80065bc:	e01f      	b.n	80065fe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d4:	81fb      	strh	r3, [r7, #14]
 80065d6:	89fb      	ldrh	r3, [r7, #14]
 80065d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80065dc:	81fb      	strh	r3, [r7, #14]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	441a      	add	r2, r3
 80065e8:	89fb      	ldrh	r3, [r7, #14]
 80065ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800660a:	b480      	push	{r7}
 800660c:	b087      	sub	sp, #28
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	7b1b      	ldrb	r3, [r3, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f040 809d 	bne.w	8006758 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	785b      	ldrb	r3, [r3, #1]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d04c      	beq.n	80066c0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	823b      	strh	r3, [r7, #16]
 8006634:	8a3b      	ldrh	r3, [r7, #16]
 8006636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01b      	beq.n	8006676 <USB_EPClearStall+0x6c>
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	b29b      	uxth	r3, r3
 800664c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006654:	81fb      	strh	r3, [r7, #14]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	441a      	add	r2, r3
 8006660:	89fb      	ldrh	r3, [r7, #14]
 8006662:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006666:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800666a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800666e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006672:	b29b      	uxth	r3, r3
 8006674:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	78db      	ldrb	r3, [r3, #3]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d06c      	beq.n	8006758 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29b      	uxth	r3, r3
 800668c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006694:	81bb      	strh	r3, [r7, #12]
 8006696:	89bb      	ldrh	r3, [r7, #12]
 8006698:	f083 0320 	eor.w	r3, r3, #32
 800669c:	81bb      	strh	r3, [r7, #12]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	441a      	add	r2, r3
 80066a8:	89bb      	ldrh	r3, [r7, #12]
 80066aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	8013      	strh	r3, [r2, #0]
 80066be:	e04b      	b.n	8006758 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	82fb      	strh	r3, [r7, #22]
 80066ce:	8afb      	ldrh	r3, [r7, #22]
 80066d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01b      	beq.n	8006710 <USB_EPClearStall+0x106>
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ee:	82bb      	strh	r3, [r7, #20]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	441a      	add	r2, r3
 80066fa:	8abb      	ldrh	r3, [r7, #20]
 80066fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006700:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006704:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800670c:	b29b      	uxth	r3, r3
 800670e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	b29b      	uxth	r3, r3
 800671e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006726:	827b      	strh	r3, [r7, #18]
 8006728:	8a7b      	ldrh	r3, [r7, #18]
 800672a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800672e:	827b      	strh	r3, [r7, #18]
 8006730:	8a7b      	ldrh	r3, [r7, #18]
 8006732:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006736:	827b      	strh	r3, [r7, #18]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	441a      	add	r2, r3
 8006742:	8a7b      	ldrh	r3, [r7, #18]
 8006744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800674c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006754:	b29b      	uxth	r3, r3
 8006756:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	bc80      	pop	{r7}
 8006762:	4770      	bx	lr

08006764 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d103      	bne.n	800677e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2280      	movs	r2, #128	@ 0x80
 800677a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr

0800678a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	bc80      	pop	{r7}
 800679c:	4770      	bx	lr

0800679e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bc80      	pop	{r7}
 80067b0:	4770      	bx	lr

080067b2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b085      	sub	sp, #20
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80067c4:	68fb      	ldr	r3, [r7, #12]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr

080067d0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bc80      	pop	{r7}
 80067e4:	4770      	bx	lr

080067e6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b08b      	sub	sp, #44	@ 0x2c
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	4611      	mov	r1, r2
 80067f2:	461a      	mov	r2, r3
 80067f4:	460b      	mov	r3, r1
 80067f6:	80fb      	strh	r3, [r7, #6]
 80067f8:	4613      	mov	r3, r2
 80067fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80067fc:	88bb      	ldrh	r3, [r7, #4]
 80067fe:	3301      	adds	r3, #1
 8006800:	085b      	lsrs	r3, r3, #1
 8006802:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800680c:	88fb      	ldrh	r3, [r7, #6]
 800680e:	005a      	lsls	r2, r3, #1
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006818:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	627b      	str	r3, [r7, #36]	@ 0x24
 800681e:	e01e      	b.n	800685e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	3301      	adds	r3, #1
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	b21a      	sxth	r2, r3
 8006830:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006834:	4313      	orrs	r3, r2
 8006836:	b21b      	sxth	r3, r3
 8006838:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	8a7a      	ldrh	r2, [r7, #18]
 800683e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	3302      	adds	r3, #2
 8006844:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	3302      	adds	r3, #2
 800684a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	3301      	adds	r3, #1
 8006850:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	3301      	adds	r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	3b01      	subs	r3, #1
 800685c:	627b      	str	r3, [r7, #36]	@ 0x24
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1dd      	bne.n	8006820 <USB_WritePMA+0x3a>
  }
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop
 8006868:	372c      	adds	r7, #44	@ 0x2c
 800686a:	46bd      	mov	sp, r7
 800686c:	bc80      	pop	{r7}
 800686e:	4770      	bx	lr

08006870 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006870:	b480      	push	{r7}
 8006872:	b08b      	sub	sp, #44	@ 0x2c
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	4611      	mov	r1, r2
 800687c:	461a      	mov	r2, r3
 800687e:	460b      	mov	r3, r1
 8006880:	80fb      	strh	r3, [r7, #6]
 8006882:	4613      	mov	r3, r2
 8006884:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006886:	88bb      	ldrh	r3, [r7, #4]
 8006888:	085b      	lsrs	r3, r3, #1
 800688a:	b29b      	uxth	r3, r3
 800688c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006896:	88fb      	ldrh	r3, [r7, #6]
 8006898:	005a      	lsls	r2, r3, #1
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068a2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068a8:	e01b      	b.n	80068e2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	3302      	adds	r3, #2
 80068b6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	3301      	adds	r3, #1
 80068c4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	0a1b      	lsrs	r3, r3, #8
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	3301      	adds	r3, #1
 80068d4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	3302      	adds	r3, #2
 80068da:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80068dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068de:	3b01      	subs	r3, #1
 80068e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e0      	bne.n	80068aa <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80068e8:	88bb      	ldrh	r3, [r7, #4]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	701a      	strb	r2, [r3, #0]
  }
}
 8006904:	bf00      	nop
 8006906:	372c      	adds	r7, #44	@ 0x2c
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr

0800690e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	7c1b      	ldrb	r3, [r3, #16]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d115      	bne.n	8006952 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006926:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800692a:	2202      	movs	r2, #2
 800692c:	2181      	movs	r1, #129	@ 0x81
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f001 fe2b 	bl	800858a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800693a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800693e:	2202      	movs	r2, #2
 8006940:	2101      	movs	r1, #1
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 fe21 	bl	800858a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006950:	e012      	b.n	8006978 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006952:	2340      	movs	r3, #64	@ 0x40
 8006954:	2202      	movs	r2, #2
 8006956:	2181      	movs	r1, #129	@ 0x81
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fe16 	bl	800858a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006964:	2340      	movs	r3, #64	@ 0x40
 8006966:	2202      	movs	r2, #2
 8006968:	2101      	movs	r1, #1
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fe0d 	bl	800858a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006978:	2308      	movs	r3, #8
 800697a:	2203      	movs	r2, #3
 800697c:	2182      	movs	r1, #130	@ 0x82
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 fe03 	bl	800858a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800698a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800698e:	f001 ff23 	bl	80087d8 <USBD_static_malloc>
 8006992:	4602      	mov	r2, r0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
 80069a8:	e026      	b.n	80069f8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069b0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7c1b      	ldrb	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d109      	bne.n	80069e8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80069da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80069de:	2101      	movs	r1, #1
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 fec2 	bl	800876a <USBD_LL_PrepareReceive>
 80069e6:	e007      	b.n	80069f8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80069ee:	2340      	movs	r3, #64	@ 0x40
 80069f0:	2101      	movs	r1, #1
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 feb9 	bl	800876a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b084      	sub	sp, #16
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006a12:	2181      	movs	r1, #129	@ 0x81
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fdde 	bl	80085d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006a20:	2101      	movs	r1, #1
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fdd7 	bl	80085d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a30:	2182      	movs	r1, #130	@ 0x82
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fdcf 	bl	80085d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00e      	beq.n	8006a66 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 fec9 	bl	80087f0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a80:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d039      	beq.n	8006b0e <USBD_CDC_Setup+0x9e>
 8006a9a:	2b20      	cmp	r3, #32
 8006a9c:	d17f      	bne.n	8006b9e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	88db      	ldrh	r3, [r3, #6]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d029      	beq.n	8006afa <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	b25b      	sxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da11      	bge.n	8006ad4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006abc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	88d2      	ldrh	r2, [r2, #6]
 8006ac2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ac4:	6939      	ldr	r1, [r7, #16]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	88db      	ldrh	r3, [r3, #6]
 8006aca:	461a      	mov	r2, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 f9d5 	bl	8007e7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006ad2:	e06b      	b.n	8006bac <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	785a      	ldrb	r2, [r3, #1]
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	88db      	ldrh	r3, [r3, #6]
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006aea:	6939      	ldr	r1, [r7, #16]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	88db      	ldrh	r3, [r3, #6]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 f9f0 	bl	8007ed8 <USBD_CtlPrepareRx>
      break;
 8006af8:	e058      	b.n	8006bac <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	7850      	ldrb	r0, [r2, #1]
 8006b06:	2200      	movs	r2, #0
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	4798      	blx	r3
      break;
 8006b0c:	e04e      	b.n	8006bac <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	2b0b      	cmp	r3, #11
 8006b14:	d02e      	beq.n	8006b74 <USBD_CDC_Setup+0x104>
 8006b16:	2b0b      	cmp	r3, #11
 8006b18:	dc38      	bgt.n	8006b8c <USBD_CDC_Setup+0x11c>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <USBD_CDC_Setup+0xb4>
 8006b1e:	2b0a      	cmp	r3, #10
 8006b20:	d014      	beq.n	8006b4c <USBD_CDC_Setup+0xdc>
 8006b22:	e033      	b.n	8006b8c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d107      	bne.n	8006b3e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b2e:	f107 030c 	add.w	r3, r7, #12
 8006b32:	2202      	movs	r2, #2
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 f9a0 	bl	8007e7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b3c:	e02e      	b.n	8006b9c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 f931 	bl	8007da8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b46:	2302      	movs	r3, #2
 8006b48:	75fb      	strb	r3, [r7, #23]
          break;
 8006b4a:	e027      	b.n	8006b9c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d107      	bne.n	8006b66 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b56:	f107 030f 	add.w	r3, r7, #15
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f001 f98c 	bl	8007e7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b64:	e01a      	b.n	8006b9c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 f91d 	bl	8007da8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	75fb      	strb	r3, [r7, #23]
          break;
 8006b72:	e013      	b.n	8006b9c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b7a:	2b03      	cmp	r3, #3
 8006b7c:	d00d      	beq.n	8006b9a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 f911 	bl	8007da8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b86:	2302      	movs	r3, #2
 8006b88:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b8a:	e006      	b.n	8006b9a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f001 f90a 	bl	8007da8 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b94:	2302      	movs	r3, #2
 8006b96:	75fb      	strb	r3, [r7, #23]
          break;
 8006b98:	e000      	b.n	8006b9c <USBD_CDC_Setup+0x12c>
          break;
 8006b9a:	bf00      	nop
      }
      break;
 8006b9c:	e006      	b.n	8006bac <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 f901 	bl	8007da8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8006baa:	bf00      	nop
  }

  return ret;
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bc8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006bd0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d03a      	beq.n	8006c52 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006bdc:	78fa      	ldrb	r2, [r7, #3]
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	4613      	mov	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	440b      	add	r3, r1
 8006bea:	331c      	adds	r3, #28
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d029      	beq.n	8006c46 <USBD_CDC_DataIn+0x90>
 8006bf2:	78fa      	ldrb	r2, [r7, #3]
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	331c      	adds	r3, #28
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	78f9      	ldrb	r1, [r7, #3]
 8006c06:	68b8      	ldr	r0, [r7, #8]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	440b      	add	r3, r1
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	4403      	add	r3, r0
 8006c12:	3320      	adds	r3, #32
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c1a:	fb01 f303 	mul.w	r3, r1, r3
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d110      	bne.n	8006c46 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006c24:	78fa      	ldrb	r2, [r7, #3]
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	331c      	adds	r3, #28
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c38:	78f9      	ldrb	r1, [r7, #3]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 fd70 	bl	8008724 <USBD_LL_Transmit>
 8006c44:	e003      	b.n	8006c4e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e000      	b.n	8006c54 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006c52:	2302      	movs	r3, #2
  }
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c70:	78fb      	ldrb	r3, [r7, #3]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fd9b 	bl	80087b0 <USBD_LL_GetRxDataSize>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00d      	beq.n	8006ca8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	4798      	blx	r3

    return USBD_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e000      	b.n	8006caa <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006ca8:	2302      	movs	r3, #2
  }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cc0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d014      	beq.n	8006cf6 <USBD_CDC_EP0_RxReady+0x44>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006cd2:	2bff      	cmp	r3, #255	@ 0xff
 8006cd4:	d00f      	beq.n	8006cf6 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ce4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006cec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	22ff      	movs	r2, #255	@ 0xff
 8006cf2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2243      	movs	r2, #67	@ 0x43
 8006d0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006d0e:	4b03      	ldr	r3, [pc, #12]	@ (8006d1c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	20000094 	.word	0x20000094

08006d20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2243      	movs	r2, #67	@ 0x43
 8006d2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006d2e:	4b03      	ldr	r3, [pc, #12]	@ (8006d3c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000050 	.word	0x20000050

08006d40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2243      	movs	r2, #67	@ 0x43
 8006d4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006d4e:	4b03      	ldr	r3, [pc, #12]	@ (8006d5c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc80      	pop	{r7}
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	200000d8 	.word	0x200000d8

08006d60 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	220a      	movs	r2, #10
 8006d6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006d6e:	4b03      	ldr	r3, [pc, #12]	@ (8006d7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	2000000c 	.word	0x2000000c

08006d80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d005      	beq.n	8006da0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bc80      	pop	{r7}
 8006daa:	4770      	bx	lr

08006dac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dc0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006dca:	88fa      	ldrh	r2, [r7, #6]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr

08006dde <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b085      	sub	sp, #20
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr

08006e04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d017      	beq.n	8006e4e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7c1b      	ldrb	r3, [r3, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d109      	bne.n	8006e3a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e30:	2101      	movs	r1, #1
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 fc99 	bl	800876a <USBD_LL_PrepareReceive>
 8006e38:	e007      	b.n	8006e4a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e40:	2340      	movs	r3, #64	@ 0x40
 8006e42:	2101      	movs	r1, #1
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 fc90 	bl	800876a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e000      	b.n	8006e50 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006e4e:	2302      	movs	r3, #2
  }
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	4613      	mov	r3, r2
 8006e64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e01a      	b.n	8006ea6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	79fa      	ldrb	r2, [r7, #7]
 8006e9c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f001 fafe 	bl	80084a0 <USBD_LL_Init>

  return USBD_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b085      	sub	sp, #20
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d006      	beq.n	8006ed0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]
 8006ece:	e001      	b.n	8006ed4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr

08006ee0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 fb33 	bl	8008554 <USBD_LL_Start>

  return USBD_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr

08006f0c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00c      	beq.n	8006f40 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	78fa      	ldrb	r2, [r7, #3]
 8006f30:	4611      	mov	r1, r2
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	4798      	blx	r3
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	460b      	mov	r3, r1
 8006f54:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	78fa      	ldrb	r2, [r7, #3]
 8006f60:	4611      	mov	r1, r2
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3

  return USBD_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fed7 	bl	8007d36 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f96:	461a      	mov	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006fa4:	f003 031f 	and.w	r3, r3, #31
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d016      	beq.n	8006fda <USBD_LL_SetupStage+0x6a>
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d81c      	bhi.n	8006fea <USBD_LL_SetupStage+0x7a>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <USBD_LL_SetupStage+0x4a>
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d008      	beq.n	8006fca <USBD_LL_SetupStage+0x5a>
 8006fb8:	e017      	b.n	8006fea <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f9ca 	bl	800735c <USBD_StdDevReq>
      break;
 8006fc8:	e01a      	b.n	8007000 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fa2c 	bl	8007430 <USBD_StdItfReq>
      break;
 8006fd8:	e012      	b.n	8007000 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fa6c 	bl	80074c0 <USBD_StdEPReq>
      break;
 8006fe8:	e00a      	b.n	8007000 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006ff0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 fb0b 	bl	8008614 <USBD_LL_StallEP>
      break;
 8006ffe:	bf00      	nop
  }

  return USBD_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b086      	sub	sp, #24
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	460b      	mov	r3, r1
 8007014:	607a      	str	r2, [r7, #4]
 8007016:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007018:	7afb      	ldrb	r3, [r7, #11]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d14b      	bne.n	80070b6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007024:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800702c:	2b03      	cmp	r3, #3
 800702e:	d134      	bne.n	800709a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	429a      	cmp	r2, r3
 800703a:	d919      	bls.n	8007070 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	1ad2      	subs	r2, r2, r3
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007052:	429a      	cmp	r2, r3
 8007054:	d203      	bcs.n	800705e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800705a:	b29b      	uxth	r3, r3
 800705c:	e002      	b.n	8007064 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007062:	b29b      	uxth	r3, r3
 8007064:	461a      	mov	r2, r3
 8007066:	6879      	ldr	r1, [r7, #4]
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 ff53 	bl	8007f14 <USBD_CtlContinueRx>
 800706e:	e038      	b.n	80070e2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007082:	2b03      	cmp	r3, #3
 8007084:	d105      	bne.n	8007092 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 ff50 	bl	8007f38 <USBD_CtlSendStatus>
 8007098:	e023      	b.n	80070e2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070a0:	2b05      	cmp	r3, #5
 80070a2:	d11e      	bne.n	80070e2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80070ac:	2100      	movs	r1, #0
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f001 fab0 	bl	8008614 <USBD_LL_StallEP>
 80070b4:	e015      	b.n	80070e2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00d      	beq.n	80070de <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d108      	bne.n	80070de <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	7afa      	ldrb	r2, [r7, #11]
 80070d6:	4611      	mov	r1, r2
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	4798      	blx	r3
 80070dc:	e001      	b.n	80070e2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070de:	2302      	movs	r3, #2
 80070e0:	e000      	b.n	80070e4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	460b      	mov	r3, r1
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070fa:	7afb      	ldrb	r3, [r7, #11]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d17f      	bne.n	8007200 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3314      	adds	r3, #20
 8007104:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800710c:	2b02      	cmp	r3, #2
 800710e:	d15c      	bne.n	80071ca <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	429a      	cmp	r2, r3
 800711a:	d915      	bls.n	8007148 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	1ad2      	subs	r2, r2, r3
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	b29b      	uxth	r3, r3
 8007130:	461a      	mov	r2, r3
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 febd 	bl	8007eb4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800713a:	2300      	movs	r3, #0
 800713c:	2200      	movs	r2, #0
 800713e:	2100      	movs	r1, #0
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f001 fb12 	bl	800876a <USBD_LL_PrepareReceive>
 8007146:	e04e      	b.n	80071e6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	6912      	ldr	r2, [r2, #16]
 8007150:	fbb3 f1f2 	udiv	r1, r3, r2
 8007154:	fb01 f202 	mul.w	r2, r1, r2
 8007158:	1a9b      	subs	r3, r3, r2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d11c      	bne.n	8007198 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	689a      	ldr	r2, [r3, #8]
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007166:	429a      	cmp	r2, r3
 8007168:	d316      	bcc.n	8007198 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007174:	429a      	cmp	r2, r3
 8007176:	d20f      	bcs.n	8007198 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007178:	2200      	movs	r2, #0
 800717a:	2100      	movs	r1, #0
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 fe99 	bl	8007eb4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800718a:	2300      	movs	r3, #0
 800718c:	2200      	movs	r2, #0
 800718e:	2100      	movs	r1, #0
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f001 faea 	bl	800876a <USBD_LL_PrepareReceive>
 8007196:	e026      	b.n	80071e6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00a      	beq.n	80071ba <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d105      	bne.n	80071ba <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80071ba:	2180      	movs	r1, #128	@ 0x80
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f001 fa29 	bl	8008614 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fecb 	bl	8007f5e <USBD_CtlReceiveStatus>
 80071c8:	e00d      	b.n	80071e6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d004      	beq.n	80071de <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d103      	bne.n	80071e6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80071de:	2180      	movs	r1, #128	@ 0x80
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f001 fa17 	bl	8008614 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d11d      	bne.n	800722c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f7ff fe81 	bl	8006ef8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80071fe:	e015      	b.n	800722c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00d      	beq.n	8007228 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007212:	2b03      	cmp	r3, #3
 8007214:	d108      	bne.n	8007228 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	7afa      	ldrb	r2, [r7, #11]
 8007220:	4611      	mov	r1, r2
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	4798      	blx	r3
 8007226:	e001      	b.n	800722c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007228:	2302      	movs	r3, #2
 800722a:	e000      	b.n	800722e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800723e:	2340      	movs	r3, #64	@ 0x40
 8007240:	2200      	movs	r2, #0
 8007242:	2100      	movs	r1, #0
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 f9a0 	bl	800858a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2240      	movs	r2, #64	@ 0x40
 8007256:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800725a:	2340      	movs	r3, #64	@ 0x40
 800725c:	2200      	movs	r2, #0
 800725e:	2180      	movs	r1, #128	@ 0x80
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 f992 	bl	800858a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2240      	movs	r2, #64	@ 0x40
 8007270:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	6852      	ldr	r2, [r2, #4]
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	4611      	mov	r1, r2
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	4798      	blx	r3
  }

  return USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	78fa      	ldrb	r2, [r7, #3]
 80072c8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr

080072d6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b083      	sub	sp, #12
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2204      	movs	r2, #4
 80072ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bc80      	pop	{r7}
 80072fc:	4770      	bx	lr

080072fe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800730c:	2b04      	cmp	r3, #4
 800730e:	d105      	bne.n	800731c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr

08007328 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007336:	2b03      	cmp	r3, #3
 8007338:	d10b      	bne.n	8007352 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d005      	beq.n	8007352 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007372:	2b40      	cmp	r3, #64	@ 0x40
 8007374:	d005      	beq.n	8007382 <USBD_StdDevReq+0x26>
 8007376:	2b40      	cmp	r3, #64	@ 0x40
 8007378:	d84f      	bhi.n	800741a <USBD_StdDevReq+0xbe>
 800737a:	2b00      	cmp	r3, #0
 800737c:	d009      	beq.n	8007392 <USBD_StdDevReq+0x36>
 800737e:	2b20      	cmp	r3, #32
 8007380:	d14b      	bne.n	800741a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
      break;
 8007390:	e048      	b.n	8007424 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	2b09      	cmp	r3, #9
 8007398:	d839      	bhi.n	800740e <USBD_StdDevReq+0xb2>
 800739a:	a201      	add	r2, pc, #4	@ (adr r2, 80073a0 <USBD_StdDevReq+0x44>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	080073f1 	.word	0x080073f1
 80073a4:	08007405 	.word	0x08007405
 80073a8:	0800740f 	.word	0x0800740f
 80073ac:	080073fb 	.word	0x080073fb
 80073b0:	0800740f 	.word	0x0800740f
 80073b4:	080073d3 	.word	0x080073d3
 80073b8:	080073c9 	.word	0x080073c9
 80073bc:	0800740f 	.word	0x0800740f
 80073c0:	080073e7 	.word	0x080073e7
 80073c4:	080073dd 	.word	0x080073dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f9dc 	bl	8007788 <USBD_GetDescriptor>
          break;
 80073d0:	e022      	b.n	8007418 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fb3f 	bl	8007a58 <USBD_SetAddress>
          break;
 80073da:	e01d      	b.n	8007418 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fb7e 	bl	8007ae0 <USBD_SetConfig>
          break;
 80073e4:	e018      	b.n	8007418 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fc07 	bl	8007bfc <USBD_GetConfig>
          break;
 80073ee:	e013      	b.n	8007418 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fc37 	bl	8007c66 <USBD_GetStatus>
          break;
 80073f8:	e00e      	b.n	8007418 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fc65 	bl	8007ccc <USBD_SetFeature>
          break;
 8007402:	e009      	b.n	8007418 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fc74 	bl	8007cf4 <USBD_ClrFeature>
          break;
 800740c:	e004      	b.n	8007418 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fcc9 	bl	8007da8 <USBD_CtlError>
          break;
 8007416:	bf00      	nop
      }
      break;
 8007418:	e004      	b.n	8007424 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fcc3 	bl	8007da8 <USBD_CtlError>
      break;
 8007422:	bf00      	nop
  }

  return ret;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop

08007430 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007446:	2b40      	cmp	r3, #64	@ 0x40
 8007448:	d005      	beq.n	8007456 <USBD_StdItfReq+0x26>
 800744a:	2b40      	cmp	r3, #64	@ 0x40
 800744c:	d82e      	bhi.n	80074ac <USBD_StdItfReq+0x7c>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <USBD_StdItfReq+0x26>
 8007452:	2b20      	cmp	r3, #32
 8007454:	d12a      	bne.n	80074ac <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800745c:	3b01      	subs	r3, #1
 800745e:	2b02      	cmp	r3, #2
 8007460:	d81d      	bhi.n	800749e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	889b      	ldrh	r3, [r3, #4]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b01      	cmp	r3, #1
 800746a:	d813      	bhi.n	8007494 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	4798      	blx	r3
 800747a:	4603      	mov	r3, r0
 800747c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	88db      	ldrh	r3, [r3, #6]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d110      	bne.n	80074a8 <USBD_StdItfReq+0x78>
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10d      	bne.n	80074a8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fd53 	bl	8007f38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007492:	e009      	b.n	80074a8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fc86 	bl	8007da8 <USBD_CtlError>
          break;
 800749c:	e004      	b.n	80074a8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fc81 	bl	8007da8 <USBD_CtlError>
          break;
 80074a6:	e000      	b.n	80074aa <USBD_StdItfReq+0x7a>
          break;
 80074a8:	bf00      	nop
      }
      break;
 80074aa:	e004      	b.n	80074b6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80074ac:	6839      	ldr	r1, [r7, #0]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 fc7a 	bl	8007da8 <USBD_CtlError>
      break;
 80074b4:	bf00      	nop
  }

  return USBD_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	889b      	ldrh	r3, [r3, #4]
 80074d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074dc:	2b40      	cmp	r3, #64	@ 0x40
 80074de:	d007      	beq.n	80074f0 <USBD_StdEPReq+0x30>
 80074e0:	2b40      	cmp	r3, #64	@ 0x40
 80074e2:	f200 8146 	bhi.w	8007772 <USBD_StdEPReq+0x2b2>
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <USBD_StdEPReq+0x40>
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	f040 8141 	bne.w	8007772 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
      break;
 80074fe:	e13d      	b.n	800777c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007508:	2b20      	cmp	r3, #32
 800750a:	d10a      	bne.n	8007522 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
 800751a:	4603      	mov	r3, r0
 800751c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	e12d      	b.n	800777e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	785b      	ldrb	r3, [r3, #1]
 8007526:	2b03      	cmp	r3, #3
 8007528:	d007      	beq.n	800753a <USBD_StdEPReq+0x7a>
 800752a:	2b03      	cmp	r3, #3
 800752c:	f300 811b 	bgt.w	8007766 <USBD_StdEPReq+0x2a6>
 8007530:	2b00      	cmp	r3, #0
 8007532:	d072      	beq.n	800761a <USBD_StdEPReq+0x15a>
 8007534:	2b01      	cmp	r3, #1
 8007536:	d03a      	beq.n	80075ae <USBD_StdEPReq+0xee>
 8007538:	e115      	b.n	8007766 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007540:	2b02      	cmp	r3, #2
 8007542:	d002      	beq.n	800754a <USBD_StdEPReq+0x8a>
 8007544:	2b03      	cmp	r3, #3
 8007546:	d015      	beq.n	8007574 <USBD_StdEPReq+0xb4>
 8007548:	e02b      	b.n	80075a2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800754a:	7bbb      	ldrb	r3, [r7, #14]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00c      	beq.n	800756a <USBD_StdEPReq+0xaa>
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2b80      	cmp	r3, #128	@ 0x80
 8007554:	d009      	beq.n	800756a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 f85a 	bl	8008614 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007560:	2180      	movs	r1, #128	@ 0x80
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 f856 	bl	8008614 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007568:	e020      	b.n	80075ac <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fc1b 	bl	8007da8 <USBD_CtlError>
              break;
 8007572:	e01b      	b.n	80075ac <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	885b      	ldrh	r3, [r3, #2]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10e      	bne.n	800759a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00b      	beq.n	800759a <USBD_StdEPReq+0xda>
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b80      	cmp	r3, #128	@ 0x80
 8007586:	d008      	beq.n	800759a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	88db      	ldrh	r3, [r3, #6]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d104      	bne.n	800759a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f001 f83d 	bl	8008614 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fccc 	bl	8007f38 <USBD_CtlSendStatus>

              break;
 80075a0:	e004      	b.n	80075ac <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fbff 	bl	8007da8 <USBD_CtlError>
              break;
 80075aa:	bf00      	nop
          }
          break;
 80075ac:	e0e0      	b.n	8007770 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d002      	beq.n	80075be <USBD_StdEPReq+0xfe>
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d015      	beq.n	80075e8 <USBD_StdEPReq+0x128>
 80075bc:	e026      	b.n	800760c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075be:	7bbb      	ldrb	r3, [r7, #14]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00c      	beq.n	80075de <USBD_StdEPReq+0x11e>
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	2b80      	cmp	r3, #128	@ 0x80
 80075c8:	d009      	beq.n	80075de <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 f820 	bl	8008614 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075d4:	2180      	movs	r1, #128	@ 0x80
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f001 f81c 	bl	8008614 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075dc:	e01c      	b.n	8007618 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fbe1 	bl	8007da8 <USBD_CtlError>
              break;
 80075e6:	e017      	b.n	8007618 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	885b      	ldrh	r3, [r3, #2]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d112      	bne.n	8007616 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d004      	beq.n	8007604 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 f827 	bl	8008652 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fc97 	bl	8007f38 <USBD_CtlSendStatus>
              }
              break;
 800760a:	e004      	b.n	8007616 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fbca 	bl	8007da8 <USBD_CtlError>
              break;
 8007614:	e000      	b.n	8007618 <USBD_StdEPReq+0x158>
              break;
 8007616:	bf00      	nop
          }
          break;
 8007618:	e0aa      	b.n	8007770 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007620:	2b02      	cmp	r3, #2
 8007622:	d002      	beq.n	800762a <USBD_StdEPReq+0x16a>
 8007624:	2b03      	cmp	r3, #3
 8007626:	d032      	beq.n	800768e <USBD_StdEPReq+0x1ce>
 8007628:	e097      	b.n	800775a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d007      	beq.n	8007640 <USBD_StdEPReq+0x180>
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	2b80      	cmp	r3, #128	@ 0x80
 8007634:	d004      	beq.n	8007640 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fbb5 	bl	8007da8 <USBD_CtlError>
                break;
 800763e:	e091      	b.n	8007764 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007640:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007644:	2b00      	cmp	r3, #0
 8007646:	da0b      	bge.n	8007660 <USBD_StdEPReq+0x1a0>
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	3310      	adds	r3, #16
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	4413      	add	r3, r2
 800765c:	3304      	adds	r3, #4
 800765e:	e00b      	b.n	8007678 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007666:	4613      	mov	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	4413      	add	r3, r2
 8007676:	3304      	adds	r3, #4
 8007678:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2202      	movs	r2, #2
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fbf8 	bl	8007e7c <USBD_CtlSendData>
              break;
 800768c:	e06a      	b.n	8007764 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800768e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007692:	2b00      	cmp	r3, #0
 8007694:	da11      	bge.n	80076ba <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	f003 020f 	and.w	r2, r3, #15
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	440b      	add	r3, r1
 80076a8:	3318      	adds	r3, #24
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d117      	bne.n	80076e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fb78 	bl	8007da8 <USBD_CtlError>
                  break;
 80076b8:	e054      	b.n	8007764 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
 80076bc:	f003 020f 	and.w	r2, r3, #15
 80076c0:	6879      	ldr	r1, [r7, #4]
 80076c2:	4613      	mov	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	440b      	add	r3, r1
 80076cc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d104      	bne.n	80076e0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fb65 	bl	8007da8 <USBD_CtlError>
                  break;
 80076de:	e041      	b.n	8007764 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	da0b      	bge.n	8007700 <USBD_StdEPReq+0x240>
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	3310      	adds	r3, #16
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	4413      	add	r3, r2
 80076fc:	3304      	adds	r3, #4
 80076fe:	e00b      	b.n	8007718 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	4413      	add	r3, r2
 8007716:	3304      	adds	r3, #4
 8007718:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <USBD_StdEPReq+0x266>
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	2b80      	cmp	r3, #128	@ 0x80
 8007724:	d103      	bne.n	800772e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	e00e      	b.n	800774c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 ffac 	bl	8008690 <USBD_LL_IsStallEP>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2201      	movs	r2, #1
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	e002      	b.n	800774c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2202      	movs	r2, #2
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fb92 	bl	8007e7c <USBD_CtlSendData>
              break;
 8007758:	e004      	b.n	8007764 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fb23 	bl	8007da8 <USBD_CtlError>
              break;
 8007762:	bf00      	nop
          }
          break;
 8007764:	e004      	b.n	8007770 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fb1d 	bl	8007da8 <USBD_CtlError>
          break;
 800776e:	bf00      	nop
      }
      break;
 8007770:	e004      	b.n	800777c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fb17 	bl	8007da8 <USBD_CtlError>
      break;
 800777a:	bf00      	nop
  }

  return ret;
 800777c:	7bfb      	ldrb	r3, [r7, #15]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
	...

08007788 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	885b      	ldrh	r3, [r3, #2]
 80077a2:	0a1b      	lsrs	r3, r3, #8
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	2b06      	cmp	r3, #6
 80077aa:	f200 8128 	bhi.w	80079fe <USBD_GetDescriptor+0x276>
 80077ae:	a201      	add	r2, pc, #4	@ (adr r2, 80077b4 <USBD_GetDescriptor+0x2c>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	080077d1 	.word	0x080077d1
 80077b8:	080077e9 	.word	0x080077e9
 80077bc:	08007829 	.word	0x08007829
 80077c0:	080079ff 	.word	0x080079ff
 80077c4:	080079ff 	.word	0x080079ff
 80077c8:	0800799f 	.word	0x0800799f
 80077cc:	080079cb 	.word	0x080079cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	7c12      	ldrb	r2, [r2, #16]
 80077dc:	f107 0108 	add.w	r1, r7, #8
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	60f8      	str	r0, [r7, #12]
      break;
 80077e6:	e112      	b.n	8007a0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	7c1b      	ldrb	r3, [r3, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10d      	bne.n	800780c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f8:	f107 0208 	add.w	r2, r7, #8
 80077fc:	4610      	mov	r0, r2
 80077fe:	4798      	blx	r3
 8007800:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3301      	adds	r3, #1
 8007806:	2202      	movs	r2, #2
 8007808:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800780a:	e100      	b.n	8007a0e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007814:	f107 0208 	add.w	r2, r7, #8
 8007818:	4610      	mov	r0, r2
 800781a:	4798      	blx	r3
 800781c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3301      	adds	r3, #1
 8007822:	2202      	movs	r2, #2
 8007824:	701a      	strb	r2, [r3, #0]
      break;
 8007826:	e0f2      	b.n	8007a0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	885b      	ldrh	r3, [r3, #2]
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b05      	cmp	r3, #5
 8007830:	f200 80ac 	bhi.w	800798c <USBD_GetDescriptor+0x204>
 8007834:	a201      	add	r2, pc, #4	@ (adr r2, 800783c <USBD_GetDescriptor+0xb4>)
 8007836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783a:	bf00      	nop
 800783c:	08007855 	.word	0x08007855
 8007840:	08007889 	.word	0x08007889
 8007844:	080078bd 	.word	0x080078bd
 8007848:	080078f1 	.word	0x080078f1
 800784c:	08007925 	.word	0x08007925
 8007850:	08007959 	.word	0x08007959
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00b      	beq.n	8007878 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	7c12      	ldrb	r2, [r2, #16]
 800786c:	f107 0108 	add.w	r1, r7, #8
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
 8007874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007876:	e091      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa94 	bl	8007da8 <USBD_CtlError>
            err++;
 8007880:	7afb      	ldrb	r3, [r7, #11]
 8007882:	3301      	adds	r3, #1
 8007884:	72fb      	strb	r3, [r7, #11]
          break;
 8007886:	e089      	b.n	800799c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	7c12      	ldrb	r2, [r2, #16]
 80078a0:	f107 0108 	add.w	r1, r7, #8
 80078a4:	4610      	mov	r0, r2
 80078a6:	4798      	blx	r3
 80078a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078aa:	e077      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa7a 	bl	8007da8 <USBD_CtlError>
            err++;
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	3301      	adds	r3, #1
 80078b8:	72fb      	strb	r3, [r7, #11]
          break;
 80078ba:	e06f      	b.n	800799c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00b      	beq.n	80078e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	7c12      	ldrb	r2, [r2, #16]
 80078d4:	f107 0108 	add.w	r1, r7, #8
 80078d8:	4610      	mov	r0, r2
 80078da:	4798      	blx	r3
 80078dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078de:	e05d      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa60 	bl	8007da8 <USBD_CtlError>
            err++;
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	3301      	adds	r3, #1
 80078ec:	72fb      	strb	r3, [r7, #11]
          break;
 80078ee:	e055      	b.n	800799c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00b      	beq.n	8007914 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	7c12      	ldrb	r2, [r2, #16]
 8007908:	f107 0108 	add.w	r1, r7, #8
 800790c:	4610      	mov	r0, r2
 800790e:	4798      	blx	r3
 8007910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007912:	e043      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fa46 	bl	8007da8 <USBD_CtlError>
            err++;
 800791c:	7afb      	ldrb	r3, [r7, #11]
 800791e:	3301      	adds	r3, #1
 8007920:	72fb      	strb	r3, [r7, #11]
          break;
 8007922:	e03b      	b.n	800799c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	7c12      	ldrb	r2, [r2, #16]
 800793c:	f107 0108 	add.w	r1, r7, #8
 8007940:	4610      	mov	r0, r2
 8007942:	4798      	blx	r3
 8007944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007946:	e029      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007948:	6839      	ldr	r1, [r7, #0]
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fa2c 	bl	8007da8 <USBD_CtlError>
            err++;
 8007950:	7afb      	ldrb	r3, [r7, #11]
 8007952:	3301      	adds	r3, #1
 8007954:	72fb      	strb	r3, [r7, #11]
          break;
 8007956:	e021      	b.n	800799c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00b      	beq.n	800797c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	7c12      	ldrb	r2, [r2, #16]
 8007970:	f107 0108 	add.w	r1, r7, #8
 8007974:	4610      	mov	r0, r2
 8007976:	4798      	blx	r3
 8007978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800797a:	e00f      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fa12 	bl	8007da8 <USBD_CtlError>
            err++;
 8007984:	7afb      	ldrb	r3, [r7, #11]
 8007986:	3301      	adds	r3, #1
 8007988:	72fb      	strb	r3, [r7, #11]
          break;
 800798a:	e007      	b.n	800799c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fa0a 	bl	8007da8 <USBD_CtlError>
          err++;
 8007994:	7afb      	ldrb	r3, [r7, #11]
 8007996:	3301      	adds	r3, #1
 8007998:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800799a:	e038      	b.n	8007a0e <USBD_GetDescriptor+0x286>
 800799c:	e037      	b.n	8007a0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	7c1b      	ldrb	r3, [r3, #16]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d109      	bne.n	80079ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ae:	f107 0208 	add.w	r2, r7, #8
 80079b2:	4610      	mov	r0, r2
 80079b4:	4798      	blx	r3
 80079b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079b8:	e029      	b.n	8007a0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f9f3 	bl	8007da8 <USBD_CtlError>
        err++;
 80079c2:	7afb      	ldrb	r3, [r7, #11]
 80079c4:	3301      	adds	r3, #1
 80079c6:	72fb      	strb	r3, [r7, #11]
      break;
 80079c8:	e021      	b.n	8007a0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	7c1b      	ldrb	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10d      	bne.n	80079ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079da:	f107 0208 	add.w	r2, r7, #8
 80079de:	4610      	mov	r0, r2
 80079e0:	4798      	blx	r3
 80079e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3301      	adds	r3, #1
 80079e8:	2207      	movs	r2, #7
 80079ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079ec:	e00f      	b.n	8007a0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f9d9 	bl	8007da8 <USBD_CtlError>
        err++;
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	3301      	adds	r3, #1
 80079fa:	72fb      	strb	r3, [r7, #11]
      break;
 80079fc:	e007      	b.n	8007a0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079fe:	6839      	ldr	r1, [r7, #0]
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f9d1 	bl	8007da8 <USBD_CtlError>
      err++;
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a0c:	bf00      	nop
  }

  if (err != 0U)
 8007a0e:	7afb      	ldrb	r3, [r7, #11]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d11c      	bne.n	8007a4e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007a14:	893b      	ldrh	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d011      	beq.n	8007a3e <USBD_GetDescriptor+0x2b6>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	88db      	ldrh	r3, [r3, #6]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00d      	beq.n	8007a3e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	88da      	ldrh	r2, [r3, #6]
 8007a26:	893b      	ldrh	r3, [r7, #8]
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	bf28      	it	cs
 8007a2c:	4613      	movcs	r3, r2
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a32:	893b      	ldrh	r3, [r7, #8]
 8007a34:	461a      	mov	r2, r3
 8007a36:	68f9      	ldr	r1, [r7, #12]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 fa1f 	bl	8007e7c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	88db      	ldrh	r3, [r3, #6]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d104      	bne.n	8007a50 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fa76 	bl	8007f38 <USBD_CtlSendStatus>
 8007a4c:	e000      	b.n	8007a50 <USBD_GetDescriptor+0x2c8>
    return;
 8007a4e:	bf00      	nop
    }
  }
}
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop

08007a58 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	889b      	ldrh	r3, [r3, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d130      	bne.n	8007acc <USBD_SetAddress+0x74>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	88db      	ldrh	r3, [r3, #6]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d12c      	bne.n	8007acc <USBD_SetAddress+0x74>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	885b      	ldrh	r3, [r3, #2]
 8007a76:	2b7f      	cmp	r3, #127	@ 0x7f
 8007a78:	d828      	bhi.n	8007acc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	885b      	ldrh	r3, [r3, #2]
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d104      	bne.n	8007a9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f988 	bl	8007da8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a98:	e01d      	b.n	8007ad6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	7bfa      	ldrb	r2, [r7, #15]
 8007a9e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fe1d 	bl	80086e6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fa43 	bl	8007f38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d004      	beq.n	8007ac2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac0:	e009      	b.n	8007ad6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aca:	e004      	b.n	8007ad6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f96a 	bl	8007da8 <USBD_CtlError>
  }
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	885b      	ldrh	r3, [r3, #2]
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	4b41      	ldr	r3, [pc, #260]	@ (8007bf8 <USBD_SetConfig+0x118>)
 8007af2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007af4:	4b40      	ldr	r3, [pc, #256]	@ (8007bf8 <USBD_SetConfig+0x118>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d904      	bls.n	8007b06 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f952 	bl	8007da8 <USBD_CtlError>
 8007b04:	e075      	b.n	8007bf2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d002      	beq.n	8007b16 <USBD_SetConfig+0x36>
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d023      	beq.n	8007b5c <USBD_SetConfig+0x7c>
 8007b14:	e062      	b.n	8007bdc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007b16:	4b38      	ldr	r3, [pc, #224]	@ (8007bf8 <USBD_SetConfig+0x118>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d01a      	beq.n	8007b54 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007b1e:	4b36      	ldr	r3, [pc, #216]	@ (8007bf8 <USBD_SetConfig+0x118>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2203      	movs	r2, #3
 8007b2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b30:	4b31      	ldr	r3, [pc, #196]	@ (8007bf8 <USBD_SetConfig+0x118>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff f9e8 	bl	8006f0c <USBD_SetClassConfig>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d104      	bne.n	8007b4c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f92f 	bl	8007da8 <USBD_CtlError>
            return;
 8007b4a:	e052      	b.n	8007bf2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f9f3 	bl	8007f38 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b52:	e04e      	b.n	8007bf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f9ef 	bl	8007f38 <USBD_CtlSendStatus>
        break;
 8007b5a:	e04a      	b.n	8007bf2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007b5c:	4b26      	ldr	r3, [pc, #152]	@ (8007bf8 <USBD_SetConfig+0x118>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d112      	bne.n	8007b8a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007b6c:	4b22      	ldr	r3, [pc, #136]	@ (8007bf8 <USBD_SetConfig+0x118>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	461a      	mov	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b76:	4b20      	ldr	r3, [pc, #128]	@ (8007bf8 <USBD_SetConfig+0x118>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff f9e4 	bl	8006f4a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f9d8 	bl	8007f38 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b88:	e033      	b.n	8007bf2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8007bf8 <USBD_SetConfig+0x118>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d01d      	beq.n	8007bd4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff f9d2 	bl	8006f4a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007ba6:	4b14      	ldr	r3, [pc, #80]	@ (8007bf8 <USBD_SetConfig+0x118>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bb0:	4b11      	ldr	r3, [pc, #68]	@ (8007bf8 <USBD_SetConfig+0x118>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff f9a8 	bl	8006f0c <USBD_SetClassConfig>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d104      	bne.n	8007bcc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f8ef 	bl	8007da8 <USBD_CtlError>
            return;
 8007bca:	e012      	b.n	8007bf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f9b3 	bl	8007f38 <USBD_CtlSendStatus>
        break;
 8007bd2:	e00e      	b.n	8007bf2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f9af 	bl	8007f38 <USBD_CtlSendStatus>
        break;
 8007bda:	e00a      	b.n	8007bf2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f8e2 	bl	8007da8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007be4:	4b04      	ldr	r3, [pc, #16]	@ (8007bf8 <USBD_SetConfig+0x118>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	4619      	mov	r1, r3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7ff f9ad 	bl	8006f4a <USBD_ClrClassConfig>
        break;
 8007bf0:	bf00      	nop
    }
  }
}
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20000234 	.word	0x20000234

08007bfc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	88db      	ldrh	r3, [r3, #6]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d004      	beq.n	8007c18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007c0e:	6839      	ldr	r1, [r7, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8c9 	bl	8007da8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c16:	e022      	b.n	8007c5e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	dc02      	bgt.n	8007c28 <USBD_GetConfig+0x2c>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	dc03      	bgt.n	8007c2e <USBD_GetConfig+0x32>
 8007c26:	e015      	b.n	8007c54 <USBD_GetConfig+0x58>
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d00b      	beq.n	8007c44 <USBD_GetConfig+0x48>
 8007c2c:	e012      	b.n	8007c54 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3308      	adds	r3, #8
 8007c38:	2201      	movs	r2, #1
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f91d 	bl	8007e7c <USBD_CtlSendData>
        break;
 8007c42:	e00c      	b.n	8007c5e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	2201      	movs	r2, #1
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f915 	bl	8007e7c <USBD_CtlSendData>
        break;
 8007c52:	e004      	b.n	8007c5e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f8a6 	bl	8007da8 <USBD_CtlError>
        break;
 8007c5c:	bf00      	nop
}
 8007c5e:	bf00      	nop
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c76:	3b01      	subs	r3, #1
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d81e      	bhi.n	8007cba <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	88db      	ldrh	r3, [r3, #6]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d004      	beq.n	8007c8e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f88e 	bl	8007da8 <USBD_CtlError>
        break;
 8007c8c:	e01a      	b.n	8007cc4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f043 0202 	orr.w	r2, r3, #2
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	330c      	adds	r3, #12
 8007cae:	2202      	movs	r2, #2
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f8e2 	bl	8007e7c <USBD_CtlSendData>
      break;
 8007cb8:	e004      	b.n	8007cc4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f873 	bl	8007da8 <USBD_CtlError>
      break;
 8007cc2:	bf00      	nop
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	885b      	ldrh	r3, [r3, #2]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d106      	bne.n	8007cec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f926 	bl	8007f38 <USBD_CtlSendStatus>
  }
}
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d04:	3b01      	subs	r3, #1
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d80b      	bhi.n	8007d22 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	885b      	ldrh	r3, [r3, #2]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d10c      	bne.n	8007d2c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f90c 	bl	8007f38 <USBD_CtlSendStatus>
      }
      break;
 8007d20:	e004      	b.n	8007d2c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f83f 	bl	8007da8 <USBD_CtlError>
      break;
 8007d2a:	e000      	b.n	8007d2e <USBD_ClrFeature+0x3a>
      break;
 8007d2c:	bf00      	nop
  }
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781a      	ldrb	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	785a      	ldrb	r2, [r3, #1]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	3302      	adds	r3, #2
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	3303      	adds	r3, #3
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	4413      	add	r3, r2
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	3305      	adds	r3, #5
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	021b      	lsls	r3, r3, #8
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	3306      	adds	r3, #6
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	3307      	adds	r3, #7
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	4413      	add	r3, r2
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	80da      	strh	r2, [r3, #6]

}
 8007d9e:	bf00      	nop
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc80      	pop	{r7}
 8007da6:	4770      	bx	lr

08007da8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007db2:	2180      	movs	r1, #128	@ 0x80
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fc2d 	bl	8008614 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007dba:	2100      	movs	r1, #0
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fc29 	bl	8008614 <USBD_LL_StallEP>
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b086      	sub	sp, #24
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d032      	beq.n	8007e46 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f000 f834 	bl	8007e4e <USBD_GetLen>
 8007de6:	4603      	mov	r3, r0
 8007de8:	3301      	adds	r3, #1
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	75fa      	strb	r2, [r7, #23]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	4413      	add	r3, r2
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	7812      	ldrb	r2, [r2, #0]
 8007e04:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007e06:	7dfb      	ldrb	r3, [r7, #23]
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	75fa      	strb	r2, [r7, #23]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	4413      	add	r3, r2
 8007e12:	2203      	movs	r2, #3
 8007e14:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e16:	e012      	b.n	8007e3e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	1c5a      	adds	r2, r3, #1
 8007e1c:	60fa      	str	r2, [r7, #12]
 8007e1e:	7dfa      	ldrb	r2, [r7, #23]
 8007e20:	1c51      	adds	r1, r2, #1
 8007e22:	75f9      	strb	r1, [r7, #23]
 8007e24:	4611      	mov	r1, r2
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	440a      	add	r2, r1
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
 8007e30:	1c5a      	adds	r2, r3, #1
 8007e32:	75fa      	strb	r2, [r7, #23]
 8007e34:	461a      	mov	r2, r3
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4413      	add	r3, r2
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e8      	bne.n	8007e18 <USBD_GetString+0x4e>
    }
  }
}
 8007e46:	bf00      	nop
 8007e48:	3718      	adds	r7, #24
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b085      	sub	sp, #20
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007e5a:	e005      	b.n	8007e68 <USBD_GetLen+0x1a>
  {
    len++;
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	3301      	adds	r3, #1
 8007e66:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1f5      	bne.n	8007e5c <USBD_GetLen+0xe>
  }

  return len;
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bc80      	pop	{r7}
 8007e7a:	4770      	bx	lr

08007e7c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007e92:	88fa      	ldrh	r2, [r7, #6]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e98:	88fa      	ldrh	r2, [r7, #6]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e9e:	88fb      	ldrh	r3, [r7, #6]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 fc3d 	bl	8008724 <USBD_LL_Transmit>

  return USBD_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 fc2b 	bl	8008724 <USBD_LL_Transmit>

  return USBD_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2203      	movs	r2, #3
 8007eea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007eee:	88fa      	ldrh	r2, [r7, #6]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007ef6:	88fa      	ldrh	r2, [r7, #6]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007efe:	88fb      	ldrh	r3, [r7, #6]
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	2100      	movs	r1, #0
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 fc30 	bl	800876a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f22:	88fb      	ldrh	r3, [r7, #6]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	2100      	movs	r1, #0
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fc1e 	bl	800876a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2204      	movs	r2, #4
 8007f44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f48:	2300      	movs	r3, #0
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fbe8 	bl	8008724 <USBD_LL_Transmit>

  return USBD_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b082      	sub	sp, #8
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2205      	movs	r2, #5
 8007f6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2200      	movs	r2, #0
 8007f72:	2100      	movs	r1, #0
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fbf8 	bl	800876a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3708      	adds	r7, #8
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	4912      	ldr	r1, [pc, #72]	@ (8007fd4 <MX_USB_DEVICE_Init+0x50>)
 8007f8c:	4812      	ldr	r0, [pc, #72]	@ (8007fd8 <MX_USB_DEVICE_Init+0x54>)
 8007f8e:	f7fe ff63 	bl	8006e58 <USBD_Init>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f98:	f7f8 fa50 	bl	800043c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f9c:	490f      	ldr	r1, [pc, #60]	@ (8007fdc <MX_USB_DEVICE_Init+0x58>)
 8007f9e:	480e      	ldr	r0, [pc, #56]	@ (8007fd8 <MX_USB_DEVICE_Init+0x54>)
 8007fa0:	f7fe ff85 	bl	8006eae <USBD_RegisterClass>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007faa:	f7f8 fa47 	bl	800043c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007fae:	490c      	ldr	r1, [pc, #48]	@ (8007fe0 <MX_USB_DEVICE_Init+0x5c>)
 8007fb0:	4809      	ldr	r0, [pc, #36]	@ (8007fd8 <MX_USB_DEVICE_Init+0x54>)
 8007fb2:	f7fe fee5 	bl	8006d80 <USBD_CDC_RegisterInterface>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fbc:	f7f8 fa3e 	bl	800043c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fc0:	4805      	ldr	r0, [pc, #20]	@ (8007fd8 <MX_USB_DEVICE_Init+0x54>)
 8007fc2:	f7fe ff8d 	bl	8006ee0 <USBD_Start>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fcc:	f7f8 fa36 	bl	800043c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fd0:	bf00      	nop
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	2000012c 	.word	0x2000012c
 8007fd8:	20000238 	.word	0x20000238
 8007fdc:	20000018 	.word	0x20000018
 8007fe0:	2000011c 	.word	0x2000011c

08007fe4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007fe8:	2200      	movs	r2, #0
 8007fea:	4905      	ldr	r1, [pc, #20]	@ (8008000 <CDC_Init_FS+0x1c>)
 8007fec:	4805      	ldr	r0, [pc, #20]	@ (8008004 <CDC_Init_FS+0x20>)
 8007fee:	f7fe fedd 	bl	8006dac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ff2:	4905      	ldr	r1, [pc, #20]	@ (8008008 <CDC_Init_FS+0x24>)
 8007ff4:	4803      	ldr	r0, [pc, #12]	@ (8008004 <CDC_Init_FS+0x20>)
 8007ff6:	f7fe fef2 	bl	8006dde <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ffa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	200008fc 	.word	0x200008fc
 8008004:	20000238 	.word	0x20000238
 8008008:	200004fc 	.word	0x200004fc

0800800c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008010:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008012:	4618      	mov	r0, r3
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr
	...

0800801c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	6039      	str	r1, [r7, #0]
 8008026:	71fb      	strb	r3, [r7, #7]
 8008028:	4613      	mov	r3, r2
 800802a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	2b23      	cmp	r3, #35	@ 0x23
 8008030:	d84a      	bhi.n	80080c8 <CDC_Control_FS+0xac>
 8008032:	a201      	add	r2, pc, #4	@ (adr r2, 8008038 <CDC_Control_FS+0x1c>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	080080c9 	.word	0x080080c9
 800803c:	080080c9 	.word	0x080080c9
 8008040:	080080c9 	.word	0x080080c9
 8008044:	080080c9 	.word	0x080080c9
 8008048:	080080c9 	.word	0x080080c9
 800804c:	080080c9 	.word	0x080080c9
 8008050:	080080c9 	.word	0x080080c9
 8008054:	080080c9 	.word	0x080080c9
 8008058:	080080c9 	.word	0x080080c9
 800805c:	080080c9 	.word	0x080080c9
 8008060:	080080c9 	.word	0x080080c9
 8008064:	080080c9 	.word	0x080080c9
 8008068:	080080c9 	.word	0x080080c9
 800806c:	080080c9 	.word	0x080080c9
 8008070:	080080c9 	.word	0x080080c9
 8008074:	080080c9 	.word	0x080080c9
 8008078:	080080c9 	.word	0x080080c9
 800807c:	080080c9 	.word	0x080080c9
 8008080:	080080c9 	.word	0x080080c9
 8008084:	080080c9 	.word	0x080080c9
 8008088:	080080c9 	.word	0x080080c9
 800808c:	080080c9 	.word	0x080080c9
 8008090:	080080c9 	.word	0x080080c9
 8008094:	080080c9 	.word	0x080080c9
 8008098:	080080c9 	.word	0x080080c9
 800809c:	080080c9 	.word	0x080080c9
 80080a0:	080080c9 	.word	0x080080c9
 80080a4:	080080c9 	.word	0x080080c9
 80080a8:	080080c9 	.word	0x080080c9
 80080ac:	080080c9 	.word	0x080080c9
 80080b0:	080080c9 	.word	0x080080c9
 80080b4:	080080c9 	.word	0x080080c9
 80080b8:	080080c9 	.word	0x080080c9
 80080bc:	080080c9 	.word	0x080080c9
 80080c0:	080080c9 	.word	0x080080c9
 80080c4:	080080c9 	.word	0x080080c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080c8:	bf00      	nop
  }

  return (USBD_OK);
 80080ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop

080080d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	4805      	ldr	r0, [pc, #20]	@ (80080fc <CDC_Receive_FS+0x24>)
 80080e6:	f7fe fe7a 	bl	8006dde <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80080ea:	4804      	ldr	r0, [pc, #16]	@ (80080fc <CDC_Receive_FS+0x24>)
 80080ec:	f7fe fe8a 	bl	8006e04 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80080f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20000238 	.word	0x20000238

08008100 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	4603      	mov	r3, r0
 8008108:	6039      	str	r1, [r7, #0]
 800810a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2212      	movs	r2, #18
 8008110:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008112:	4b03      	ldr	r3, [pc, #12]	@ (8008120 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008114:	4618      	mov	r0, r3
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	bc80      	pop	{r7}
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	20000148 	.word	0x20000148

08008124 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	4603      	mov	r3, r0
 800812c:	6039      	str	r1, [r7, #0]
 800812e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2204      	movs	r2, #4
 8008134:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008136:	4b03      	ldr	r3, [pc, #12]	@ (8008144 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	bc80      	pop	{r7}
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	2000015c 	.word	0x2000015c

08008148 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	4603      	mov	r3, r0
 8008150:	6039      	str	r1, [r7, #0]
 8008152:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	4907      	ldr	r1, [pc, #28]	@ (800817c <USBD_FS_ProductStrDescriptor+0x34>)
 800815e:	4808      	ldr	r0, [pc, #32]	@ (8008180 <USBD_FS_ProductStrDescriptor+0x38>)
 8008160:	f7ff fe33 	bl	8007dca <USBD_GetString>
 8008164:	e004      	b.n	8008170 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	4904      	ldr	r1, [pc, #16]	@ (800817c <USBD_FS_ProductStrDescriptor+0x34>)
 800816a:	4805      	ldr	r0, [pc, #20]	@ (8008180 <USBD_FS_ProductStrDescriptor+0x38>)
 800816c:	f7ff fe2d 	bl	8007dca <USBD_GetString>
  }
  return USBD_StrDesc;
 8008170:	4b02      	ldr	r3, [pc, #8]	@ (800817c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008172:	4618      	mov	r0, r3
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	20000cfc 	.word	0x20000cfc
 8008180:	080088e0 	.word	0x080088e0

08008184 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	6039      	str	r1, [r7, #0]
 800818e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	4904      	ldr	r1, [pc, #16]	@ (80081a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008194:	4804      	ldr	r0, [pc, #16]	@ (80081a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008196:	f7ff fe18 	bl	8007dca <USBD_GetString>
  return USBD_StrDesc;
 800819a:	4b02      	ldr	r3, [pc, #8]	@ (80081a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800819c:	4618      	mov	r0, r3
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000cfc 	.word	0x20000cfc
 80081a8:	080088f8 	.word	0x080088f8

080081ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	4603      	mov	r3, r0
 80081b4:	6039      	str	r1, [r7, #0]
 80081b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	221a      	movs	r2, #26
 80081bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081be:	f000 f843 	bl	8008248 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081c2:	4b02      	ldr	r3, [pc, #8]	@ (80081cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20000160 	.word	0x20000160

080081d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	6039      	str	r1, [r7, #0]
 80081da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081dc:	79fb      	ldrb	r3, [r7, #7]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d105      	bne.n	80081ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	4907      	ldr	r1, [pc, #28]	@ (8008204 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081e6:	4808      	ldr	r0, [pc, #32]	@ (8008208 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081e8:	f7ff fdef 	bl	8007dca <USBD_GetString>
 80081ec:	e004      	b.n	80081f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	4904      	ldr	r1, [pc, #16]	@ (8008204 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081f2:	4805      	ldr	r0, [pc, #20]	@ (8008208 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081f4:	f7ff fde9 	bl	8007dca <USBD_GetString>
  }
  return USBD_StrDesc;
 80081f8:	4b02      	ldr	r3, [pc, #8]	@ (8008204 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20000cfc 	.word	0x20000cfc
 8008208:	0800890c 	.word	0x0800890c

0800820c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008218:	79fb      	ldrb	r3, [r7, #7]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d105      	bne.n	800822a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4907      	ldr	r1, [pc, #28]	@ (8008240 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008222:	4808      	ldr	r0, [pc, #32]	@ (8008244 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008224:	f7ff fdd1 	bl	8007dca <USBD_GetString>
 8008228:	e004      	b.n	8008234 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	4904      	ldr	r1, [pc, #16]	@ (8008240 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800822e:	4805      	ldr	r0, [pc, #20]	@ (8008244 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008230:	f7ff fdcb 	bl	8007dca <USBD_GetString>
  }
  return USBD_StrDesc;
 8008234:	4b02      	ldr	r3, [pc, #8]	@ (8008240 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20000cfc 	.word	0x20000cfc
 8008244:	08008918 	.word	0x08008918

08008248 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800824e:	4b0f      	ldr	r3, [pc, #60]	@ (800828c <Get_SerialNum+0x44>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008254:	4b0e      	ldr	r3, [pc, #56]	@ (8008290 <Get_SerialNum+0x48>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800825a:	4b0e      	ldr	r3, [pc, #56]	@ (8008294 <Get_SerialNum+0x4c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4413      	add	r3, r2
 8008266:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d009      	beq.n	8008282 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800826e:	2208      	movs	r2, #8
 8008270:	4909      	ldr	r1, [pc, #36]	@ (8008298 <Get_SerialNum+0x50>)
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f000 f814 	bl	80082a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008278:	2204      	movs	r2, #4
 800827a:	4908      	ldr	r1, [pc, #32]	@ (800829c <Get_SerialNum+0x54>)
 800827c:	68b8      	ldr	r0, [r7, #8]
 800827e:	f000 f80f 	bl	80082a0 <IntToUnicode>
  }
}
 8008282:	bf00      	nop
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	1ffff7e8 	.word	0x1ffff7e8
 8008290:	1ffff7ec 	.word	0x1ffff7ec
 8008294:	1ffff7f0 	.word	0x1ffff7f0
 8008298:	20000162 	.word	0x20000162
 800829c:	20000172 	.word	0x20000172

080082a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4613      	mov	r3, r2
 80082ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082b2:	2300      	movs	r3, #0
 80082b4:	75fb      	strb	r3, [r7, #23]
 80082b6:	e027      	b.n	8008308 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	0f1b      	lsrs	r3, r3, #28
 80082bc:	2b09      	cmp	r3, #9
 80082be:	d80b      	bhi.n	80082d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	0f1b      	lsrs	r3, r3, #28
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	4619      	mov	r1, r3
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	440b      	add	r3, r1
 80082d0:	3230      	adds	r2, #48	@ 0x30
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	701a      	strb	r2, [r3, #0]
 80082d6:	e00a      	b.n	80082ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	0f1b      	lsrs	r3, r3, #28
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	4619      	mov	r1, r3
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	440b      	add	r3, r1
 80082e8:	3237      	adds	r2, #55	@ 0x37
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	011b      	lsls	r3, r3, #4
 80082f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	3301      	adds	r3, #1
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	4413      	add	r3, r2
 80082fe:	2200      	movs	r2, #0
 8008300:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	3301      	adds	r3, #1
 8008306:	75fb      	strb	r3, [r7, #23]
 8008308:	7dfa      	ldrb	r2, [r7, #23]
 800830a:	79fb      	ldrb	r3, [r7, #7]
 800830c:	429a      	cmp	r2, r3
 800830e:	d3d3      	bcc.n	80082b8 <IntToUnicode+0x18>
  }
}
 8008310:	bf00      	nop
 8008312:	bf00      	nop
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	bc80      	pop	{r7}
 800831a:	4770      	bx	lr

0800831c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a0d      	ldr	r2, [pc, #52]	@ (8008360 <HAL_PCD_MspInit+0x44>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d113      	bne.n	8008356 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800832e:	4b0d      	ldr	r3, [pc, #52]	@ (8008364 <HAL_PCD_MspInit+0x48>)
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	4a0c      	ldr	r2, [pc, #48]	@ (8008364 <HAL_PCD_MspInit+0x48>)
 8008334:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008338:	61d3      	str	r3, [r2, #28]
 800833a:	4b0a      	ldr	r3, [pc, #40]	@ (8008364 <HAL_PCD_MspInit+0x48>)
 800833c:	69db      	ldr	r3, [r3, #28]
 800833e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008346:	2200      	movs	r2, #0
 8008348:	2100      	movs	r1, #0
 800834a:	2014      	movs	r0, #20
 800834c:	f7f8 fac9 	bl	80008e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008350:	2014      	movs	r0, #20
 8008352:	f7f8 fae2 	bl	800091a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008356:	bf00      	nop
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	40005c00 	.word	0x40005c00
 8008364:	40021000 	.word	0x40021000

08008368 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800837c:	4619      	mov	r1, r3
 800837e:	4610      	mov	r0, r2
 8008380:	f7fe fdf6 	bl	8006f70 <USBD_LL_SetupStage>
}
 8008384:	bf00      	nop
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800839e:	78fa      	ldrb	r2, [r7, #3]
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	4613      	mov	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4413      	add	r3, r2
 80083a8:	00db      	lsls	r3, r3, #3
 80083aa:	440b      	add	r3, r1
 80083ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	4619      	mov	r1, r3
 80083b6:	f7fe fe28 	bl	800700a <USBD_LL_DataOutStage>
}
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b082      	sub	sp, #8
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	460b      	mov	r3, r1
 80083cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80083d4:	78fa      	ldrb	r2, [r7, #3]
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	4613      	mov	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	440b      	add	r3, r1
 80083e2:	3324      	adds	r3, #36	@ 0x24
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	4619      	mov	r1, r3
 80083ea:	f7fe fe7f 	bl	80070ec <USBD_LL_DataInStage>
}
 80083ee:	bf00      	nop
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008404:	4618      	mov	r0, r3
 8008406:	f7fe ff8f 	bl	8007328 <USBD_LL_SOF>
}
 800840a:	bf00      	nop
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800841a:	2301      	movs	r3, #1
 800841c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	799b      	ldrb	r3, [r3, #6]
 8008422:	2b02      	cmp	r3, #2
 8008424:	d001      	beq.n	800842a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008426:	f7f8 f809 	bl	800043c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008430:	7bfa      	ldrb	r2, [r7, #15]
 8008432:	4611      	mov	r1, r2
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe ff3f 	bl	80072b8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008440:	4618      	mov	r0, r3
 8008442:	f7fe fef8 	bl	8007236 <USBD_LL_Reset>
}
 8008446:	bf00      	nop
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
	...

08008450 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe ff39 	bl	80072d6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7a9b      	ldrb	r3, [r3, #10]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d005      	beq.n	8008478 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800846c:	4b04      	ldr	r3, [pc, #16]	@ (8008480 <HAL_PCD_SuspendCallback+0x30>)
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	4a03      	ldr	r2, [pc, #12]	@ (8008480 <HAL_PCD_SuspendCallback+0x30>)
 8008472:	f043 0306 	orr.w	r3, r3, #6
 8008476:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008478:	bf00      	nop
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	e000ed00 	.word	0xe000ed00

08008484 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe ff33 	bl	80072fe <USBD_LL_Resume>
}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80084a8:	4a28      	ldr	r2, [pc, #160]	@ (800854c <USBD_LL_Init+0xac>)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a26      	ldr	r2, [pc, #152]	@ (800854c <USBD_LL_Init+0xac>)
 80084b4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80084b8:	4b24      	ldr	r3, [pc, #144]	@ (800854c <USBD_LL_Init+0xac>)
 80084ba:	4a25      	ldr	r2, [pc, #148]	@ (8008550 <USBD_LL_Init+0xb0>)
 80084bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80084be:	4b23      	ldr	r3, [pc, #140]	@ (800854c <USBD_LL_Init+0xac>)
 80084c0:	2208      	movs	r2, #8
 80084c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80084c4:	4b21      	ldr	r3, [pc, #132]	@ (800854c <USBD_LL_Init+0xac>)
 80084c6:	2202      	movs	r2, #2
 80084c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80084ca:	4b20      	ldr	r3, [pc, #128]	@ (800854c <USBD_LL_Init+0xac>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80084d0:	4b1e      	ldr	r3, [pc, #120]	@ (800854c <USBD_LL_Init+0xac>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80084d6:	4b1d      	ldr	r3, [pc, #116]	@ (800854c <USBD_LL_Init+0xac>)
 80084d8:	2200      	movs	r2, #0
 80084da:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80084dc:	481b      	ldr	r0, [pc, #108]	@ (800854c <USBD_LL_Init+0xac>)
 80084de:	f7f9 fc6e 	bl	8001dbe <HAL_PCD_Init>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80084e8:	f7f7 ffa8 	bl	800043c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084f2:	2318      	movs	r3, #24
 80084f4:	2200      	movs	r2, #0
 80084f6:	2100      	movs	r1, #0
 80084f8:	f7fb f97f 	bl	80037fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008502:	2358      	movs	r3, #88	@ 0x58
 8008504:	2200      	movs	r2, #0
 8008506:	2180      	movs	r1, #128	@ 0x80
 8008508:	f7fb f977 	bl	80037fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008512:	23c0      	movs	r3, #192	@ 0xc0
 8008514:	2200      	movs	r2, #0
 8008516:	2181      	movs	r1, #129	@ 0x81
 8008518:	f7fb f96f 	bl	80037fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008522:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008526:	2200      	movs	r2, #0
 8008528:	2101      	movs	r1, #1
 800852a:	f7fb f966 	bl	80037fa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008534:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008538:	2200      	movs	r2, #0
 800853a:	2182      	movs	r1, #130	@ 0x82
 800853c:	f7fb f95d 	bl	80037fa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20000efc 	.word	0x20000efc
 8008550:	40005c00 	.word	0x40005c00

08008554 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800856a:	4618      	mov	r0, r3
 800856c:	f7f9 fd1d 	bl	8001faa <HAL_PCD_Start>
 8008570:	4603      	mov	r3, r0
 8008572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	4618      	mov	r0, r3
 8008578:	f000 f94e 	bl	8008818 <USBD_Get_USB_Status>
 800857c:	4603      	mov	r3, r0
 800857e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008580:	7bbb      	ldrb	r3, [r7, #14]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	4608      	mov	r0, r1
 8008594:	4611      	mov	r1, r2
 8008596:	461a      	mov	r2, r3
 8008598:	4603      	mov	r3, r0
 800859a:	70fb      	strb	r3, [r7, #3]
 800859c:	460b      	mov	r3, r1
 800859e:	70bb      	strb	r3, [r7, #2]
 80085a0:	4613      	mov	r3, r2
 80085a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80085b2:	78bb      	ldrb	r3, [r7, #2]
 80085b4:	883a      	ldrh	r2, [r7, #0]
 80085b6:	78f9      	ldrb	r1, [r7, #3]
 80085b8:	f7f9 fe71 	bl	800229e <HAL_PCD_EP_Open>
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 f928 	bl	8008818 <USBD_Get_USB_Status>
 80085c8:	4603      	mov	r3, r0
 80085ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e2:	2300      	movs	r3, #0
 80085e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085f0:	78fa      	ldrb	r2, [r7, #3]
 80085f2:	4611      	mov	r1, r2
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7f9 feaf 	bl	8002358 <HAL_PCD_EP_Close>
 80085fa:	4603      	mov	r3, r0
 80085fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	4618      	mov	r0, r3
 8008602:	f000 f909 	bl	8008818 <USBD_Get_USB_Status>
 8008606:	4603      	mov	r3, r0
 8008608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800860a:	7bbb      	ldrb	r3, [r7, #14]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800862e:	78fa      	ldrb	r2, [r7, #3]
 8008630:	4611      	mov	r1, r2
 8008632:	4618      	mov	r0, r3
 8008634:	f7f9 ff57 	bl	80024e6 <HAL_PCD_EP_SetStall>
 8008638:	4603      	mov	r3, r0
 800863a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	4618      	mov	r0, r3
 8008640:	f000 f8ea 	bl	8008818 <USBD_Get_USB_Status>
 8008644:	4603      	mov	r3, r0
 8008646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008648:	7bbb      	ldrb	r3, [r7, #14]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800866c:	78fa      	ldrb	r2, [r7, #3]
 800866e:	4611      	mov	r1, r2
 8008670:	4618      	mov	r0, r3
 8008672:	f7f9 ff98 	bl	80025a6 <HAL_PCD_EP_ClrStall>
 8008676:	4603      	mov	r3, r0
 8008678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 f8cb 	bl	8008818 <USBD_Get_USB_Status>
 8008682:	4603      	mov	r3, r0
 8008684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008686:	7bbb      	ldrb	r3, [r7, #14]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	460b      	mov	r3, r1
 800869a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	da0b      	bge.n	80086c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086b2:	68f9      	ldr	r1, [r7, #12]
 80086b4:	4613      	mov	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	440b      	add	r3, r1
 80086be:	3312      	adds	r3, #18
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	e00b      	b.n	80086dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	4613      	mov	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	440b      	add	r3, r1
 80086d6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80086da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bc80      	pop	{r7}
 80086e4:	4770      	bx	lr

080086e6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008700:	78fa      	ldrb	r2, [r7, #3]
 8008702:	4611      	mov	r1, r2
 8008704:	4618      	mov	r0, r3
 8008706:	f7f9 fda6 	bl	8002256 <HAL_PCD_SetAddress>
 800870a:	4603      	mov	r3, r0
 800870c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f881 	bl	8008818 <USBD_Get_USB_Status>
 8008716:	4603      	mov	r3, r0
 8008718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871a:	7bbb      	ldrb	r3, [r7, #14]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	607a      	str	r2, [r7, #4]
 800872e:	461a      	mov	r2, r3
 8008730:	460b      	mov	r3, r1
 8008732:	72fb      	strb	r3, [r7, #11]
 8008734:	4613      	mov	r3, r2
 8008736:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008746:	893b      	ldrh	r3, [r7, #8]
 8008748:	7af9      	ldrb	r1, [r7, #11]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	f7f9 fe94 	bl	8002478 <HAL_PCD_EP_Transmit>
 8008750:	4603      	mov	r3, r0
 8008752:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	4618      	mov	r0, r3
 8008758:	f000 f85e 	bl	8008818 <USBD_Get_USB_Status>
 800875c:	4603      	mov	r3, r0
 800875e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008760:	7dbb      	ldrb	r3, [r7, #22]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b086      	sub	sp, #24
 800876e:	af00      	add	r7, sp, #0
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	461a      	mov	r2, r3
 8008776:	460b      	mov	r3, r1
 8008778:	72fb      	strb	r3, [r7, #11]
 800877a:	4613      	mov	r3, r2
 800877c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800878c:	893b      	ldrh	r3, [r7, #8]
 800878e:	7af9      	ldrb	r1, [r7, #11]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	f7f9 fe29 	bl	80023e8 <HAL_PCD_EP_Receive>
 8008796:	4603      	mov	r3, r0
 8008798:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	4618      	mov	r0, r3
 800879e:	f000 f83b 	bl	8008818 <USBD_Get_USB_Status>
 80087a2:	4603      	mov	r3, r0
 80087a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80087c2:	78fa      	ldrb	r2, [r7, #3]
 80087c4:	4611      	mov	r1, r2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7f9 fe3f 	bl	800244a <HAL_PCD_EP_GetRxCount>
 80087cc:	4603      	mov	r3, r0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087e0:	4b02      	ldr	r3, [pc, #8]	@ (80087ec <USBD_static_malloc+0x14>)
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr
 80087ec:	200011d4 	.word	0x200011d4

080087f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]

}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bc80      	pop	{r7}
 8008800:	4770      	bx	lr

08008802 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008802:	b480      	push	{r7}
 8008804:	b083      	sub	sp, #12
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
 800880a:	460b      	mov	r3, r1
 800880c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800880e:	bf00      	nop
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	bc80      	pop	{r7}
 8008816:	4770      	bx	lr

08008818 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008822:	2300      	movs	r3, #0
 8008824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	2b03      	cmp	r3, #3
 800882a:	d817      	bhi.n	800885c <USBD_Get_USB_Status+0x44>
 800882c:	a201      	add	r2, pc, #4	@ (adr r2, 8008834 <USBD_Get_USB_Status+0x1c>)
 800882e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008832:	bf00      	nop
 8008834:	08008845 	.word	0x08008845
 8008838:	0800884b 	.word	0x0800884b
 800883c:	08008851 	.word	0x08008851
 8008840:	08008857 	.word	0x08008857
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]
    break;
 8008848:	e00b      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800884a:	2302      	movs	r3, #2
 800884c:	73fb      	strb	r3, [r7, #15]
    break;
 800884e:	e008      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008850:	2301      	movs	r3, #1
 8008852:	73fb      	strb	r3, [r7, #15]
    break;
 8008854:	e005      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008856:	2302      	movs	r3, #2
 8008858:	73fb      	strb	r3, [r7, #15]
    break;
 800885a:	e002      	b.n	8008862 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800885c:	2302      	movs	r3, #2
 800885e:	73fb      	strb	r3, [r7, #15]
    break;
 8008860:	bf00      	nop
  }
  return usb_status;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	bc80      	pop	{r7}
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop

08008870 <memset>:
 8008870:	4603      	mov	r3, r0
 8008872:	4402      	add	r2, r0
 8008874:	4293      	cmp	r3, r2
 8008876:	d100      	bne.n	800887a <memset+0xa>
 8008878:	4770      	bx	lr
 800887a:	f803 1b01 	strb.w	r1, [r3], #1
 800887e:	e7f9      	b.n	8008874 <memset+0x4>

08008880 <__libc_init_array>:
 8008880:	b570      	push	{r4, r5, r6, lr}
 8008882:	2600      	movs	r6, #0
 8008884:	4d0c      	ldr	r5, [pc, #48]	@ (80088b8 <__libc_init_array+0x38>)
 8008886:	4c0d      	ldr	r4, [pc, #52]	@ (80088bc <__libc_init_array+0x3c>)
 8008888:	1b64      	subs	r4, r4, r5
 800888a:	10a4      	asrs	r4, r4, #2
 800888c:	42a6      	cmp	r6, r4
 800888e:	d109      	bne.n	80088a4 <__libc_init_array+0x24>
 8008890:	f000 f81a 	bl	80088c8 <_init>
 8008894:	2600      	movs	r6, #0
 8008896:	4d0a      	ldr	r5, [pc, #40]	@ (80088c0 <__libc_init_array+0x40>)
 8008898:	4c0a      	ldr	r4, [pc, #40]	@ (80088c4 <__libc_init_array+0x44>)
 800889a:	1b64      	subs	r4, r4, r5
 800889c:	10a4      	asrs	r4, r4, #2
 800889e:	42a6      	cmp	r6, r4
 80088a0:	d105      	bne.n	80088ae <__libc_init_array+0x2e>
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088a8:	4798      	blx	r3
 80088aa:	3601      	adds	r6, #1
 80088ac:	e7ee      	b.n	800888c <__libc_init_array+0xc>
 80088ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b2:	4798      	blx	r3
 80088b4:	3601      	adds	r6, #1
 80088b6:	e7f2      	b.n	800889e <__libc_init_array+0x1e>
 80088b8:	08008954 	.word	0x08008954
 80088bc:	08008954 	.word	0x08008954
 80088c0:	08008954 	.word	0x08008954
 80088c4:	08008958 	.word	0x08008958

080088c8 <_init>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	bf00      	nop
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr

080088d4 <_fini>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	bf00      	nop
 80088d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088da:	bc08      	pop	{r3}
 80088dc:	469e      	mov	lr, r3
 80088de:	4770      	bx	lr
